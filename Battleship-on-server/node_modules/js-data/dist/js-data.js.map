{"version":3,"file":"js-data.js","sources":["../src/utils.ts","../src/Settable.ts","../src/Component.ts","../src/Query.ts","../src/Relation.ts","../src/Record.ts","../src/mindex/_utils.ts","../src/mindex/index.ts","../src/Collection.ts","../src/TsDataError.ts","../src/Schema.ts","../src/Relation/BelongsTo.ts","../src/Relation/HasMany.ts","../src/Relation/HasOne.ts","../src/relations.ts","../src/decorators.ts","../src/Mapper.ts","../src/Container.ts","../src/SimpleStore.ts","../src/LinkedCollection.ts","../src/DataStore.ts","../src/index.ts"],"sourcesContent":["/**\n * Utility methods used by JSData.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @namespace utils\n * @type {Object}\n */\n\nconst DOMAIN = 'utils'\n\nconst INFINITY = 1 / 0\nconst MAX_INTEGER = 1.7976931348623157e308\nconst BOOL_TAG = '[object Boolean]'\nconst DATE_TAG = '[object Date]'\nconst FUNC_TAG = '[object Function]'\nconst NUMBER_TAG = '[object Number]'\nconst OBJECT_TAG = '[object Object]'\nconst REGEXP_TAG = '[object RegExp]'\nconst STRING_TAG = '[object String]'\nconst objToString = Object.prototype.toString\nconst PATH = /^(.+)\\.(.+)$/\n\nconst ERRORS = {\n  '400' (...args) {\n    return `expected: ${args[0]}, found: ${args[2] ? args[1] : typeof args[1]}`\n  },\n  '404' (...args) {\n    return `${args[0]} not found`\n  }\n}\n\nconst toInteger = value => {\n  if (!value) {\n    return 0\n  }\n  // Coerce to number\n  value = +value\n  if (value === INFINITY || value === -INFINITY) {\n    const sign = value < 0 ? -1 : 1\n    return sign * MAX_INTEGER\n  }\n  const remainder = value % 1\n  return value === value ? (remainder ? value - remainder : value) : 0; // eslint-disable-line\n}\n\nconst toStr = value => objToString.call(value)\n\nconst isPlainObject = value => !!value && typeof value === 'object' && value.constructor === Object\n\nconst mkdirP = (object, path) => {\n  if (!path) {\n    return object\n  }\n  const parts = path.split('.')\n  parts.forEach(key => {\n    if (!object[key]) {\n      object[key] = {}\n    }\n    object = object[key]\n  })\n  return object\n}\n\nconst utils = {\n  /**\n   * Shallow copy properties that meet the following criteria from `src` to\n   * `dest`:\n   *\n   * - own enumerable\n   * - not a function\n   * - does not start with \"_\"\n   *\n   * @method utils._\n   * @param {object} dest Destination object.\n   * @param {object} src Source object.\n   * @private\n   * @since 3.0.0\n   */\n  _ (dest, src) {\n    utils.forOwn(src, (value, key) => {\n      if (key && dest[key] === undefined && !utils.isFunction(value) && key.indexOf('_') !== 0) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Recursively iterates over relations found in `opts.with`.\n   *\n   * @method utils._forRelation\n   * @param {object} opts Configuration options.\n   * @param {Relation} def Relation definition.\n   * @param {Function} fn Callback function.\n   * @param {*} [thisArg] Execution context for the callback function.\n   * @private\n   * @since 3.0.0\n   */\n  _forRelation (opts: any = {}, def, fn, thisArg) {\n    const relationName = def.relation\n    let containedName = null\n    let index\n    opts.with = opts.with || []\n\n    if ((index = utils._getIndex(opts.with, relationName)) >= 0) {\n      containedName = relationName\n    } else if ((index = utils._getIndex(opts.with, def.localField)) >= 0) {\n      containedName = def.localField\n    }\n\n    if (opts.withAll) {\n      fn.call(thisArg, def, {})\n      return\n    } else if (!containedName) {\n      return\n    }\n    const optsCopy: any = {}\n    utils.fillIn(optsCopy, def.getRelation())\n    utils.fillIn(optsCopy, opts)\n    optsCopy.with = opts.with.slice()\n    optsCopy._activeWith = optsCopy.with.splice(index, 1)[0]\n    optsCopy.with.forEach((relation, i) => {\n      if (\n        relation &&\n        relation.indexOf(containedName) === 0 &&\n        relation.length >= containedName.length &&\n        relation[containedName.length] === '.'\n      ) {\n        optsCopy.with[i] = relation.substr(containedName.length + 1)\n      } else {\n        optsCopy.with[i] = ''\n      }\n    })\n    fn.call(thisArg, def, optsCopy)\n  },\n\n  /**\n   * Find the index of a relation in the given list\n   *\n   * @method utils._getIndex\n   * @param {string[]} list List to search.\n   * @param {string} relation Relation to find.\n   * @private\n   * @returns {number}\n   */\n  _getIndex (list, relation) {\n    let index = -1\n    list.forEach((_relation, i) => {\n      if (_relation === relation) {\n        index = i\n        return false\n      } else if (utils.isObject(_relation)) {\n        if (_relation.relation === relation) {\n          index = i\n          return false\n        }\n      }\n    })\n    return index\n  },\n\n  /**\n   * Define hidden (non-enumerable), writable properties on `target` from the\n   * provided `props`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * function Cat () {}\n   * utils.addHiddenPropsToTarget(Cat.prototype, {\n   *   say () {\n   *     console.log('meow');\n   *   }\n   * });\n   * const cat = new Cat();\n   * cat.say(); // \"meow\"\n   *\n   * @method utils.addHiddenPropsToTarget\n   * @param {object} target That to which `props` should be added.\n   * @param {object} props Properties to be added to `target`.\n   * @since 3.0.0\n   */\n  addHiddenPropsToTarget (target, props) {\n    const map = {}\n    Object.keys(props).forEach(propName => {\n      const descriptor = Object.getOwnPropertyDescriptor(props, propName)\n\n      descriptor.enumerable = false\n      map[propName] = descriptor\n    })\n    Object.defineProperties(target, map)\n  },\n\n  /**\n   * Return whether the two objects are deeply different.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * utils.areDifferent({}, {}); // false\n   * utils.areDifferent({ a: 1 }, { a: 1 }); // false\n   * utils.areDifferent({ foo: 'bar' }, {}); // true\n   *\n   * @method utils.areDifferent\n   * @param newObject\n   * @param oldObject\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Whether the two objects are deeply different.\n   * @see utils.diffObjects\n   * @since 3.0.0\n   */\n  areDifferent (newObject, oldObject, opts: any = {}) {\n    const diff = utils.diffObjects(newObject, oldObject, opts)\n    const diffCount =\n      Object.keys(diff.added).length + Object.keys(diff.removed).length + Object.keys(diff.changed).length\n    return diffCount > 0\n  },\n\n  /**\n   * Deep copy a value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' } };\n   * const b = utils.copy(a);\n   * a === b; // false\n   * utils.areDifferent(a, b); // false\n   *\n   * @param {*} from Value to deep copy.\n   * @param {*} [to] Destination object for the copy operation.\n   * @param {*} [stackFrom] For internal use.\n   * @param {*} [stackTo] For internal use.\n   * @param {string[]|RegExp[]} [blacklist] List of strings or RegExp of\n   * properties to skip.\n   * @param {boolean} [plain] Whether to make a plain copy (don't try to use\n   * original prototype).\n   * @returns {*} Deep copy of `from`.\n   * @since 3.0.0\n   */\n  copy (from, to?, stackFrom?, stackTo?, blacklist?, plain?) {\n    if (!to) {\n      to = from\n      if (from) {\n        if (utils.isArray(from)) {\n          to = utils.copy(from, [], stackFrom, stackTo, blacklist, plain)\n        } else if (utils.isDate(from)) {\n          to = new Date(from.getTime())\n        } else if (utils.isRegExp(from)) {\n          to = new RegExp(from.source, from.toString().match(/[^/]*$/)[0])\n          to.lastIndex = from.lastIndex\n        } else if (utils.isObject(from)) {\n          if (plain) {\n            to = utils.copy(from, {}, stackFrom, stackTo, blacklist, plain)\n          } else {\n            to = utils.copy(from, Object.create(Object.getPrototypeOf(from)), stackFrom, stackTo, blacklist, plain)\n          }\n        }\n      }\n    } else {\n      if (from === to) {\n        throw utils.err(`${DOMAIN}.copy`)(500, 'Cannot copy! Source and destination are identical.')\n      }\n\n      stackFrom = stackFrom || []\n      stackTo = stackTo || []\n\n      if (utils.isObject(from)) {\n        const index = stackFrom.indexOf(from)\n        if (index !== -1) {\n          return stackTo[index]\n        }\n\n        stackFrom.push(from)\n        stackTo.push(to)\n      }\n\n      let result\n      if (utils.isArray(from)) {\n        let i\n        to.length = 0\n        for (i = 0; i < from.length; i++) {\n          result = utils.copy(from[i], null, stackFrom, stackTo, blacklist, plain)\n          if (utils.isObject(from[i])) {\n            stackFrom.push(from[i])\n            stackTo.push(result)\n          }\n          to.push(result)\n        }\n      } else {\n        if (utils.isArray(to)) {\n          to.length = 0\n        } else {\n          utils.forOwn(to, (value, key) => {\n            delete to[key]\n          })\n        }\n        for (const key in from) {\n          if (from.hasOwnProperty(key)) {\n            if (utils.isBlacklisted(key, blacklist)) {\n              continue\n            }\n            result = utils.copy(from[key], null, stackFrom, stackTo, blacklist, plain)\n            if (utils.isObject(from[key])) {\n              stackFrom.push(from[key])\n              stackTo.push(result)\n            }\n            to[key] = result\n          }\n        }\n      }\n    }\n    return to\n  },\n\n  /**\n   * Recursively shallow fill in own enumerable properties from `source` to\n   * `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"bip\"}\n   *\n   * @method utils.deepFillIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  deepFillIn (dest, source?) {\n    if (source) {\n      utils.forOwn(source, (value, key) => {\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepFillIn(existing, value)\n        } else if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n          dest[key] = value\n        }\n      })\n    }\n    return dest\n  },\n\n  /**\n   * Recursively shallow copy enumerable properties from `source` to `dest`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.deepFillIn(b, a);\n   * console.log(b); // {\"foo\":{\"bar\":\"baz\"},\"beep\":\"boop\"}\n   *\n   * @method utils.deepMixIn\n   * @param {object} dest The destination object.\n   * @param {object} source The source object.\n   * @see utils.fillIn\n   * @see utils.deepFillIn\n   * @since 3.0.0\n   */\n  deepMixIn (dest, source?) {\n    if (source) {\n      // tslint:disable-next-line:forin\n      for (const key in source) {\n        const value = source[key]\n        const existing = dest[key]\n        if (isPlainObject(value) && isPlainObject(existing)) {\n          utils.deepMixIn(existing, value)\n        } else {\n          dest[key] = value\n        }\n      }\n    }\n    return dest\n  },\n\n  /**\n   * Return a diff of the base object to the comparison object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const oldObject = { foo: 'bar', a: 1234 };\n   * const newObject = { beep: 'boop', a: 5678 };\n   * const diff = utils.diffObjects(oldObject, newObject);\n   * console.log(diff.added); // {\"beep\":\"boop\"}\n   * console.log(diff.changed); // {\"a\":5678}\n   * console.log(diff.removed); // {\"foo\":undefined}\n   *\n   * @method utils.diffObjects\n   * @param {object} newObject Comparison object.\n   * @param {object} oldObject Base object.\n   * @param {object} [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} The diff from the base object to the comparison object.\n   * @see utils.areDifferent\n   * @since 3.0.0\n   */\n  diffObjects (newObject, oldObject, opts: any = {}) {\n    let equalsFn = opts.equalsFn\n    const blacklist = opts.ignore\n    const diff = {\n      added: {},\n      changed: {},\n      removed: {}\n    }\n    if (!utils.isFunction(equalsFn)) {\n      equalsFn = utils.deepEqual\n    }\n\n    const newKeys = Object.keys(newObject).filter(key => !utils.isBlacklisted(key, blacklist))\n    const oldKeys = Object.keys(oldObject).filter(key => !utils.isBlacklisted(key, blacklist))\n\n    // Check for properties that were added or changed\n    newKeys.forEach(key => {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (equalsFn(oldValue, newValue)) {\n        return\n      }\n      if (oldValue === undefined) {\n        diff.added[key] = newValue\n      } else {\n        diff.changed[key] = newValue\n      }\n    })\n\n    // Check for properties that were removed\n    oldKeys.forEach(key => {\n      const oldValue = oldObject[key]\n      const newValue = newObject[key]\n      if (newValue === undefined && oldValue !== undefined) {\n        diff.removed[key] = undefined\n      }\n    })\n\n    return diff\n  },\n\n  /**\n   * Return whether the two values are equal according to the `==` operator.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.equal(1,1)); // true\n   * console.log(utils.equal(1,'1')); // true\n   * console.log(utils.equal(93, 66)); // false\n   *\n   * @method utils.equal\n   * @param {*} a First value in the comparison.\n   * @param {*} b Second value in the comparison.\n   * @returns {boolean} Whether the two values are equal according to `==`.\n   * @since 3.0.0\n   */\n  equal (a, b) {\n    // tslint:disable-next-line:triple-equals\n    return a == b; // eslint-disable-line\n  },\n\n  /**\n   * Produce a factory function for making Error objects with the provided\n   * metadata. Used throughout the various js-data components.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const errorFactory = utils.err('domain', 'target');\n   * const error400 = errorFactory(400, 'expected type', 'actual type');\n   * console.log(error400); // [Error: [domain:target] expected: expected type, found: string\n   * http://www.js-data.io/v3.0/docs/errors#400]\n   * @method utils.err\n   * @param {string} domain Namespace.\n   * @param {string} target Target.\n   * @returns {Function} Factory function.\n   * @since 3.0.0\n   */\n  err (domain, target?) {\n    return (code, ...args) => {\n      const prefix = `[${domain}:${target}] `\n      let message = ERRORS[code].apply(null, args)\n      message = `${prefix}${message}\nhttp://www.js-data.io/v3.0/docs/errors#${code}`\n      return new Error(message)\n    }\n  },\n\n  /**\n   * Add eventing capabilities into the target object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const user = { name: 'John' };\n   * utils.eventify(user);\n   * user.on('foo', () => console.log(arguments));\n   * user.emit('foo', 1, 'bar'); // should log to console values (1, \"bar\")\n   *\n   * @method utils.eventify\n   * @param {object} target Target object.\n   * @param {Function} [getter] Custom getter for retrieving the object's event\n   * listeners.\n   * @param {Function} [setter] Custom setter for setting the object's event\n   * listeners.\n   * @since 3.0.0\n   */\n  eventify (target, getter?, setter?) {\n    target = target || this\n    let _events = {}\n    if (!getter && !setter) {\n      getter = () => _events\n      setter = value => (_events = value)\n    }\n    Object.defineProperties(target, {\n      emit: {\n        value (...args) {\n          const events = getter.call(this) || {}\n          const type = args.shift()\n          let listeners = events[type] || []\n          let i\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n          listeners = events.all || []\n          args.unshift(type)\n          for (i = 0; i < listeners.length; i++) {\n            listeners[i].f.apply(listeners[i].c, args)\n          }\n        }\n      },\n      off: {\n        value (type, func) {\n          const events = getter.call(this)\n          const listeners = events[type]\n          if (!listeners) {\n            setter.call(this, {})\n          } else if (func) {\n            for (let i = 0; i < listeners.length; i++) {\n              if (listeners[i].f === func) {\n                listeners.splice(i, 1)\n                break\n              }\n            }\n          } else {\n            listeners.splice(0, listeners.length)\n          }\n        }\n      },\n      on: {\n        value (type, func, thisArg) {\n          if (!getter.call(this)) {\n            setter.call(this, {})\n          }\n          const events = getter.call(this)\n          events[type] = events[type] || []\n          events[type].push({\n            c: thisArg,\n            f: func\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Shallow copy own enumerable properties from `src` to `dest` that are on\n   * `src` but are missing from `dest.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: 'bar', beep: 'boop' };\n   * const b = { beep: 'bip' };\n   * utils.fillIn(b, a);\n   * console.log(b); // {\"foo\":\"bar\",\"beep\":\"bip\"}\n   *\n   * @method utils.fillIn\n   * @param {object} dest The destination object.\n   * @param src\n   * @see utils.deepFillIn\n   * @see utils.deepMixIn\n   * @since 3.0.0\n   */\n  fillIn (dest, src) {\n    utils.forOwn(src, (value, key) => {\n      if (!dest.hasOwnProperty(key) || dest[key] === undefined) {\n        dest[key] = value\n      }\n    })\n  },\n\n  /**\n   * Find the last index of an item in an array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = { name: 'John', age: 20 };\n   * const sara = { name: 'Sara', age: 25 };\n   * const dan = { name: 'Dan', age: 20 };\n   * const users = [john, sara, dan];\n   *\n   * console.log(utils.findIndex(users, (user) => user.age === 25)); // 1\n   * console.log(utils.findIndex(users, (user) => user.age > 19)); // 2\n   * console.log(utils.findIndex(users, (user) => user.name === 'John')); // 0\n   * console.log(utils.findIndex(users, (user) => user.name === 'Jimmy')); // -1\n   *\n   * @method utils.findIndex\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   * @returns {number} Index if found or -1 if not found.\n   * @since 3.0.0\n   */\n  findIndex (array, fn) {\n    let index = -1\n    if (!array) {\n      return index\n    }\n    array.forEach((record, i) => {\n      if (fn(record)) {\n        index = i\n        return false\n      }\n    })\n    return index\n  },\n\n  /**\n   * Recursively iterate over a {@link Mapper}'s relations according to\n   * `opts.with`.\n   *\n   * @method utils.forEachRelation\n   * @param {Mapper} mapper Mapper.\n   * @param {object} opts Configuration options.\n   * @param {Function} fn Callback function.\n   * @param {*} thisArg Execution context for the callback function.\n   * @since 3.0.0\n   */\n  forEachRelation (mapper, opts, fn, thisArg?) {\n    const relationList = mapper.relationList || []\n    if (!relationList.length) {\n      return\n    }\n    relationList.forEach(def => {\n      utils._forRelation(opts, def, fn, thisArg)\n    })\n  },\n\n  /**\n   * Iterate over an object's own enumerable properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { b: 1, c: 4 };\n   * let sum = 0;\n   * utils.forOwn(a, function (value, key) {\n   *   sum += value;\n   * });\n   * console.log(sum); // 5\n   *\n   * @method utils.forOwn\n   * @param obj\n   * @param {Function} fn Iteration function.\n   * @param {object} [thisArg] Content to which to bind `fn`.\n   * @since 3.0.0\n   */\n  forOwn (obj, fn, thisArg?) {\n    const keys = Object.keys(obj)\n    const len = keys.length\n    let i\n    for (i = 0; i < len; i++) {\n      if (fn.call(thisArg, obj[keys[i]], keys[i], obj) === false) {\n        break\n      }\n    }\n  },\n\n  /**\n   * Proxy for `JSON.parse`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = utils.fromJson('{\"name\" : \"John\"}');\n   * console.log(a); // { name: 'John' }\n   *\n   * @method utils.fromJson\n   * @param {string} json JSON to parse.\n   * @returns {Object} Parsed object.\n   * @see utils.toJson\n   * @since 3.0.0\n   */\n  fromJson (json) {\n    return utils.isString(json) ? JSON.parse(json) : json\n  },\n\n  /**\n   * Retrieve the specified property from the given object. Supports retrieving\n   * nested properties.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: { bar: 'baz' }, beep: 'boop' };\n   * console.log(utils.get(a, 'beep')); // \"boop\"\n   * console.log(utils.get(a, 'foo.bar')); // \"baz\"\n   *\n   * @method utils.get\n   * @param {object} object Object from which to retrieve a property's value.\n   * @param {string} prop Property to retrieve.\n   * @returns {*} Value of the specified property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  get (object, prop) {\n    if (!prop) {\n      return\n    }\n    /* if prop is function, get the property by calling a function, passing an object as a parameter */\n    if (utils.isFunction(prop)) {\n      return prop(object)\n    }\n    const parts = prop.split('.')\n    const last = parts.pop()\n\n    while ((prop = parts.shift())) {\n      // eslint-disable-line\n      object = object[prop]\n      if (object == null) {\n        // eslint-disable-line\n        return\n      }\n    }\n\n    return object[last]\n  },\n\n  /**\n   * Return the superclass for the given instance or subclass. If an instance is\n   * provided, then finds the parent class of the instance's constructor.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * // using ES2015 classes\n   * class Foo {}\n   * class Bar extends Foo {}\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * // using Function constructor with utils.extend\n   * function Foo () {}\n   * Foo.extend = utils.extend;\n   * const Bar = Foo.extend();\n   * const barInstance = new Bar();\n   * let baseType = utils.getSuper(barInstance);\n   * console.log(Foo === baseType); // true\n   *\n   * @method utils.getSuper\n   * @param {Object|Function} instance Instance or constructor.\n   * @param {boolean} [isCtor=false] Whether `instance` is a constructor.\n   * @returns {Constructor} The superclass (grandparent constructor).\n   * @since 3.0.0\n   */\n  getSuper (instance, isCtor?) {\n    const ctor = isCtor ? instance : instance.constructor\n    if (ctor.hasOwnProperty('__super__')) {\n      return ctor.__super__\n    }\n    return Object.getPrototypeOf(ctor) || ctor.__proto__; // eslint-disable-line\n  },\n\n  /**\n   * Return the intersection of two arrays.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const arrA = ['green', 'red', 'blue', 'red'];\n   * const arrB = ['green', 'yellow', 'red'];\n   * const intersected = utils.intersection(arrA, arrB);\n   *\n   * console.log(intersected); // ['green', 'red'])\n   *\n   * @method utils.intersection\n   * @param {array} array1 First array.\n   * @param {array} array2 Second array.\n   * @returns {Array} Array of elements common to both arrays.\n   * @since 3.0.0\n   */\n  intersection (array1, array2) {\n    if (!array1 || !array2) {\n      return []\n    }\n    array1 = Array.isArray(array1) ? array1 : [array1]\n    array2 = Array.isArray(array2) ? array2 : [array2]\n    const result = []\n    let item\n    let i\n    const len = array1.length\n    for (i = 0; i < len; i++) {\n      item = array1[i]\n      if (result.indexOf(item) !== -1) {\n        continue\n      }\n      if (array2.indexOf(item) !== -1) {\n        result.push(item)\n      }\n    }\n    return result\n  },\n\n  /**\n   * Proxy for `Array.isArray`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = [1,2,3,4,5];\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isArray(a)); // true\n   * console.log(utils.isArray(b)); // false\n   *\n   * @method utils.isArray\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an array.\n   * @since 3.0.0\n   */\n  isArray: Array.isArray,\n\n  /**\n   * Return whether `prop` is matched by any string or regular expression in\n   * `blacklist`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const blacklist = [/^\\$hashKey/g, /^_/g, 'id'];\n   * console.log(utils.isBlacklisted(\"$hashKey\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"id\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"_myProp\", blacklist)); // true\n   * console.log(utils.isBlacklisted(\"my_id\", blacklist)); // false\n   *\n   * @method utils.isBlacklisted\n   * @param {string} prop The name of a property to check.\n   * @param {array} blacklist Array of strings and regular expressions.\n   * @returns {boolean} Whether `prop` was matched.\n   * @since 3.0.0\n   */\n  isBlacklisted (prop, blacklist) {\n    if (!blacklist || !blacklist.length) {\n      return false\n    }\n    let matches\n    for (const item of blacklist) {\n      if ((toStr(item) === REGEXP_TAG && item.test(prop)) || item === prop) {\n        matches = prop\n        return !!matches\n      }\n    }\n    return !!matches\n  },\n\n  /**\n   * Return whether the provided value is a boolean.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = true;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isBoolean(a)); // true\n   * console.log(utils.isBoolean(b)); // false\n   *\n   * @method utils.isBoolean\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a boolean.\n   * @since 3.0.0\n   */\n  isBoolean (value) {\n    return toStr(value) === BOOL_TAG\n  },\n\n  /**\n   * Return whether the provided value is a date.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = new Date();\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isDate(a)); // true\n   * console.log(utils.isDate(b)); // false\n   *\n   * @method utils.isDate\n   * @param {*} value The value to test.\n   * @returns {Date} Whether the provided value is a date.\n   * @since 3.0.0\n   */\n  isDate (value) {\n    return value && typeof value === 'object' && toStr(value) === DATE_TAG\n  },\n\n  /**\n   * Return whether the provided value is a function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = function () { console.log('foo bar'); };\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isFunction(a)); // true\n   * console.log(utils.isFunction(b)); // false\n   *\n   * @method utils.isFunction\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a function.\n   * @since 3.0.0\n   */\n  isFunction (value) {\n    return typeof value === 'function' || (value && toStr(value) === FUNC_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an integer.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = 1.25;\n   * const c = '1';\n   * console.log(utils.isInteger(a)); // true\n   * console.log(utils.isInteger(b)); // false\n   * console.log(utils.isInteger(c)); // false\n   *\n   * @method utils.isInteger\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an integer.\n   * @since 3.0.0\n   */\n  isInteger (value) {\n    // tslint:disable-next-line:triple-equals\n    return toStr(value) === NUMBER_TAG && value == toInteger(value); // eslint-disable-line\n  },\n\n  /**\n   * Return whether the provided value is `null`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = null;\n   * const b = { foo: \"bar\" };\n   * console.log(utils.isNull(a)); // true\n   * console.log(utils.isNull(b)); // false\n   *\n   * @method utils.isNull\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is `null`.\n   * @since 3.0.0\n   */\n  isNull (value) {\n    return value === null\n  },\n\n  /**\n   * Return whether the provided value is a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = 1;\n   * const b = -1.25;\n   * const c = '1';\n   * console.log(utils.isNumber(a)); // true\n   * console.log(utils.isNumber(b)); // true\n   * console.log(utils.isNumber(c)); // false\n   *\n   * @method utils.isNumber\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a number.\n   * @since 3.0.0\n   */\n  isNumber (value) {\n    const type = typeof value\n    return type === 'number' || (value && type === 'object' && toStr(value) === NUMBER_TAG)\n  },\n\n  /**\n   * Return whether the provided value is an object.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\" };\n   * const b = 'foo bar';\n   * console.log(utils.isObject(a)); // true\n   * console.log(utils.isObject(b)); // false\n   *\n   * @method utils.isObject\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is an object.\n   * @since 3.0.0\n   */\n  isObject (value) {\n    return toStr(value) === OBJECT_TAG\n  },\n\n  /**\n   * Return whether the provided value is a regular expression.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = /^\\$.+$/ig;\n   * const b = new RegExp('^\\$.+$', 'ig');\n   * const c = { foo: \"bar\" };\n   * console.log(utils.isRegExp(a)); // true\n   * console.log(utils.isRegExp(b)); // true\n   * console.log(utils.isRegExp(c)); // false\n   *\n   * @method utils.isRegExp\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a regular expression.\n   * @since 3.0.0\n   */\n  isRegExp (value) {\n    return toStr(value) === REGEXP_TAG\n  },\n\n  /**\n   * Return whether the provided value is a string or a number.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isSorN('')); // true\n   * console.log(utils.isSorN(-1.65)); // true\n   * console.log(utils.isSorN('my string')); // true\n   * console.log(utils.isSorN({})); // false\n   * console.log(utils.isSorN([1,2,4])); // false\n   *\n   * @method utils.isSorN\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string or a number.\n   * @since 3.0.0\n   */\n  isSorN (value) {\n    return utils.isString(value) || utils.isNumber(value)\n  },\n\n  /**\n   * Return whether the provided value is a string.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * console.log(utils.isString('')); // true\n   * console.log(utils.isString('my string')); // true\n   * console.log(utils.isString(100)); // false\n   * console.log(utils.isString([1,2,4])); // false\n   *\n   * @method utils.isString\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a string.\n   * @since 3.0.0\n   */\n  isString (value) {\n    return typeof value === 'string' || (value && typeof value === 'object' && toStr(value) === STRING_TAG)\n  },\n\n  /**\n   * Return whether the provided value is a `undefined`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = undefined;\n   * const b = { foo: \"bar\"};\n   * console.log(utils.isUndefined(a)); // true\n   * console.log(utils.isUndefined(b.baz)); // true\n   * console.log(utils.isUndefined(b)); // false\n   * console.log(utils.isUndefined(b.foo)); // false\n   *\n   * @method utils.isUndefined\n   * @param {*} value The value to test.\n   * @returns {boolean} Whether the provided value is a `undefined`.\n   * @since 3.0.0\n   */\n  isUndefined (value) {\n    return value === undefined\n  },\n\n  /**\n   * Mix in logging capabilities to the target.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { foo: \"bar\"};\n   *\n   * // Add standard logging to an object\n   * utils.logify(a);\n   * a.log('info', 'test log info'); // output 'test log info' to console.\n   *\n   * // Toggle debug output of an object\n   * a.dbg('test debug output'); // does not output because debug is off.\n   * a.debug = true;\n   * a.dbg('test debug output'); // output 'test debug output' to console.\n   *\n   * @method utils.logify\n   * @param {*} target The target.\n   * @since 3.0.0\n   */\n  logify (target) {\n    utils.addHiddenPropsToTarget(target, {\n      dbg (...args) {\n        if (utils.isFunction(this.log)) {\n          this.log('debug', ...args)\n        }\n      },\n      log (level, ...args) {\n        if (level && !args.length) {\n          args.push(level)\n          level = 'debug'\n        }\n        if (level === 'debug' && !this.debug) {\n          return\n        }\n        const prefix = `${level.toUpperCase()}: (${this.name || this.constructor.name})`\n        if (utils.isFunction(console[level])) {\n          console[level](prefix, ...args)\n        } else {\n          console.log(prefix, ...args)\n        }\n      }\n    })\n  },\n\n  /**\n   * Adds the given record to the provided array only if it's not already in the\n   * array.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const colors = ['red', 'green', 'yellow'];\n   *\n   * console.log(colors.length); // 3\n   * utils.noDupeAdd(colors, 'red');\n   * console.log(colors.length); // 3, red already exists\n   *\n   * utils.noDupeAdd(colors, 'blue');\n   * console.log(colors.length); // 4, blue was added\n   *\n   * @method utils.noDupeAdd\n   * @param {array} array The array.\n   * @param {*} record The value to add.\n   * @param {Function} fn Callback function passed to {@link utils.findIndex}.\n   * @since 3.0.0\n   */\n  noDupeAdd (array, record?, fn?) {\n    if (!array) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index < 0) {\n      array.push(record)\n    }\n  },\n\n  /**\n   * Return a shallow copy of the provided object, minus the properties\n   * specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.omit(a, ['$hashKey']);\n   * console.log(b); // { name: 'John' }\n   *\n   * @method utils.omit\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to skip.\n   * @returns {Object} Shallow copy of `props`, minus `keys`.\n   * @since 3.0.0\n   */\n  omit (props, keys) {\n    const _props = {}\n    utils.forOwn(props, (value, key) => {\n      if (keys.indexOf(key) === -1) {\n        _props[key] = value\n      }\n    })\n    return _props\n  },\n\n  /**\n   * Return a shallow copy of the provided object, but only include the\n   * properties specified in `keys`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John', $hashKey: 1214910 };\n   *\n   * let b = utils.pick(a, ['$hashKey']);\n   * console.log(b); // { $hashKey: 1214910 }\n   *\n   * @method utils.pick\n   * @param {object} props The object to copy.\n   * @param {string[]} keys Array of strings, representing properties to keep.\n   * @returns {Object} Shallow copy of `props`, but only including `keys`.\n   * @since 3.0.0\n   */\n  pick (props, keys) {\n    return keys.reduce((map, key) => {\n      map[key] = props[key]\n      return map\n    }, {})\n  },\n\n  /**\n   * Return a plain copy of the given value.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   * const a = { name: 'John' };\n   * let b = utils.plainCopy(a);\n   * console.log(a === b); // false\n   *\n   * @method utils.plainCopy\n   * @param {*} value The value to copy.\n   * @returns {*} Plain copy of `value`.\n   * @see utils.copy\n   * @since 3.0.0\n   */\n  plainCopy (value) {\n    return utils.copy(value, undefined, undefined, undefined, undefined, true)\n  },\n\n  /**\n   * Shortcut for `utils.Promise.reject(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.reject(\"Testing static reject\").then(function (data) {\n   *   // not called\n   * }).catch(function (reason) {\n   *   console.log(reason); // \"Testing static reject\"\n   * });\n   *\n   * @method utils.reject\n   * @param {*} [value] Value with which to reject the Promise.\n   * @returns {Promise} Promise reject with `value`.\n   */\n  reject (value) {\n    return Promise.reject(value)\n  },\n\n  /**\n   * Remove the last item found in array according to the given checker function.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const colors = ['red', 'green', 'yellow', 'red'];\n   * utils.remove(colors, (color) => color === 'red');\n   * console.log(colors); // ['red', 'green', 'yellow']\n   *\n   * @method utils.remove\n   * @param {array} array The array to search.\n   * @param {Function} fn Checker function.\n   */\n  remove (array, fn?) {\n    if (!array || !array.length) {\n      return\n    }\n    const index = this.findIndex(array, fn)\n    if (index >= 0) {\n      array.splice(index, 1) // todo should this be recursive?\n    }\n  },\n\n  /**\n   * Shortcut for `utils.Promise.resolve(value)`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * utils.resolve(\"Testing static resolve\").then(function (data) {\n   *   console.log(data); // \"Testing static resolve\"\n   * }).catch(function (reason) {\n   *   // not called\n   * });\n   *\n   * @param {*} [value] Value with which to resolve the Promise.\n   * @returns {Promise} Promise resolved with `value`.\n   */\n  resolve (value?) {\n    return Promise.resolve(value)\n  },\n\n  /**\n   * Set the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   * // set value by key\n   * utils.set(john, 'id', 98);\n   * console.log(john.id); // 98\n   *\n   * // set value by path\n   * utils.set(john, 'parent.id', 20);\n   * console.log(john.parent.id); // 20\n   *\n   * // set value by path/value map\n   * utils.set(john, {\n   *   'id': 1098,\n   *   'parent': { id: 1020 },\n   *   'parent.age': '55'\n   * });\n   * console.log(john.id); // 1098\n   * console.log(john.parent.id); // 1020\n   * console.log(john.parent.age); // 55\n   *\n   * @method utils.set\n   * @param {object} object The object on which to set a property.\n   * @param {(string|Object)} path The key or path to the property. Can also\n   * pass in an object of path/value pairs, which will all be set on the target\n   * object.\n   * @param {*} [value] The value to set.\n   */\n  set (object, path, value?, opts?) {\n    if (utils.isObject(path)) {\n      utils.forOwn(path, (value, _path) => {\n        utils.set(object, _path, value)\n      })\n    } else {\n      const parts = PATH.exec(path)\n      if (parts) {\n        mkdirP(object, parts[1])[parts[2]] = value\n      } else {\n        object[path] = value\n      }\n    }\n  },\n\n  /**\n   * Check whether the two provided objects are deeply equal.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const objA = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * const objB = {\n   *   name: 'John',\n   *   id: 27,\n   *   nested: {\n   *     item: 'item 1',\n   *     colors: ['red', 'green', 'blue']\n   *   }\n   * };\n   *\n   * console.log(utils.deepEqual(a,b)); // true\n   * objB.nested.colors.add('yellow'); // make a change to a nested object's array\n   * console.log(utils.deepEqual(a,b)); // false\n   *\n   * @method utils.deepEqual\n   * @param {object} a First object in the comparison.\n   * @param {object} b Second object in the comparison.\n   * @returns {boolean} Whether the two provided objects are deeply equal.\n   * @see utils.equal\n   * @since 3.0.0\n   */\n  deepEqual (a, b) {\n    if (a === b) {\n      return true\n    }\n    let _equal = true\n    if (utils.isArray(a) && utils.isArray(b)) {\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = a.length; i--;) {\n        if (!utils.deepEqual(a[i], b[i])) {\n          // Exit loop early\n          return false\n        }\n      }\n    } else if (utils.isObject(a) && utils.isObject(b)) {\n      utils.forOwn(a, (value, key) => {\n        if (!(_equal = utils.deepEqual(value, b[key]))) {\n          // Exit loop early\n          return false\n        }\n      })\n      if (_equal) {\n        utils.forOwn(b, (value, key) => {\n          if (!(_equal = utils.deepEqual(value, a[key]))) {\n            // Exit loop early\n            return false\n          }\n        })\n      }\n    } else {\n      return false\n    }\n    return _equal\n  },\n\n  /**\n   * Proxy for `JSON.stringify`.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const a = { name: 'John' };\n   * let jsonVal = utils.toJson(a);\n   * console.log(jsonVal); // '{\"name\" : \"John\"}'\n   *\n   * @method utils.toJson\n   * @param {*} value Value to serialize to JSON.\n   * @returns {string} JSON string.\n   * @see utils.fromJson\n   * @since 3.0.0\n   */\n  toJson: JSON.stringify,\n\n  /**\n   * Unset the value at the provided key or path.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   * const john = {\n   *   name: 'John',\n   *   age: 25,\n   *   parent: {\n   *     name: 'John's Mom',\n   *     age: 50\n   *   }\n   * };\n   *\n   * utils.unset(john, age);\n   * utils.unset(john, parent.age);\n   *\n   * console.log(john.age); // null\n   * console.log(john.parent.age); // null\n   *\n   * @method utils.unset\n   * @param {object} object The object from which to delete the property.\n   * @param {string} path The key or path to the property.\n   * @see utils.set\n   * @since 3.0.0\n   */\n  unset (object, path: string) {\n    const parts = path.split('.')\n    const last = parts.pop()\n\n    while ((path = parts.shift())) {\n      // eslint-disable-line\n      object = object[path]\n      if (object == null) {\n        // eslint-disable-line\n        return\n      }\n    }\n\n    object[last] = undefined\n  },\n  /**\n   * Gets default locale for the js-data context.\n   *\n   * @example\n   * import { utils } from 'js-data';\n   *\n   *\n   * utils.getDefaultLocale();\n   *\n   * @method utils.getDefaultLocale\n   * @since 4.0.0\n   */\n  getDefaultLocale () {\n    return 'en'\n  }\n}\n\nexport const safeSetProp = (record, field, value) => {\n  if (record?._set) {\n    record._set(`props.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport const safeSetLink = (record, field, value) => {\n  if (record?._set) {\n    record._set(`links.${field}`, value)\n  } else {\n    utils.set(record, field, value)\n  }\n}\n\nexport default utils\n","import utils from './utils'\n\n/**\n * A base class which gives instances private properties.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * @example\n * import {Settable} from 'js-data';\n *\n * class CustomSettableClass extends Settable {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n *\n * const customSettable = new CustomSettableClass();\n * console.log(customSettable.foo());\n * console.log(CustomSettableClass.beep());\n *\n * @since 3.0.0\n */\nexport default class Settable {\n  [customAttr: string]: any;\n\n  /**\n   * Get a private property of this instance.\n   *\n   * __Don't use the method unless you know what you're doing.__\n   *\n   * @method Settable#_get\n   * @param {string} key The property to retrieve.\n   * @returns {*} The value of the property.\n   * @since 3.0.0\n   */\n  protected _get: (key: string) => any;\n\n  /**\n   * Set a private property of this instance.\n   *\n   * __Don't use the method unless you know what you're doing.__\n   *\n   * @method __Don't use the method unless you know what you're doing.__#_set\n   * @param {(string|Object)} key The key or path to the property. Can also\n   * pass in an object of key/value pairs, which will all be set on the instance.\n   * @param {*} [value] The value to set.\n   * @since 3.0.0\n   */\n  protected _set: (key, value?) => any;\n\n  /**\n   * Unset a private property of this instance.\n   *\n   * __Don't use the method unless you know what you're doing.__\n   *\n   * @method __Don't use the method unless you know what you're doing.__#_unset\n   * @param {string} key The property to unset.\n   * @since 3.0.0\n   */\n  protected _unset: (key) => any;\n\n  constructor () {\n    const _props = {}\n\n    Object.defineProperties(this, {\n      _get: {\n        value (key) {\n          return utils.get(_props, key)\n        }\n      },\n      _set: {\n        value (key, value) {\n          return utils.set(_props, key, value)\n        }\n      },\n      _unset: {\n        value (key) {\n          return utils.unset(_props, key)\n        }\n      }\n    })\n  }\n}\n","import utils from './utils'\nimport Settable from './Settable'\n\nexport interface ComponentOpts {\n  debug?: boolean\n}\n\n/**\n * The base class from which all JSData components inherit some basic\n * functionality.\n *\n * Typically you won't instantiate this class directly, but you may find it\n * useful as an abstract class for your own components.\n *\n * @example\n * import {Component} from 'js-data'\n *\n * class CustomComponentClass extends Component {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customComponent = new CustomComponentClass();\n * console.log(customComponent.foo());\n * console.log(CustomComponentClass.beep());\n * ```\n *\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @returns {Component} A new {@link Component} instance.\n * @since 3.0.0\n */\nexport default class Component extends Settable {\n  /**\n   * Whether to enable debug-level logs for this component. Anything that\n   * extends `Component` inherits this option and the corresponding logging\n   * functionality.\n   *\n   * @example <caption>Component#debug</caption>\n   * const JSData = require('js-data');\n   * const { Component } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const component = new Component();\n   * component.log('debug', 'some message'); // nothing gets logged\n   * // Display debug logs:\n   * component.debug = true;\n   * component.log('debug', 'other message'); // this DOES get logged\n   *\n   * @default false\n   * @name Component#debug\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  protected debug: boolean;\n\n  /**\n   * Event listeners attached to this Component. __Do not modify.__ Use\n   * {@link Component#on} and {@link Component#off} instead.\n   *\n   * @name Component#_listeners\n   * @private\n   * @instance\n   * @since 3.0.0\n   * @type {Object}\n   */\n  _listeners = {};\n\n  /**\n   * Log the provided values at the \"debug\" level. Debug-level logs are only\n   * logged if {@link Component#debug} is `true`.\n   *\n   * `.dbg(...)` is shorthand for `.log('debug', ...)`.\n   *\n   * @method Component#dbg\n   * @param {...*} [args] Values to log.\n   * @since 3.0.0\n   */\n  dbg: (...args) => void;\n\n  /**\n   * Log the provided values. By default sends values to `console[level]`.\n   * Debug-level logs are only logged if {@link Component#debug} is `true`.\n   *\n   * Will attempt to use appropriate `console` methods if they are available.\n   *\n   * @method Component#log\n   * @param {string} level Log level.\n   * @param {...*} [args] Values to log.\n   * @since 3.0.0\n   */\n  log: (...args) => void;\n\n  /**\n   * Register a new event listener on this Component.\n   *\n   * @example\n   * // Listen for all \"afterCreate\" events in a DataStore\n   * store.on('afterCreate', (mapperName, props, opts, result) => {\n   *   console.log(mapperName); // \"post\"\n   *   console.log(props.id); // undefined\n   *   console.log(result.id); // 1234\n   * });\n   * store.create('post', { title: 'Modeling your data' }).then((post) => {\n   *   console.log(post.id); // 1234\n   * });\n   *\n   * @example\n   * // Listen for the \"add\" event on a collection\n   * collection.on('add', (records) => {\n   *   console.log(records); // [...]\n   * });\n   *\n   * @example\n   * // Listen for \"change\" events on a record\n   * post.on('change', (record, changes) => {\n   *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n   * });\n   * post.title = 'Modeling your data';\n   *\n   * @method Component#on\n   * @param {string} event Name of event to subscribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n  on: (name: string, listener: Function, ctx?) => void;\n\n  /**\n   * Remove an event listener from this Component. If no listener is provided,\n   * then all listeners for the specified event will be removed. If no event is\n   * specified then all listeners for all events will be removed.\n   *\n   * @example\n   * // Remove a particular listener for a particular event\n   * collection.off('add', handler);\n   *\n   * @example\n   * // Remove all listeners for a particular event\n   * record.off('change');\n   *\n   * @example\n   * // Remove all listeners to all events\n   * store.off();\n   *\n   * @method Component#off\n   * @param {string} [event] Name of event to unsubscribe to.\n   * @param {Function} [listener] Listener to remove.\n   * @since 3.0.0\n   */\n  off: (event: string, listener?: Function, thisArg?) => void;\n\n  /**\n   * Trigger an event on this Component.\n   *\n   * @example <caption>Component#emit</caption>\n   * // import { Collection, DataStore } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Collection, DataStore } = JSData;\n   *\n   * const collection = new Collection();\n   * collection.on('foo', function (msg) {\n   *   console.log(msg);\n   * });\n   * collection.emit('foo', 'bar');\n   *\n   * const store = new DataStore();\n   * store.on('beep', function (msg) {\n   *   console.log(msg);\n   * });\n   * store.emit('beep', 'boop');\n   *\n   * @method Component#emit\n   * @param {string} event Name of event to emit.\n   * @param {...*} [args] Arguments to pass to any listeners.\n   * @since 3.0.0\n   */\n  emit: (event: string, ...args) => void;\n\n  constructor (opts: ComponentOpts | any = {}) {\n    super()\n    this.debug = opts.debug ?? false\n  }\n}\n\nutils.logify(Component.prototype)\n\nutils.eventify(\n  Component.prototype,\n  function () {\n    return this._listeners\n  },\n  function (value) {\n    this._listeners = value\n  }\n)\n","import utils from './utils'\nimport Component from './Component'\n\nconst DOMAIN = 'Query'\nconst INDEX_ERR = 'Index inaccessible after first operation'\n\n// Reserved words used by JSData's Query Syntax\nconst reserved = {\n  limit: '',\n  offset: '',\n  orderBy: '',\n  skip: '',\n  sort: '',\n  where: '',\n  locale: ''\n}\n\n// Used by our JavaScript implementation of the LIKE operator\nconst escapeRegExp = /([.*+?^=!:${}()|[\\]/\\\\])/g\nconst percentRegExp = /%/g\nconst underscoreRegExp = /_/g\n\nfunction escape (pattern) {\n  return pattern.replace(escapeRegExp, '\\\\$1')\n}\n\nexport interface QueryDefinition {\n  [attr: string]: any\n  where?: any\n  orderBy?: any\n  sort?: any\n  skip?: number\n  limit?: number\n  offset?: number\n}\n\n/**\n * A class used by the {@link Collection} class to build queries to be executed\n * against the collection's data. An instance of `Query` is returned by\n * {@link Collection#query}. Query instances are typically short-lived, and you\n * shouldn't have to create them yourself. Just use {@link Collection#query}.\n *\n * ```javascript\n * import { Query } from 'js-data';\n * ```\n *\n * @example <caption>Query intro</caption>\n * const JSData = require('js-data');\n * const { DataStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new DataStore();\n * store.defineMapper('post');\n * const posts = [\n *   { author: 'John', age: 30, status: 'published', id: 1 },\n *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n * ]\n * store.add('post', posts);\n * const drafts = store.query('post').filter({ status: 'draft' }).limit(2).run();\n * console.log(drafts);\n *\n * @class Query\n * @extends Component\n * @param {Collection} collection The collection on which this query operates.\n * @since 3.0.0\n */\nexport default class Query extends Component {\n  /**\n   * The current data result of this query.\n   *\n   * @name Query#data\n   * @since 3.0.0\n   * @type {Array}\n   */\n  private data = null;\n\n  constructor (public collection?) {\n    super()\n  }\n\n  _applyWhereFromObject (where) {\n    const fields = []\n    const ops = []\n    const predicates = []\n    utils.forOwn(where, (clause, field) => {\n      if (!utils.isObject(clause)) {\n        clause = {\n          '==': clause\n        }\n      }\n      utils.forOwn(clause, (expr, op) => {\n        fields.push(field)\n        ops.push(op)\n        predicates.push(expr)\n      })\n    })\n    return {\n      fields,\n      ops,\n      predicates\n    }\n  }\n\n  _applyWhereFromArray (where) {\n    const groups: any = []\n    where.forEach((_where, i) => {\n      if (utils.isString(_where)) {\n        return\n      }\n      const prev = where[i - 1]\n      const parser = utils.isArray(_where) ? this._applyWhereFromArray : this._applyWhereFromObject\n      const group = parser.call(this, _where)\n      if (prev === 'or') {\n        group.isOr = true\n      }\n      groups.push(group)\n    })\n    groups.isArray = true\n    return groups\n  }\n\n  _testObjectGroup (keep, first, group, item) {\n    let i\n    const fields = group.fields\n    const ops = group.ops\n    const predicates = group.predicates\n    const len = ops.length\n    for (i = 0; i < len; i++) {\n      let op = ops[i]\n      const isOr = op.charAt(0) === '|'\n      op = isOr ? op.substr(1) : op\n      const expr = this.evaluate(utils.get(item, fields[i]), op, predicates[i])\n      if (expr !== undefined) {\n        keep = first ? expr : isOr ? keep || expr : keep && expr\n      }\n      first = false\n    }\n    return { keep, first }\n  }\n\n  _testArrayGroup (keep, first, groups, item) {\n    let i\n    const len = groups.length\n    for (i = 0; i < len; i++) {\n      const group = groups[i]\n      const parser = group.isArray ? this._testArrayGroup : this._testObjectGroup\n      const result = parser.call(this, true, true, group, item)\n      if (groups[i - 1]) {\n        if (group.isOr) {\n          keep = keep || result.keep\n        } else {\n          keep = keep && result.keep\n        }\n      } else {\n        keep = result.keep\n      }\n      first = result.first\n    }\n    return { keep, first }\n  }\n\n  /**\n   * Find all entities between two boundaries.\n   *\n   * @example <caption>Get the users ages 18 to 30.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between(18, 30, { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @example <caption>Same as above.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users)\n   * const filteredUsers = store\n   *   .query('user')\n   *   .between([18], [30], { index: 'age' })\n   *   .run();\n   * console.log(filteredUsers);\n   *\n   * @method Query#between\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include entities\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  between (leftKeys?, rightKeys?, opts: any = {}) {\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#between`)(500, 'Cannot access index')\n    }\n    this.data = this.collection.getIndex(opts.index).between(leftKeys, rightKeys, opts)\n    return this\n  }\n\n  /**\n   * The comparison function used by the {@link Query} class.\n   *\n   * @method Query#compare\n   * @param {array} orderBy An orderBy clause used for sorting and sub-sorting.\n   * @param {number} index The index of the current orderBy clause being used.\n   * @param {*} a The first item in the comparison.\n   * @param {*} b The second item in the comparison.\n   * @returns {number} -1 if `b` should preceed `a`. 0 if `a` and `b` are equal.\n   * 1 if `a` should preceed `b`.\n   * @since 3.0.0\n   */\n  compare (orderBy, index, a, b, compare) {\n    const def = orderBy[index]\n    let cA = utils.get(a, def[0])\n    let cB = utils.get(b, def[0])\n    if (cA && utils.isString(cA)) {\n      cA = cA.toUpperCase()\n    }\n    if (cB && utils.isString(cB)) {\n      cB = cB.toUpperCase()\n    }\n    if (a === undefined) {\n      a = null\n    }\n    if (b === undefined) {\n      b = null\n    }\n    if (def[1].toUpperCase() === 'DESC') {\n      const temp = cB\n      cB = cA\n      cA = temp\n    }\n    /* Fix: compare by using collator */\n    // let isNumeric = false\n    // if (utils.isNumber(cA) || utils.isNumber(cB)) {\n    //   isNumeric = true\n    // }\n    const n = compare(cA, cB)\n    if (n === -1 || n === 1) {\n      return n\n    } else {\n      if (index < orderBy.length - 1) {\n        return this.compare(orderBy, index + 1, a, b, compare)\n      } else {\n        return 0\n      }\n    }\n  }\n\n  /**\n   * Predicate evaluation function used by the {@link Query} class.\n   *\n   * @method Query#evaluate\n   * @param {*} value The value to evaluate.\n   * @param {string} op The operator to use in this evaluation.\n   * @param {*} predicate The predicate to use in this evaluation.\n   * @returns {boolean} Whether the value passed the evaluation or not.\n   * @since 3.0.0\n   */\n  evaluate (value, op, predicate) {\n    const ops = Query.ops\n    if (ops[op]) {\n      return ops[op](value, predicate)\n    }\n    if (op.indexOf('like') === 0) {\n      return this.like(predicate, op.substr(4)).exec(value) !== null\n    } else if (op.indexOf('notLike') === 0) {\n      return this.like(predicate, op.substr(7)).exec(value) === null\n    }\n  }\n\n  /**\n   * Find the record or records that match the provided query or are accepted by\n   * the provided filter function.\n   *\n   * @example <caption>Get the draft posts by authors younger than 30</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n   *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n   *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n   *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n   *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n   * ];\n   * store.add('post', posts);\n   * const results = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'draft'\n   *       },\n   *       age: {\n   *         '<': 30\n   *       }\n   *     }\n   *   })\n   *   .run();\n   * console.log(results);\n   *\n   * @example <caption>Use a custom filter function</caption>\n   * const posts = query\n   *   .filter(function (post) {\n   *     return post.isReady();\n   *   })\n   *   .run();\n   *\n   * @method Query#filter\n   * @param {(Object|Function)} [query={}] Selection query or filter\n   * function.\n   * @param {Function} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  filter (query: QueryDefinition = {}, thisArg?: Function): Query {\n    /**\n     * Selection query as defined by JSData's [Query Syntax][querysyntax].\n     *\n     * [querysyntax]: http://www.js-data.io/v3.0/docs/query-syntax\n     *\n     * @example <caption>Empty \"findAll\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post')\n     * store.findAll('post').then((posts) => {\n     *   console.log(posts); // [...]\n     * });\n     *\n     * @example <caption>Empty \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * store.defineMapper('post');\n     * const posts = store.filter('post');\n     * console.log(posts); // [...]\n     *\n     * @example <caption>Complex \"filter\" query</caption>\n     * const JSData = require('js-data');\n     * const { DataStore } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new DataStore();\n     * const PAGE_SIZE = 2;\n     * let currentPage = 3;\n     *\n     * store.defineMapper('post');\n     * const posts = [\n     *   { author: 'John', age: 30, status: 'published', id: 1 },\n     *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n     *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n     *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n     *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n     *   { author: 'Peter', age: 25, status: 'deleted', id: 6 },\n     *   { author: 'Sally', age: 21, status: 'draft', id: 7 },\n     *   { author: 'Jim', age: 27, status: 'draft', id: 8 },\n     *   { author: 'Jim', age: 27, status: 'published', id: 9 },\n     *   { author: 'Jason', age: 55, status: 'published', id: 10 }\n     * ];\n     * store.add('post', posts);\n     * // Retrieve a filtered page of blog posts\n     * // Would typically replace filter with findAll\n     * const results = store.filter('post', {\n     *   where: {\n     *     status: {\n     *       // WHERE status = 'published'\n     *       '==': 'published'\n     *     },\n     *     author: {\n     *       // AND author IN ('bob', 'alice')\n     *       'in': ['bob', 'alice'],\n     *       // OR author IN ('karen')\n     *       '|in': ['karen']\n     *     }\n     *   },\n     *   orderBy: [\n     *     // ORDER BY date_published DESC,\n     *     ['date_published', 'DESC'],\n     *     // ORDER BY title ASC\n     *     ['title', 'ASC']\n     *   ],\n     *   // LIMIT 2\n     *   limit: PAGE_SIZE,\n     *   // SKIP 4\n     *   offset: PAGE_SIZE * (currentPage - 1)\n     * });\n     * console.log(results);\n     *\n     * @namespace query\n     * @property {number} [limit] See {@link query.limit}.\n     * @property {number} [offset] See {@link query.offset}.\n     * @property {string|Array[]} [orderBy] See {@link query.orderBy}.\n     * @property {number} [skip] Alias for {@link query.offset}.\n     * @property {string|Array[]} [sort] Alias for {@link query.orderBy}.\n     * @property {Object} [where] See {@link query.where}.\n     * @property {String} [locale] See {@link query.locale}.\n     * @since 3.0.0\n     * @tutorial [\"http://www.js-data.io/v3.0/docs/query-syntax\",\"JSData's Query Syntax\"]\n     */\n    this.getData()\n    if (utils.isObject(query)) {\n      let where = {}\n\n      /**\n       * Filtering criteria. Records that do not meet this criteria will be exluded\n       * from the result.\n       *\n       * @example <caption>Return posts where author is at least 32 years old</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   where: {\n       *     age: {\n       *       '>=': 30\n       *     }\n       *   }\n       * });\n       * console.log(results);\n       *\n       * @name query.where\n       * @type {Object}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isObject(query.where) || utils.isArray(query.where)) {\n        where = query.where\n      }\n      utils.forOwn(query, (value, key) => {\n        if (!(key in reserved) && !(key in where)) {\n          where[key] = {\n            '==': value\n          }\n        }\n      })\n      let groups\n\n      // Apply filter for each field\n      if (utils.isObject(where) && Object.keys(where).length !== 0) {\n        groups = this._applyWhereFromArray([where])\n      } else if (utils.isArray(where)) {\n        groups = this._applyWhereFromArray(where)\n      }\n\n      if (groups) {\n        this.data = this.data.filter(item => this._testArrayGroup(true, true, groups, item).keep)\n      }\n\n      // Sort\n      let orderBy = query.orderBy || query.sort\n\n      if (utils.isString(orderBy)) {\n        orderBy = [[orderBy, 'ASC']]\n      }\n      if (!utils.isArray(orderBy)) {\n        orderBy = null\n      }\n\n      /**\n       * Determines how records should be ordered in the result.\n       *\n       * @example <caption>Order posts by `author` then by `id` descending </caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 5 },\n       *   { author: 'Sally', age: 31, id: 6 },\n       *   { author: 'Mike', age: 32, id: 7 },\n       *   { author: 'Adam', age: 33, id: 8 },\n       *   { author: 'Adam', age: 33, id: 9 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *     orderBy:[['author','ASC'],['id','DESC']]\n       * });\n       * console.log(results);\n       *\n       * @name query.orderBy\n       * @type {string|Array[]}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (orderBy) {\n        const index = 0\n        orderBy.forEach((def, i) => {\n          if (utils.isString(def)) {\n            orderBy[i] = [def, 'ASC']\n          }\n        })\n        let locale: string = utils.getDefaultLocale()\n        if (utils.isString(query.locale)) {\n          locale = query.locale\n        }\n        /** The locale params has to be explicitly set for the collator.compare to work.\n        *\n        * @example <caption>Order posts with specific locale, defaults to 'en'</caption>\n        * const JSData = require('js-data');\n        * const { DataStore } = JSData;\n        * console.log('Using JSData v' + JSData.version.full);\n        *\n        * const store = new DataStore();\n        * store.defineMapper('post')\n        * const posts = [\n        *   { author: 'คลอน', age: 30, id: 5 },\n        *   { author: 'กลอน', age: 31, id: 6 },\n        *   { author: 'สาระ', age: 32, id: 7 },\n        *   { author: 'ศาลา', age: 33, id: 8 },\n        *   { author: 'จักรพรรณ', age: 33, id: 9 }\n        * ];\n        * store.add('post', posts);\n        * const results = store.filter('post', {\n        *     orderBy:[['author','ASC'],['id','DESC']],\n        *     locale: 'th'\n        * });\n        * console.log(results);\n        *\n        * @name query.locale\n        * @type {string}\n        * @see http://www.js-data.io/v4.0/docs/query-syntax\n        * @since 4.0.0\n        */\n        const collator = new Intl.Collator(locale, {\n          numeric: true\n        })\n\n        this.data.sort((a, b) => this.compare(orderBy, index, a, b, collator.compare))\n      }\n\n      /**\n       * Number of records to skip.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       * const PAGE_SIZE = 10;\n       * let currentPage = 1;\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5;\n       * let currentPage = 2;\n       * store.defineMapper('post');\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.offset\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.skip)) {\n        this.skip(query.skip)\n      } else if (utils.isNumber(query.offset)) {\n        this.skip(query.offset)\n      }\n\n      /**\n       * Maximum number of records to retrieve.\n       *\n       * @example <caption>Retrieve the first \"page\" of blog posts using findAll</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       * store.defineMapper('post');\n       *\n       * const PAGE_SIZE = 10\n       * let currentPage = 1\n       * store.findAll('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       *\n       * @example <caption>Retrieve the last \"page\" of blog posts using filter</caption>\n       * const JSData = require('js-data');\n       * const { DataStore } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * const store = new DataStore();\n       *\n       * const PAGE_SIZE = 5\n       * let currentPage = 2\n       * store.defineMapper('post')\n       * const posts = [\n       *   { author: 'John', age: 30, id: 1 },\n       *   { author: 'Sally', age: 31, id: 2 },\n       *   { author: 'Mike', age: 32, id: 3 },\n       *   { author: 'Adam', age: 33, id: 4 },\n       *   { author: 'Adam', age: 33, id: 5 },\n       *   { author: 'Peter', age: 25, id: 6 },\n       *   { author: 'Sally', age: 21, id: 7 },\n       *   { author: 'Jim', age: 27, id: 8 },\n       *   { author: 'Jim', age: 27, id: 9 },\n       *   { author: 'Jason', age: 55, id: 10 }\n       * ];\n       * store.add('post', posts);\n       * const results = store.filter('post', {\n       *   offset: PAGE_SIZE * (currentPage 1)\n       *   limit: PAGE_SIZE\n       * });\n       * console.log(results)\n       *\n       * @name query.limit\n       * @type {number}\n       * @see http://www.js-data.io/v3.0/docs/query-syntax\n       * @since 3.0.0\n       */\n      if (utils.isNumber(query.limit)) {\n        this.limit(query.limit)\n      }\n    } else if (utils.isFunction(query)) {\n      this.data = this.data.filter(query, thisArg)\n    }\n    return this\n  }\n\n  /**\n   * Iterate over all entities.\n   *\n   * @method Query#forEach\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  forEach (forEachFn: Function, thisArg?) {\n    this.getData().forEach(forEachFn, thisArg)\n    return this\n  }\n\n  /**\n   * Find the entity or entities that match the provided key.\n   *\n   * @example <caption>Get the entity whose primary key is 25.</caption>\n   * const entities = query.get(25).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const entities = query.get([25]).run();\n   *\n   * @example <caption>Get all users who are active and have the \"admin\" role.</caption>\n   * const activeAdmins = query.get(['active', 'admin'], {\n   *   index: 'activityAndRoles'\n   * }).run();\n   *\n   * @example <caption>Get all entities that match a certain weather condition.</caption>\n   * const niceDays = query.get(['sunny', 'humid', 'calm'], {\n   *   index: 'weatherConditions'\n   * }).run();\n   *\n   * @method Query#get\n   * @param {array} keyList Key(s) defining the entity to retrieve. If\n   * `keyList` is not an array (i.e. for a single-value key), it will be\n   * wrapped in an array.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.string] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  get (keyList = [], opts: any = {}) {\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#get`)(500, INDEX_ERR)\n    }\n    if (keyList && !utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n    if (!keyList.length) {\n      this.getData()\n      return this\n    }\n    this.data = this.collection.getIndex(opts.index).get(keyList)\n    return this\n  }\n\n  /**\n   * Find the entity or entities that match the provided keyLists.\n   *\n   * @example <caption>Get the posts where \"status\" is \"draft\" or \"inReview\".</caption>\n   * const posts = query.getAll('draft', 'inReview', { index: 'status' }).run();\n   *\n   * @example <caption>Same as above.</caption>\n   * const posts = query.getAll(['draft'], ['inReview'], { index: 'status' }).run();\n   *\n   * @method Query#getAll\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * entities matching each keyList will be retrieved. If no keyLists are\n   * provided, all entities will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  getAll(keyList?: [], opts?);\n  getAll (...args) {\n    let opts: any = {}\n    if (this.data) {\n      throw utils.err(`${DOMAIN}#getAll`)(500, INDEX_ERR)\n    }\n    if (!args.length || (args.length === 1 && utils.isObject(args[0]))) {\n      this.getData()\n      return this\n    } else if (args.length && utils.isObject(args[args.length - 1])) {\n      opts = args[args.length - 1]\n      args.pop()\n    }\n    const index = this.collection.getIndex(opts.index)\n    this.data = []\n    args.forEach(keyList => {\n      this.data = this.data.concat(index.get(keyList))\n    })\n    return this\n  }\n\n  /**\n   * Return the current data result of this query.\n   *\n   * @method Query#getData\n   * @returns {Array} The data in this query.\n   * @since 3.0.0\n   */\n  getData () {\n    if (!this.data) {\n      this.data = this.collection.index.getAll()\n    }\n    return this.data\n  }\n\n  /**\n   * Implementation used by the `like` operator. Takes a pattern and flags and\n   * returns a `RegExp` instance that can test strings.\n   *\n   * @method Query#like\n   * @param {string} pattern Testing pattern.\n   * @param {string} flags Flags for the regular expression.\n   * @returns {RegExp} Regular expression for testing strings.\n   * @since 3.0.0\n   */\n  like (pattern, flags) {\n    return new RegExp(\n      `^${escape(pattern)\n        .replace(percentRegExp, '.*')\n        .replace(underscoreRegExp, '.')}$`,\n      flags\n    )\n  }\n\n  /**\n   * Limit the result.\n   *\n   * @example <caption>Get only the first 2 posts.</caption>\n   * const store = new JSData.DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').limit(2).run();\n   * console.log(results);\n   *\n   * @method Query#limit\n   * @param {number} num The maximum number of entities to keep in the result.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  limit (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#limit`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    this.data = data.slice(0, Math.min(data.length, num))\n    return this\n  }\n\n  /**\n   * Apply a mapping function to the result data.\n   *\n   * @example\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('user');\n   * const users = [\n   *   { name: 'Peter', age: 25, id: 1 },\n   *   { name: 'Jim', age: 19, id: 2 },\n   *   { name: 'Mike', age: 17, id: 3 },\n   *   { name: 'Alan', age: 29, id: 4 },\n   *   { name: 'Katie', age: 33, id: 5 }\n   * ];\n   * store.add('user', users);\n   * const ages = store\n   *   .query('user')\n   *   .map(function (user) {\n   *     return user.age;\n   *   })\n   *   .run();\n   * console.log(ages);\n   *\n   * @method Query#map\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  map (mapFn, thisArg?) {\n    this.data = this.getData().map(mapFn, thisArg)\n    return this\n  }\n\n  /**\n   * Return the result of calling the specified function on each item in this\n   * collection's main index.\n   *\n   * @example\n   * const stringAges = UserCollection.query().mapCall('toString').run();\n   *\n   * @method Query#mapCall\n   * @param {string} funcName Name of function to call\n   * @param args Remaining arguments to be passed to the function.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  mapCall (funcName, ...args) {\n    this.data = this.getData().map(item => item[funcName](...args))\n    return this\n  }\n\n  /**\n   * Complete the execution of the query and return the resulting data.\n   *\n   * @method Query#run\n   * @returns {Array} The result of executing this query.\n   * @since 3.0.0\n   */\n  run () {\n    const data = this.data\n    this.data = null\n    return data\n  }\n\n  /**\n   * Skip a number of results.\n   *\n   * @example <caption>Get all but the first 2 posts.</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'draft', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'draft', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'draft', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const results = store.query('post').skip(2).run();\n   * console.log(results);\n   *\n   * @method Query#skip\n   * @param {number} num The number of entities to skip.\n   * @returns {Query} A reference to itself for chaining.\n   * @since 3.0.0\n   */\n  skip (num) {\n    if (!utils.isNumber(num)) {\n      throw utils.err(`${DOMAIN}#skip`, 'num')(400, 'number', num)\n    }\n    const data = this.getData()\n    if (num < data.length) {\n      this.data = data.slice(num)\n    } else {\n      this.data = []\n    }\n    return this\n  }\n\n  /**\n   * The filtering operators supported by {@link Query#filter}, and which are\n   * implemented by adapters (for the most part).\n   *\n   * @example <caption>Variant 1</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   status: 'published',\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   *\n   * @example <caption>Variant 2</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post')\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     }\n   *   },\n   *   limit: 2\n   * });\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 3</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({ status: 'published' })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Variant 4</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   * const publishedPosts = store\n   *   .query('post')\n   *   .filter({\n   *     where: {\n   *       status: {\n   *         '==': 'published'\n   *       }\n   *     }\n   *   })\n   *   .limit(2)\n   *   .run();\n   * console.log(publishedPosts);\n   *\n   * @example <caption>Multiple operators</caption>\n   * const JSData = require('js-data');\n   * const { DataStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new DataStore();\n   * store.defineMapper('post');\n   * const posts = [\n   *   { author: 'John', age: 30, status: 'published', id: 1 },\n   *   { author: 'Sally', age: 31, status: 'published', id: 2 },\n   *   { author: 'Mike', age: 32, status: 'published', id: 3 },\n   *   { author: 'Adam', age: 33, status: 'deleted', id: 4 },\n   *   { author: 'Adam', age: 33, status: 'published', id: 5 }\n   * ];\n   * store.add('post', posts);\n   *\n   * const myPublishedPosts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'published'\n   *     },\n   *     user_id: {\n   *       '==': currentUser.id\n   *     }\n   *   }\n   * });\n   *\n   * console.log(myPublishedPosts);\n   *\n   * @name Query.ops\n   * @property {Function} == Equality operator.\n   * @property {Function} != Inequality operator.\n   * @property {Function} > Greater than operator.\n   * @property {Function} >= Greater than (inclusive) operator.\n   * @property {Function} < Less than operator.\n   * @property {Function} <= Less than (inclusive) operator.\n   * @property {Function} isectEmpty Operator that asserts that the intersection\n   * between two arrays is empty.\n   * @property {Function} isectNotEmpty Operator that asserts that the\n   * intersection between two arrays is __not__ empty.\n   * @property {Function} in Operator that asserts whether a value is in an\n   * array.\n   * @property {Function} notIn Operator that asserts whether a value is __not__\n   * in an array.\n   * @property {Function} contains Operator that asserts whether an array\n   * contains a value.\n   * @property {Function} notContains Operator that asserts whether an array\n   * does __not__ contain a value.\n   * @since 3.0.0\n   * @type {Object}\n   */\n  static ops = {\n    '=' (value, predicate) {\n      // tslint:disable-next-line:triple-equals\n      return value == predicate; // eslint-disable-line\n    },\n    '==' (value, predicate) {\n      // tslint:disable-next-line:triple-equals\n      return value == predicate; // eslint-disable-line\n    },\n    '===' (value, predicate) {\n      return value === predicate\n    },\n    '!=' (value, predicate) {\n      // tslint:disable-next-line:triple-equals\n      return value != predicate; // eslint-disable-line\n    },\n    '!==' (value, predicate) {\n      return value !== predicate\n    },\n    '>' (value, predicate) {\n      return value > predicate\n    },\n    '>=' (value, predicate) {\n      return value >= predicate\n    },\n    '<' (value, predicate) {\n      return value < predicate\n    },\n    '<=' (value, predicate) {\n      return value <= predicate\n    },\n    isectEmpty (value, predicate) {\n      return !utils.intersection(value || [], predicate || []).length\n    },\n    isectNotEmpty (value, predicate) {\n      return utils.intersection(value || [], predicate || []).length\n    },\n    in (value, predicate) {\n      return predicate.indexOf(value) !== -1\n    },\n    notIn (value, predicate) {\n      return predicate.indexOf(value) === -1\n    },\n    contains (value, predicate) {\n      return (value || []).indexOf(predicate) !== -1\n    },\n    notContains (value, predicate) {\n      return (value || []).indexOf(predicate) === -1\n    }\n  };\n}\n","import utils from './utils'\n\n// TODO: remove this when the rest of the project is cleaned\nexport const belongsToType = 'belongsTo'\nexport const hasManyType = 'hasMany'\nexport const hasOneType = 'hasOne'\n\nconst DOMAIN = 'Relation'\n\nexport interface RelationOpts {\n  type?: string\n}\n\nexport abstract class Relation {\n  protected TYPE_NAME = DOMAIN;\n  protected add;\n  protected mapper;\n  protected relation;\n  name: string;\n  private readonly localField;\n  private readonly localKey;\n  protected foreignKey;\n  protected relatedMapper;\n  protected inverse;\n\n  constructor (relatedMapper, options: RelationOpts = {}) {\n    options.type = (this.constructor as any).TYPE_NAME\n    this.validateOptions(relatedMapper, options)\n\n    if (typeof relatedMapper === 'object') {\n      this.relatedMapper = relatedMapper\n    }\n\n    utils.fillIn(this, options)\n  }\n\n  get canAutoAddLinks () {\n    return this.add === undefined || !!this.add\n  }\n\n  get relatedCollection () {\n    return this.mapper.datastore.getCollection(this.relation)\n  }\n\n  validateOptions (related, opts) {\n    const DOMAIN_ERR = `new ${DOMAIN}`\n\n    const localField = opts.localField\n    if (!localField) {\n      throw utils.err(DOMAIN_ERR, 'opts.localField')(400, 'string', localField)\n    }\n\n    const foreignKey = (opts.foreignKey = opts.foreignKey || opts.localKey)\n    if (!foreignKey && (opts.type === belongsToType || opts.type === hasOneType)) {\n      throw utils.err(DOMAIN_ERR, 'opts.foreignKey')(400, 'string', foreignKey)\n    }\n\n    if (utils.isString(related)) {\n      opts.relation = related\n      if (!utils.isFunction(opts.getRelation)) {\n        throw utils.err(DOMAIN_ERR, 'opts.getRelation')(400, 'function', opts.getRelation)\n      }\n    } else if (related) {\n      opts.relation = related.name\n    } else {\n      throw utils.err(DOMAIN_ERR, 'related')(400, 'Mapper or string', related)\n    }\n  }\n\n  assignTo (mapper) {\n    this.name = mapper.name\n    Object.defineProperty(this, 'mapper', { value: mapper })\n\n    if (!mapper.relationList) Object.defineProperty(mapper, 'relationList', { value: [] })\n    if (!mapper.relationFields) Object.defineProperty(mapper, 'relationFields', { value: [] })\n    mapper.relationList.push(this)\n    mapper.relationFields.push(this.localField)\n  }\n\n  canFindLinkFor (record?) {\n    return !!(this.foreignKey || this.localKey)\n  }\n\n  getRelation () {\n    return this.relatedMapper\n  }\n\n  getForeignKey (record) {\n    return utils.get(record, this.mapper.idAttribute)\n  }\n\n  setForeignKey (record, relatedRecord) {\n    if (!record || !relatedRecord) {\n      return\n    }\n\n    this._setForeignKey(record, relatedRecord)\n  }\n\n  _setForeignKey (record, relatedRecords) {\n    const idAttribute = this.mapper.idAttribute\n\n    if (!utils.isArray(relatedRecords)) {\n      relatedRecords = [relatedRecords]\n    }\n\n    relatedRecords.forEach(relatedRecord => {\n      utils.set(relatedRecord, this.foreignKey, utils.get(record, idAttribute))\n    })\n  }\n\n  getLocalField (record) {\n    return utils.get(record, this.localField)\n  }\n\n  setLocalField (record, relatedData) {\n    return utils.set(record, this.localField, relatedData)\n  }\n\n  getInverse (mapper) {\n    if (!this.inverse) {\n      this.findInverseRelation(mapper)\n    }\n\n    return this.inverse\n  }\n\n  findInverseRelation (mapper) {\n    this.getRelation().relationList.forEach(def => {\n      if (def.getRelation() === mapper && this.isInversedTo(def) && this !== def) {\n        this.inverse = def\n        return true\n      }\n    })\n  }\n\n  isInversedTo (def) {\n    return !def.foreignKey || def.foreignKey === this.foreignKey\n  }\n\n  addLinkedRecords (records) {\n    const datastore = this.mapper.datastore\n\n    records.forEach(record => {\n      let relatedData = this.getLocalField(record)\n\n      if (utils.isFunction(this.add)) {\n        relatedData = this.add(datastore, this, record)\n      } else if (relatedData) {\n        relatedData = this.linkRecord(record, relatedData)\n      }\n\n      const isEmptyLinks = !relatedData || (utils.isArray(relatedData) && !relatedData.length)\n\n      if (isEmptyLinks && this.canFindLinkFor(record)) {\n        relatedData = this.findExistingLinksFor(record)\n      }\n\n      if (relatedData) {\n        this.setLocalField(record, relatedData)\n      }\n    })\n  }\n\n  removeLinkedRecords (relatedMapper, records) {\n    const localField = this.localField\n    records.forEach(record => {\n      utils.set(record, localField, undefined)\n    })\n  }\n\n  linkRecord (record, relatedRecord) {\n    const relatedId = utils.get(relatedRecord, this.mapper.idAttribute)\n\n    if (relatedId === undefined) {\n      const unsaved = this.relatedCollection.unsaved()\n      if (unsaved.indexOf(relatedRecord) === -1) {\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    } else {\n      if (relatedRecord !== this.relatedCollection.get(relatedId)) {\n        this.setForeignKey(record, relatedRecord)\n\n        if (this.canAutoAddLinks) {\n          relatedRecord = this.relatedCollection.add(relatedRecord)\n        }\n      }\n    }\n\n    return relatedRecord\n  }\n\n  // e.g. user hasMany post via \"foreignKey\", so find all posts of user\n  findExistingLinksByForeignKey (id) {\n    if (id === undefined || id === null) {\n      return\n    }\n    return this.relatedCollection.filter({\n      [this.foreignKey]: id\n    })\n  }\n\n  ensureLinkedDataHasProperType (props, opts) {\n    const relatedMapper = this.getRelation()\n    const relationData = this.getLocalField(props)\n\n    if (utils.isArray(relationData) && (!relationData.length || relatedMapper.is(relationData[0]))) {\n      return\n    }\n\n    if (relationData && !relatedMapper.is(relationData)) {\n      utils.set(props, this.localField, relatedMapper.createRecord(relationData, opts))\n    }\n  }\n\n  isRequiresParentId () {\n    return false\n  }\n\n  isRequiresChildId () {\n    return false\n  }\n\n  createChildRecord (props, relationData, opts) {\n    this.setForeignKey(props, relationData)\n\n    return this.createLinked(relationData, opts).then(result => {\n      this.setLocalField(props, result)\n    })\n  }\n\n  createLinked (props, opts) {\n    const create = utils.isArray(props) ? 'createMany' : 'create'\n\n    return this.getRelation()[create](props, opts)\n  }\n\n  abstract findExistingLinksFor(relatedMapper, record);\n  abstract findExistingLinksFor(...record);\n\n  static belongsTo;\n  static hasMany;\n  static hasOne;\n}\n","import utils, { safeSetLink } from './utils'\nimport Settable from './Settable'\nimport { hasManyType, hasOneType } from './Relation'\nimport Mapper from './Mapper'\n\nconst DOMAIN = 'Record'\n\nfunction superMethod (mapper, name) {\n  const store = mapper.datastore\n  if (store?.[name]) {\n    return (...args) => store[name](mapper.name, ...args)\n  }\n  return mapper[name].bind(mapper)\n}\n\n// Cache these strings\nconst creatingPath = 'creating'\nconst noValidatePath = 'noValidate'\nconst keepChangeHistoryPath = 'keepChangeHistory'\nconst previousPath = 'previous'\n\n/**\n * js-data's Record class. An instance of `Record` corresponds to an in-memory\n * representation of a single row or document in a database, Firebase,\n * localstorage, etc. Basically, a `Record` instance represents whatever kind of\n * entity in your persistence layer that has a primary key.\n *\n * ```javascript\n * import {Record} from 'js-data'\n * ```\n *\n * @example <caption>Record#constructor</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a plain record\n * let record = new Record();\n * console.log('record: ' + JSON.stringify(record));\n *\n * // You can supply properties on instantiation\n * record = new Record({ name: 'John' });\n * console.log('record: ' + JSON.stringify(record));\n *\n * @example <caption>Record#constructor2</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Instantiate a record that's associated with a Mapper:\n * const UserMapper = new Mapper({ name: 'user' });\n * const User = UserMapper.recordClass;\n * const user = UserMapper.createRecord({ name: 'John' });\n * const user2 = new User({ name: 'Sally' });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user2: ' + JSON.stringify(user2));\n *\n * @example <caption>Record#constructor3</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user');\n *\n * // Instantiate a record that's associated with a store's Mapper\n * const user = store.createRecord('user', { name: 'John' });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor4</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Validate on instantiation\n * const user = store.createRecord('user', { name: 1234 });\n * console.log('user: ' + JSON.stringify(user));\n *\n * @example <caption>Record#constructor5</caption>\n * const JSData = require('js-data');\n * const { Container } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: {\n *     properties: {\n *       name: { type: 'string' }\n *     }\n *   }\n * });\n *\n * // Skip validation on instantiation\n * const user = store.createRecord('user', { name: 1234 }, { noValidate: true });\n * console.log('user: ' + JSON.stringify(user));\n * console.log('user.isValid(): ' + user.isValid());\n *\n * @class Record\n * @extends Settable\n * @param {object} [props] The initial properties of the new Record instance.\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.noValidate=false] Whether to skip validation on the\n * initial properties.\n * @param {boolean} [opts.validateOnSet=true] Whether to enable setter\n * validation on properties after the Record has been initialized.\n * @since 3.0.0\n */\nexport default class Record extends Settable {\n  static mapper: Mapper;\n\n  constructor (props: any = {}, opts: any = {}) {\n    super()\n    const _set = this._set\n    const mapper = (this.constructor as any).mapper\n\n    _set(creatingPath, true)\n    _set(noValidatePath, !!opts.noValidate)\n    _set(\n      keepChangeHistoryPath,\n      opts.keepChangeHistory === undefined ? (mapper ? mapper.keepChangeHistory : true) : opts.keepChangeHistory\n    )\n\n    // Set the idAttribute value first, if it exists.\n    const id = mapper ? utils.get(props, mapper.idAttribute) : undefined\n    if (id !== undefined) {\n      utils.set(this, mapper.idAttribute, id)\n    }\n\n    utils.fillIn(this, props)\n    _set(creatingPath, false)\n    if (opts.validateOnSet !== undefined) {\n      _set(noValidatePath, !opts.validateOnSet)\n    } else if (mapper?.validateOnSet !== undefined) {\n      _set(noValidatePath, !mapper.validateOnSet)\n    } else {\n      _set(noValidatePath, false)\n    }\n    _set(previousPath, mapper ? mapper.toJSON(props) : utils.plainCopy(props))\n  }\n\n  /**\n   * Returns the {@link Mapper} paired with this record's class, if any.\n   *\n   * @method Record#_mapper\n   * @returns {Mapper} The {@link Mapper} paired with this record's class, if any.\n   * @since 3.0.0\n   */\n  _mapper () {\n    const mapper = (this.constructor as any).mapper\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#_mapper`, '')(404, 'mapper')\n    }\n    return mapper\n  }\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#afterLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  afterLoadRelations (relations: string[], opts?) {}\n\n  /**\n   * Lifecycle hook.\n   *\n   * @method Record#beforeLoadRelations\n   * @param {string[]} relations The `relations` argument passed to {@link Record#loadRelations}.\n   * @param {object} opts The `opts` argument passed to {@link Record#loadRelations}.\n   * @since 3.0.0\n   */\n  beforeLoadRelations (relations: string[], opts?) {}\n\n  /**\n   * Return the change history of this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @method Record#changeHistory\n   * @since 3.0.0\n   */\n  changeHistory () {\n    return (this._get('history') || []).slice()\n  }\n\n  /**\n   * Return changes to this record since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#changes</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   * user.name = 'John';\n   * console.log('user changes: ' + JSON.stringify(user.changes()));\n   *\n   * @method Record#changes\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {Object} Object describing the changes to this record since it was\n   * instantiated or its {@link Record#commit} method was last called.\n   * @since 3.0.0\n   */\n  changes (opts: any = {}) {\n    return utils.diffObjects(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n  }\n\n  /**\n   * Make the record's current in-memory state it's only state, with any\n   * previous property values being set to current values.\n   *\n   * @example <caption>Record#commit</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#commit\n   * @param {object} [opts] Configuration options. Passed to {@link Record#toJSON}.\n   * @since 3.0.0\n   */\n  commit (opts?) {\n    this._set('changed') // unset\n    this._set('changing', false)\n    this._set('history', []) // clear history\n    this._set('previous', this.toJSON(opts))\n  }\n\n  /**\n   * Call {@link Mapper#destroy} using this record's primary key.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user');\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Destroy this user from the database\n   *   return user.destroy();\n   * });\n   *\n   * @method Record#destroy\n   * @param {object} [opts] Configuration options passed to {@link Mapper#destroy}.\n   * @returns {Promise} The result of calling {@link Mapper#destroy} with the\n   * primary key of this record.\n   * @since 3.0.0\n   */\n  destroy (opts: any = {}) {\n    const mapper = this._mapper()\n    return superMethod(mapper, 'destroy')(utils.get(this, mapper.idAttribute), opts)\n  }\n\n  /**\n   * Return the value at the given path for this instance.\n   *\n   * @example <caption>Record#get</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', { name: 'Bob' });\n   * console.log('user.get(\"name\"): ' + user.get('name'));\n   *\n   * @method Record#get\n   * @param {string} key Path of value to retrieve.\n   * @returns {*} Value at path.\n   * @since 3.0.0\n   */\n  get (key) {\n    return utils.get(this, key)\n  }\n\n  /**\n   * Return whether this record has changed since it was instantiated or\n   * {@link Record#commit} was called.\n   *\n   * @example <caption>Record#hasChanges</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user');\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.name = 'John';\n   * console.log('user hasChanges: ' + user.hasChanges());\n   * user.commit();\n   * console.log('user hasChanges: ' + user.hasChanges());\n   *\n   * @method Record#hasChanges\n   * @param [opts] Configuration options.\n   * @param {Function} [opts.equalsFn={@link utils.deepEqual}] Equality function.\n   * @param {array} [opts.ignore=[]] Array of strings or RegExp of fields to ignore.\n   * @returns {boolean} Return whether the record has changed since it was\n   * instantiated or since its {@link Record#commit} method was called.\n   * @since 3.0.0\n   */\n  hasChanges (opts?) {\n    const quickHasChanges = !!(this._get('changed') || []).length\n    return (\n      quickHasChanges ||\n      utils.areDifferent(typeof this.toJSON === 'function' ? this.toJSON(opts) : this, this._get('previous'), opts)\n    )\n  }\n\n  /**\n   * Return whether the record is unsaved. Records that have primary keys are\n   * considered \"saved\". Records without primary keys are considered \"unsaved\".\n   *\n   * @example <caption>Record#isNew</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   id: 1234\n   * });\n   * const user2 = store.createRecord('user');\n   * console.log('user isNew: ' + user.isNew()); // false\n   * console.log('user2 isNew: ' + user2.isNew()); // true\n   *\n   * @method Record#isNew\n   * @returns {boolean} Whether the record is unsaved.\n   * @since 3.0.0\n   */\n  isNew (opts?) {\n    return utils.get(this, this._mapper().idAttribute) === undefined\n  }\n\n  /**\n   * Return whether the record in its current state passes validation.\n   *\n   * @example <caption>Record#isValid</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user isValid: ' + user.isValid());\n   * user.name = 'John';\n   * console.log('user isValid: ' + user.isValid());\n   *\n   * @method Record#isValid\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {boolean} Whether the record in its current state passes\n   * validation.\n   * @since 3.0.0\n   */\n  isValid (opts) {\n    return !this._mapper().validate(this, opts)\n  }\n\n  removeInverseRelation (currentParent, id, inverseDef, idAttribute) {\n    if (inverseDef.type === hasOneType) {\n      safeSetLink(currentParent, inverseDef.localField, undefined)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. remove comment from otherPost.comments\n      const children = utils.get(currentParent, inverseDef.localField)\n      if (id === undefined) {\n        utils.remove(children, child => child === this)\n      } else {\n        utils.remove(children, child => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  }\n\n  setupInverseRelation (record, id, inverseDef, idAttribute) {\n    // Update (set) inverse relation\n    if (inverseDef.type === hasOneType) {\n      // e.g. someUser.profile = profile\n      safeSetLink(record, inverseDef.localField, this)\n    } else if (inverseDef.type === hasManyType) {\n      // e.g. add comment to somePost.comments\n      const children = utils.get(record, inverseDef.localField)\n      if (id === undefined) {\n        utils.noDupeAdd(children, this, child => child === this)\n      } else {\n        utils.noDupeAdd(children, this, child => child === this || id === utils.get(child, idAttribute))\n      }\n    }\n  }\n\n  /**\n   * Lazy load relations of this record, to be attached to the record once their\n   * loaded.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('user', {\n   *   relations: {\n   *     hasMany: {\n   *       post: {\n   *         localField: 'posts',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.defineMapper('post', {\n   *   relations: {\n   *     belongsTo: {\n   *       user: {\n   *         localField: 'user',\n   *         foreignKey: 'user_id'\n   *       }\n   *     }\n   *   }\n   * });\n   * store.find('user', 1234).then((user) => {\n   *   console.log(user.id); // 1234\n   *\n   *   // Load the user's post relations\n   *   return user.loadRelations(['post']);\n   * }).then((user) => {\n   *   console.log(user.posts); // [{...}, {...}, ...]\n   * });\n   *\n   * @method Record#loadRelations\n   * @param {string[]} [relations] List of relations to load. Can use localField\n   * names or Mapper names to pick relations.\n   * @param {object} [opts] Configuration options.\n   * @returns {Promise} Resolves with the record, with the loaded relations now\n   * attached.\n   * @since 3.0.0\n   */\n  loadRelations (relations: string[] | string | any = [], opts: any = {}) {\n    let op\n    const mapper = this._mapper()\n\n    if (utils.isString(relations)) {\n      relations = [relations]\n    }\n    opts.with = relations\n\n    // Fill in \"opts\" with the Model's configuration\n    utils._(opts, mapper)\n    opts.adapter = mapper.getAdapterName(opts)\n\n    // beforeLoadRelations lifecycle hook\n    op = opts.op = 'beforeLoadRelations'\n    return utils\n      .resolve(this[op](relations, opts))\n      .then(() => {\n        // Now delegate to the adapter\n        op = opts.op = 'loadRelations'\n        mapper.dbg(op, this, relations, opts)\n        const tasks = []\n        let task\n        utils.forEachRelation(mapper, opts, (def, optsCopy) => {\n          const relatedMapper = def.getRelation()\n          optsCopy.raw = false\n          if (utils.isFunction(def.load)) {\n            task = def.load(mapper, def, this, opts)\n          } else if (def.type === 'hasMany' || def.type === 'hasOne') {\n            if (def.foreignKey) {\n              task = superMethod(relatedMapper, 'findAll')(\n                {\n                  [def.foreignKey]: utils.get(this, mapper.idAttribute)\n                },\n                optsCopy\n              ).then(relatedData =>\n                def.type === 'hasOne' ? (relatedData.length ? relatedData[0] : undefined) : relatedData\n              )\n            } else if (def.localKeys) {\n              task = superMethod(\n                relatedMapper,\n                'findAll'\n              )({\n                where: {\n                  [relatedMapper.idAttribute]: {\n                    in: utils.get(this, def.localKeys)\n                  }\n                }\n              })\n            } else if (def.foreignKeys) {\n              task = superMethod(relatedMapper, 'findAll')(\n                {\n                  where: {\n                    [def.foreignKeys]: {\n                      contains: utils.get(this, mapper.idAttribute)\n                    }\n                  }\n                },\n                opts\n              )\n            }\n          } else if (def.type === 'belongsTo') {\n            const key = utils.get(this, def.foreignKey)\n            if (utils.isSorN(key)) {\n              task = superMethod(relatedMapper, 'find')(key, optsCopy)\n            }\n          }\n          if (task) {\n            task = task.then(relatedData => {\n              def.setLocalField(this, relatedData)\n            })\n            tasks.push(task)\n          }\n        })\n        return Promise.all(tasks)\n      })\n      .then(() => {\n        // afterLoadRelations lifecycle hook\n        op = opts.op = 'afterLoadRelations'\n        return utils.resolve(this[op](relations, opts)).then(() => this)\n      })\n  }\n\n  /**\n   * Return the properties with which this record was instantiated.\n   *\n   * @example <caption>Record#previous</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.name = 'Bob';\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   * user.commit();\n   * console.log('user previous: ' + JSON.stringify(user.previous()));\n   *\n   * @method Record#previous\n   * @param {string} [key] If specified, return just the initial value of the\n   * given key.\n   * @returns {Object} The initial properties of this record.\n   * @since 3.0.0\n   */\n  previous (key) {\n    if (key) {\n      return this._get(`previous.${key}`)\n    }\n    return this._get('previous')\n  }\n\n  /**\n   * Revert changes to this record back to the properties it had when it was\n   * instantiated.\n   *\n   * @example <caption>Record#revert</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   * const user = store.createRecord('user', {\n   *   name: 'William'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   * user.name = 'Bob';\n   * console.log('user: ' + JSON.stringify(user));\n   * user.revert();\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#revert\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.preserve] Array of strings or Regular Expressions\n   * denoting properties that should not be reverted.\n   * @since 3.0.0\n   */\n  revert (opts: any = {}) {\n    const previous = this._get('previous')\n    opts.preserve = opts.preserve || []\n    utils.forOwn(this, (value, key) => {\n      if (\n        key !== this._mapper().idAttribute &&\n        !previous.hasOwnProperty(key) &&\n        this.hasOwnProperty(key) &&\n        opts.preserve.indexOf(key) === -1\n      ) {\n        delete this[key]\n      }\n    })\n    utils.forOwn(previous, (value, key) => {\n      if (opts.preserve.indexOf(key) === -1) {\n        this[key] = value\n      }\n    })\n    this.commit()\n  }\n\n  /**\n   * Delegates to {@link Mapper#create} or {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   *\n   * const store = new Container();\n   * store.registerAdapter('rethink', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('session');\n   * const session = store.createRecord('session', { topic: 'Node.js' });\n   *\n   * // Create a new record in the database\n   * session.save().then(() => {\n   *   console.log(session.id); // 1234\n   *\n   *   session.skill_level = 'beginner';\n   *\n   *   // Update the record in the database\n   *   return session.save();\n   * });\n   *\n   * @method Record#save\n   * @param {object} [opts] Configuration options. See {@link Mapper#create} and\n   * {@link Mapper#update}.\n   * @param {boolean} [opts.changesOnly] Equality function. Default uses `===`.\n   * @param {Function} [opts.equalsFn] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @param {array} [opts.ignore] Passed to {@link Record#changes} when\n   * `opts.changesOnly` is `true`.\n   * @returns {Promise} The result of calling {@link Mapper#create} or\n   * {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  save (opts: any = {}) {\n    const mapper = this._mapper()\n    const id = utils.get(this, mapper.idAttribute)\n    let props: any = this\n\n    const postProcess = result => {\n      const record = opts.raw ? result.data : result\n      if (record) {\n        utils.deepMixIn(this, record)\n        this.commit()\n      }\n      return result\n    }\n\n    if (id === undefined) {\n      return superMethod(mapper, 'create')(props, opts).then(postProcess)\n    }\n    if (opts.changesOnly) {\n      const changes = this.changes(opts)\n      props = {}\n      utils.fillIn(props, changes.added)\n      utils.fillIn(props, changes.changed)\n    }\n    return superMethod(mapper, 'update')(id, props, opts).then(postProcess)\n  }\n\n  /**\n   * Set the value for a given key, or the values for the given keys if \"key\" is\n   * an object. Triggers change events on those properties that have `track: true`\n   * in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#set</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set('name', 'Bob');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.set({ age: 30, role: 'admin' });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @fires Record#change\n   * @method Record#set\n   * @param {(string|Object)} key Key to set or hash of key-value pairs to set.\n   * @param {*} [value] Value to set for the given key.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  set (key: string | any, value?, opts?) {\n    if (utils.isObject(key)) {\n      opts = value\n    }\n    opts = opts || {}\n    if (opts.silent) {\n      this._set('silent', true)\n    }\n    utils.set(this, key, value)\n    if (!this._get('eventId')) {\n      this._set('silent') // unset\n    }\n  }\n\n  /**\n   * Return a plain object representation of this record. If the class from\n   * which this record was created has a Mapper, then {@link Mapper#toJSON} will\n   * be called with this record instead.\n   *\n   * @example <caption>Record#toJSON</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John',\n   *   $$hashKey: '1234'\n   * });\n   * console.log('user: ' + JSON.stringify(user.toJSON()));\n   *\n   * @method Record#toJSON\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation. Only available as an option if the class\n   * from which this record was created has a Mapper and this record resides in\n   * an instance of {@link DataStore}.\n   * @returns {Object} Plain object representation of this record.\n   * @since 3.0.0\n   */\n  toJSON (opts?) {\n    const mapper = (this.constructor as typeof Record).mapper\n    if (mapper) {\n      return mapper.toJSON(this, opts)\n    } else {\n      const json = {}\n      utils.forOwn(this, (prop, key) => {\n        json[key] = utils.plainCopy(prop)\n      })\n      return json\n    }\n  }\n\n  /**\n   * Unset the value for a given key. Triggers change events on those properties\n   * that have `track: true` in {@link Mapper#schema}.\n   *\n   * @example <caption>Record#unset</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user');\n   *\n   * const user = store.createRecord('user', {\n   *   name: 'John'\n   * });\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * user.unset('name');\n   * console.log('user: ' + JSON.stringify(user));\n   *\n   * @method Record#unset\n   * @param {string} key Key to unset.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.silent=false] Whether to trigger change events.\n   * @since 3.0.0\n   */\n  unset (key: string, opts?) {\n    this.set(key, undefined, opts)\n  }\n\n  /**\n   * Validate this record based on its current properties.\n   *\n   * @example <caption>Record#validate</caption>\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   * const store = new Container();\n   * store.defineMapper('user', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const user = store.createRecord('user', {\n   *   name: 1234\n   * }, {\n   *   noValidate: true // this allows us to put the record into an invalid state\n   * });\n   * console.log('user validation: ' + JSON.stringify(user.validate()));\n   * user.name = 'John';\n   * console.log('user validation: ' + user.validate());\n   *\n   * @method Record#validate\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#validate}.\n   * @returns {*} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (opts) {\n    return this._mapper().validate(this, opts)\n  }\n\n  static creatingPath = creatingPath;\n  static noValidatePath = noValidatePath;\n  static keepChangeHistoryPath = keepChangeHistoryPath;\n  static previousPath = previousPath;\n}\n\n/**\n * Allow records to emit events.\n *\n * An record's registered listeners are stored in the record's private data.\n */\nutils.eventify(\n  Record.prototype,\n  function () {\n    return this._get('events')\n  },\n  function (value) {\n    this._set('events', value)\n  }\n)\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link Record~changeListener} on how to listen for this event.\n *\n * @event Record#change\n * @see Record~changeListener\n */\n\n/**\n * Callback signature for the {@link Record#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * record.on('change', onChange);\n *\n * @callback Record~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Record#event:change\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Record:\n * @example <caption>Record.extend</caption>\n * const JSData = require('js-data');\n * const { Record } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomRecordClass extends Record {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customRecord = new CustomRecordClass();\n * console.log(customRecord.foo());\n * console.log(CustomRecordClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherRecordClass = Record.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherRecord = new OtherRecordClass();\n * console.log(otherRecord.foo());\n * console.log(OtherRecordClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherRecordClass () {\n *   Record.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Record.extend({\n *   constructor: AnotherRecordClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherRecord = new AnotherRecordClass();\n * console.log(anotherRecord.created_at);\n * console.log(anotherRecord.foo());\n * console.log(AnotherRecordClass.beep());\n *\n * @method Record.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Record class.\n * @since 3.0.0\n */\n","export function sort (a, b, hashCode) {\n  // Short-circuit comparison if a and b are strictly equal\n  // This is absolutely necessary for indexed objects that\n  // don't have the idAttribute field\n  if (a === b) {\n    return 0\n  } else if (hashCode) {\n    a = hashCode(a)\n    b = hashCode(b)\n  }\n  return (a === null && b === null) || (a === undefined && b === undefined)\n    ? -1\n    : a === null || a === undefined\n      ? -1\n      : b === null || b === undefined\n        ? 1\n        : a < b\n          ? -1\n          : a > b\n            ? 1\n            : 0\n}\n\nexport function insertAt (array, index, value) {\n  array.splice(index, 0, value)\n  return array\n}\n\nexport function removeAt (array, index) {\n  array.splice(index, 1)\n  return array\n}\n\nexport function binarySearch (array, value, field?) {\n  let lo = 0\n  let hi = array.length\n  let compared\n  let mid\n\n  while (lo < hi) {\n    // tslint:disable-next-line:no-bitwise\n    mid = ((lo + hi) / 2) | 0\n    compared = sort(value, array[mid], field)\n    if (compared === 0) {\n      return {\n        found: true,\n        index: mid\n      }\n    } else if (compared < 0) {\n      hi = mid\n    } else {\n      lo = mid + 1\n    }\n  }\n\n  return {\n    found: false,\n    index: hi\n  }\n}\n","// Copyright (c) 2015, InternalFX.\n\n// Permission to use, copy, modify, and/or distribute this software for any purpose with or\n// without fee is hereby granted, provided that the above copyright notice and this permission\n// notice appear in all copies.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO\n// THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT\n// SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR\n// ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n// OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE\n// USE OR PERFORMANCE OF THIS SOFTWARE.\n\n// Modifications\n// Copyright 2015-2016 Jason Dobry\n//\n// Summary of modifications:\n// Reworked dependencies so as to re-use code already in js-data\n// Removed unused code\nimport utils from '../../src/utils'\nimport { binarySearch, insertAt, removeAt } from './_utils'\n\nexport interface IndexOpts {\n  fieldGetter?\n  hashCode?\n}\n\nexport default class Index {\n  fieldList: any[];\n  fieldGetter: any;\n  hashCode: any;\n  isIndex: boolean;\n  keys: any[];\n  values: any[];\n\n  constructor (fieldList = [], opts: IndexOpts = {}) {\n    if (!utils.isArray(fieldList)) {\n      throw new Error('fieldList must be an array.')\n    }\n\n    this.fieldList = fieldList\n    this.fieldGetter = opts.fieldGetter\n    this.hashCode = opts.hashCode\n    this.isIndex = true\n    this.keys = []\n    this.values = []\n  }\n\n  set (keyList, value) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    const key = keyList.shift() || undefined\n    const pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        const dataLocation = binarySearch(this.values[pos.index], value, this.hashCode)\n        if (!dataLocation.found) {\n          insertAt(this.values[pos.index], dataLocation.index, value)\n        }\n      } else {\n        insertAt(this.keys, pos.index, key)\n        insertAt(this.values, pos.index, [value])\n      }\n    } else {\n      if (pos.found) {\n        this.values[pos.index].set(keyList, value)\n      } else {\n        insertAt(this.keys, pos.index, key)\n        const newIndex = new Index([], { hashCode: this.hashCode })\n        newIndex.set(keyList, value)\n        insertAt(this.values, pos.index, newIndex)\n      }\n    }\n  }\n\n  get (keyList?) {\n    if (!utils.isArray(keyList)) {\n      keyList = [keyList]\n    }\n\n    const key = keyList.shift() || undefined\n    const pos = binarySearch(this.keys, key)\n\n    if (keyList.length === 0) {\n      if (pos.found) {\n        if (this.values[pos.index].isIndex) {\n          return this.values[pos.index].getAll()\n        } else {\n          return this.values[pos.index].slice()\n        }\n      } else {\n        return []\n      }\n    } else {\n      if (pos.found) {\n        return this.values[pos.index].get(keyList)\n      } else {\n        return []\n      }\n    }\n  }\n\n  getAll (opts: any = {}) {\n    let results = []\n    const values = this.values\n    if (opts.order === 'desc') {\n      for (let i = values.length - 1; i >= 0; i--) {\n        const value = values[i]\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    } else {\n      for (const value of values) {\n        if (value.isIndex) {\n          results = results.concat(value.getAll(opts))\n        } else {\n          results = results.concat(value)\n        }\n      }\n    }\n    return results\n  }\n\n  visitAll (cb, thisArg?) {\n    this.values.forEach(value => {\n      if (value.isIndex) {\n        value.visitAll(cb, thisArg)\n      } else {\n        value.forEach(cb, thisArg)\n      }\n    })\n  }\n\n  between (leftKeys, rightKeys, opts: any = {}) {\n    if (!utils.isArray(leftKeys)) {\n      leftKeys = [leftKeys]\n    }\n    if (!utils.isArray(rightKeys)) {\n      rightKeys = [rightKeys]\n    }\n    utils.fillIn(opts, {\n      leftInclusive: true,\n      rightInclusive: false,\n      limit: undefined,\n      offset: 0\n    })\n\n    const results = this._between(leftKeys, rightKeys, opts)\n\n    if (opts.limit) {\n      return results.slice(opts.offset, opts.limit + opts.offset)\n    } else {\n      return results.slice(opts.offset)\n    }\n  }\n\n  _between (leftKeys, rightKeys, opts) {\n    let results = []\n\n    const leftKey = leftKeys.shift()\n    const rightKey = rightKeys.shift()\n\n    let pos\n\n    if (leftKey !== undefined) {\n      pos = binarySearch(this.keys, leftKey)\n    } else {\n      pos = {\n        found: false,\n        index: 0\n      }\n    }\n\n    if (leftKeys.length === 0) {\n      if (pos.found && opts.leftInclusive === false) {\n        pos.index += 1\n      }\n\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        if (rightKey !== undefined) {\n          if (opts.rightInclusive) {\n            if (this.keys[i] > rightKey) {\n              break\n            }\n          } else {\n            if (this.keys[i] >= rightKey) {\n              break\n            }\n          }\n        }\n\n        if (this.values[i].isIndex) {\n          results = results.concat(this.values[i].getAll())\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= opts.limit + opts.offset) {\n            break\n          }\n        }\n      }\n    } else {\n      for (let i = pos.index; i < this.keys.length; i += 1) {\n        const currKey = this.keys[i]\n        if (currKey > rightKey) {\n          break\n        }\n\n        if (this.values[i].isIndex) {\n          if (currKey === leftKey) {\n            results = results.concat(\n              this.values[i]._between(\n                utils.copy(leftKeys),\n                rightKeys.map(() => undefined),\n                opts\n              )\n            )\n          } else if (currKey === rightKey) {\n            results = results.concat(\n              this.values[i]._between(\n                leftKeys.map(() => undefined),\n                utils.copy(rightKeys),\n                opts\n              )\n            )\n          } else {\n            results = results.concat(this.values[i].getAll())\n          }\n        } else {\n          results = results.concat(this.values[i])\n        }\n\n        if (opts.limit) {\n          if (results.length >= opts.limit + opts.offset) {\n            break\n          }\n        }\n      }\n    }\n\n    if (opts.limit) {\n      return results.slice(0, opts.limit + opts.offset)\n    } else {\n      return results\n    }\n  }\n\n  peek () {\n    return this.values.length ? (this.values[0].isIndex ? this.values[0].peek() : this.values[0]) : []\n  }\n\n  clear () {\n    this.keys = []\n    this.values = []\n  }\n\n  insertRecord (data) {\n    const keyList = this.fieldList.map(field =>\n      utils.isFunction(field) ? field(data) || undefined : data[field] || undefined\n    )\n    this.set(keyList, data)\n  }\n\n  removeRecord (data) {\n    let removed\n    const isUnique = this.hashCode(data) !== undefined\n    this.values.forEach((value, i) => {\n      if (value.isIndex) {\n        if (value.removeRecord(data)) {\n          if (value.keys.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      } else {\n        let dataLocation: any = {}\n        if (this.keys[i] === undefined || !isUnique) {\n          for (let j = value.length - 1; j >= 0; j--) {\n            if (value[j] === data) {\n              dataLocation = {\n                found: true,\n                index: j\n              }\n              break\n            }\n          }\n        } else if (isUnique) {\n          dataLocation = binarySearch(value, data, this.hashCode)\n        }\n        if (dataLocation.found) {\n          removeAt(value, dataLocation.index)\n          if (value.length === 0) {\n            removeAt(this.keys, i)\n            removeAt(this.values, i)\n          }\n          removed = true\n          return false\n        }\n      }\n    })\n    return removed ? data : undefined\n  }\n\n  updateRecord (data) {\n    const removed = this.removeRecord(data)\n    if (removed !== undefined) {\n      this.insertRecord(data)\n    }\n  }\n}\n","import utils from './utils'\nimport Component, { ComponentOpts } from './Component'\nimport Query from './Query'\nimport Record from './Record'\nimport Index from './mindex'\n\nconst { noValidatePath } = Record\n\nconst DOMAIN = 'Collection'\n\nexport interface CollectionOpts extends ComponentOpts {\n  /**\n   * Whether to call {@link Record#commit} on records that are added to the\n   * collection and already exist in the collection.\n   *\n   * @name Collection#commitOnMerge\n   * @type {boolean}\n   * @default true\n   */\n  commitOnMerge?: boolean\n\n  /**\n   * Whether record events should bubble up and be emitted by the collection.\n   *\n   * @name Collection#emitRecordEvents\n   * @type {boolean}\n   * @default true\n   */\n  emitRecordEvents?: boolean\n\n  /**\n   * Field to be used as the unique identifier for records in this collection.\n   * Defaults to `\"id\"` unless {@link Collection#mapper} is set, in which case\n   * this will default to {@link Mapper#idAttribute}.\n   *\n   * @name Collection#idAttribute\n   * @type {string}\n   * @default \"id\"\n   */\n  idAttribute?: string\n\n  /**\n   * What to do when inserting a record into this Collection that shares a\n   * primary key with a record already in this Collection.\n   *\n   * Possible values:\n   * merge\n   * replace\n   * skip\n   *\n   * Merge:\n   *\n   * Recursively shallow copy properties from the new record onto the existing\n   * record.\n   *\n   * Replace:\n   *\n   * Shallow copy top-level properties from the new record onto the existing\n   * record. Any top-level own properties of the existing record that are _not_\n   * on the new record will be removed.\n   *\n   * Skip:\n   *\n   * Ignore new record, keep existing record.\n   *\n   * @default \"merge\"\n   */\n  onConflict?: 'merge' | 'replace' | 'skip'\n}\n\nconst COLLECTION_DEFAULTS: CollectionOpts = {\n  commitOnMerge: true,\n  emitRecordEvents: true,\n  idAttribute: 'id',\n  onConflict: 'merge'\n}\n\n/**\n * An ordered set of {@link Record} instances.\n *\n * @example <caption>Collection#constructor</caption>\n * // import { Collection, Record } from 'js-data';\n * const JSData = require('js-data');\n * const {Collection, Record} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const user1 = new Record({ id: 1 });\n * const user2 = new Record({ id: 2 });\n * const UserCollection = new Collection([user1, user2]);\n * console.log(UserCollection.get(1) === user1);\n *\n * @class Collection\n * @extends Component\n * @param {array} [records] Initial set of records to insert into the\n * collection.\n * @param {object} [opts] Configuration options.\n * @param {string} [opts.commitOnMerge] See {@link Collection#commitOnMerge}.\n * @param {string} [opts.idAttribute] See {@link Collection#idAttribute}.\n * @param {string} [opts.onConflict=\"merge\"] See {@link Collection#onConflict}.\n * @param {string} [opts.mapper] See {@link Collection#mapper}.\n * @since 3.0.0\n */\nexport default class Collection extends Component {\n  queryClass\n  emitRecordEvents: any\n  onConflict: string\n  /**\n   * Default Mapper for this collection. Optional. If a Mapper is provided, then\n   * the collection will use the {@link Mapper#idAttribute} setting, and will\n   * wrap records in {@link Mapper#recordClass}.\n   *\n   * @example <caption>Collection#mapper</caption>\n   * const JSData = require('js-data');\n   * const {Collection, Mapper} = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * class MyMapperClass extends Mapper {\n   *   foo () { return 'bar'; }\n   * }\n   * const myMapper = new MyMapperClass({ name: 'myMapper' });\n   * const collection = new Collection(null, { mapper: myMapper });\n   *\n   * @name Collection#mapper\n   * @type {Mapper}\n   * @default null\n   * @since 3.0.0\n   */\n  mapper: any\n  /**\n   * The main index, which uses @{link Collection#recordId} as the key.\n   *\n   * @name Collection#index\n   * @type {Index}\n   */\n  index: Index\n  /**\n   * Object that holds the secondary indexes of this collection.\n   *\n   * @name Collection#indexes\n   * @type {Object.<string, Index>}\n   */\n  indexes: { [key: string]: Index } = {}\n  idAttribute: any\n  _added = {}\n  emit: any\n\n  constructor (records: any = {}, opts: CollectionOpts | string | any = {}) {\n    super(opts)\n\n    if (records && !utils.isArray(records)) {\n      opts = records\n      records = []\n    }\n    if (utils.isString(opts)) {\n      opts = { idAttribute: opts }\n    }\n\n    // Apply user-provided configuration\n    utils.fillIn(this, opts)\n    // Fill in any missing options with the defaults\n    utils.fillIn(this, utils.copy(COLLECTION_DEFAULTS))\n\n    if (!this.queryClass) {\n      this.queryClass = Query\n    }\n\n    const idAttribute = this.recordId()\n\n    this.index = new Index([idAttribute], {\n      hashCode (obj) {\n        return utils.get(obj, idAttribute)\n      }\n    })\n\n    // Insert initial data into the collection\n    if (utils.isObject(records) || (utils.isArray(records) && records.length)) {\n      this.add(records)\n    }\n  }\n\n  /**\n   * Used to bind to events emitted by records in this Collection.\n   *\n   * @method Collection#_onRecordEvent\n   * @since 3.0.0\n   * @private\n   * @param {...*} [args] Args passed to {@link Collection#emit}.\n   */\n  _onRecordEvent (...args) {\n    if (this.emitRecordEvents) {\n      this.emit(...args)\n    }\n  }\n\n  /**\n   * Insert the provided record or records.\n   *\n   * If a record is already in the collection then the provided record will\n   * either merge with or replace the existing record based on the value of the\n   * `onConflict` option.\n   *\n   * The collection's secondary indexes will be updated as each record is\n   * visited.\n   *\n   * @method Collection#add\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The record or records to insert.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.commitOnMerge=true] See {@link Collection#commitOnMerge}.\n   * @param {boolean} [opts.noValidate] See {@link Record#noValidate}.\n   * @param {string} [opts.onConflict] See {@link Collection#onConflict}.\n   * @returns {(Object|Object[]|Record|Record[])} The added record or records.\n   */\n  add (records, opts: any = {}) {\n    // Fill in \"opts\" with the Collection's configuration\n    utils._(opts, this)\n    records = this.beforeAdd(records, opts) || records\n\n    // Track whether just one record or an array of records is being inserted\n    let singular = false\n    const idAttribute = this.recordId()\n    if (!utils.isArray(records)) {\n      if (utils.isObject(records)) {\n        records = [records]\n        singular = true\n      } else {\n        throw utils.err(`${DOMAIN}#add`, 'records')(\n          400,\n          'object or array',\n          records\n        )\n      }\n    }\n\n    // Map the provided records to existing records.\n    // New records will be inserted. If any records map to existing records,\n    // they will be merged into the existing records according to the onConflict\n    // option.\n    records = records.map(record => {\n      const id = this.recordId(record)\n      // Grab existing record if there is one\n      const existing = id === undefined ? id : this.get(id)\n      // If the currently visited record is just a reference to an existing\n      // record, then there is nothing to be done. Exit early.\n      if (record === existing) {\n        return existing\n      }\n\n      if (existing) {\n        // Here, the currently visited record corresponds to a record already\n        // in the collection, so we need to merge them\n        const onConflict = opts.onConflict || this.onConflict\n        if (\n          onConflict !== 'merge' &&\n          onConflict !== 'replace' &&\n          onConflict !== 'skip'\n        ) {\n          throw utils.err(`${DOMAIN}#add`, 'opts.onConflict')(\n            400,\n            'one of (merge, replace, skip)',\n            onConflict,\n            true\n          )\n        }\n        const existingNoValidate = existing._get(noValidatePath)\n        if (opts.noValidate) {\n          // Disable validation\n          existing._set(noValidatePath, true)\n        }\n        if (onConflict === 'merge') {\n          utils.deepMixIn(existing, record)\n        } else if (onConflict === 'replace') {\n          utils.forOwn(existing, (value, key) => {\n            if (key !== idAttribute && record[key] === undefined) {\n              existing[key] = undefined\n            }\n          })\n          existing.set(record)\n        } // else if(onConflict === 'skip'){ do nothing }\n\n        if (opts.noValidate) {\n          // Restore previous `noValidate` value\n          existing._set(noValidatePath, existingNoValidate)\n        }\n        record = existing\n        if (opts.commitOnMerge && utils.isFunction(record.commit)) {\n          record.commit()\n        }\n        // Update all indexes in the collection\n        this.updateIndexes(record)\n      } else {\n        // Here, the currently visited record does not correspond to any record\n        // in the collection, so (optionally) instantiate this record and insert\n        // it into the collection\n        record = this.mapper ? this.mapper.createRecord(record, opts) : record\n        this.index.insertRecord(record)\n        utils.forOwn(this.indexes, (index, name) => {\n          index.insertRecord(record)\n        })\n        if (record && utils.isFunction(record.on)) {\n          record.on('all', this._onRecordEvent, this)\n        }\n      }\n      return record\n    })\n    // Finally, return the inserted data\n    const result = singular ? records[0] : records\n    if (!opts.silent) {\n      this.emit('add', result)\n    }\n    return this.afterAdd(records, opts, result) || result\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then {@link Collection#add} will return that same value.\n   *\n   * @method Collection#method\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} record The record or records\n   * that were added to this Collection by {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   * @param result\n   */\n  afterAdd (record, opts, result) {\n    return null\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}. If this method returns\n   * a value then {@link Collection#remove} will return that same value.\n   *\n   * @method Collection#afterRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   * @param {object} record The result that will be returned by {@link Collection#remove}.\n   */\n  afterRemove (id, opts, record) {\n    return null\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}. If this method\n   * returns a value then {@link Collection#removeAll} will return that same\n   * value.\n   *\n   * @method Collection#afterRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   * @param {object} records The result that will be returned by {@link Collection#removeAll}.\n   */\n  afterRemoveAll (query, opts, records) {\n    return null\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#add}. If this method returns a\n   * value then the `records` argument in {@link Collection#add} will be\n   * re-assigned to the returned value.\n   *\n   * @method Collection#beforeAdd\n   * @since 3.0.0\n   * @param {(Object|Object[]|Record|Record[])} records The `records` argument passed to {@link Collection#add}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#add}.\n   */\n  beforeAdd (records, opts) {\n    return null\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#remove}.\n   *\n   * @method Collection#beforeRemove\n   * @since 3.0.0\n   * @param {(string|number)} id The `id` argument passed to {@link Collection#remove}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#remove}.\n   */\n  beforeRemove (id, opts) {\n    return null\n  }\n\n  /**\n   * Lifecycle hook called by {@link Collection#removeAll}.\n   *\n   * @method Collection#beforeRemoveAll\n   * @since 3.0.0\n   * @param {object} query The `query` argument passed to {@link Collection#removeAll}.\n   * @param {object} opts The `opts` argument passed to {@link Collection#removeAll}.\n   */\n  beforeRemoveAll (query, opts) {\n    return null\n  }\n\n  /**\n   * Find all records between two boundaries.\n   *\n   * Shortcut for `collection.query().between(18, 30, { index: 'age' }).run()`\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = collection.between(18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = collection.between([18], [30], { index: 'age' });\n   *\n   * @method Collection#between\n   * @since 3.0.0\n   * @param {array} leftKeys Keys defining the left boundary.\n   * @param {array} rightKeys Keys defining the right boundary.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @param {boolean} [opts.leftInclusive=true] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.rightInclusive=false] Whether to include records\n   * on the left boundary.\n   * @param {boolean} [opts.limit] Limit the result to a certain number.\n   * @param {boolean} [opts.offset] The number of resulting records to skip.\n   * @returns {Object[]|Record[]} The result.\n   */\n  between (leftKeys, rightKeys, opts) {\n    return this.query()\n      .between(leftKeys, rightKeys, opts)\n      .run()\n  }\n\n  /**\n   * Create a new secondary index on the contents of the collection.\n   *\n   * @example\n   * // Index users by age\n   * collection.createIndex('age');\n   *\n   * @example\n   * // Index users by status and role\n   * collection.createIndex('statusAndRole', ['status', 'role']);\n   *\n   * @method Collection#createIndex\n   * @since 3.0.0\n   * @param {string} name The name of the new secondary index.\n   * @param {string[]} [fieldList] Array of field names to use as the key or\n   * compound key of the new secondary index. If no fieldList is provided, then\n   * the name will also be the field that is used to index the collection.\n   * @param opts\n   */\n  createIndex (name, fieldList?, opts: any = {}) {\n    if (utils.isString(name) && fieldList === undefined) {\n      fieldList = [name]\n    }\n    opts.hashCode = opts.hashCode || (obj => this.recordId(obj))\n    const index = (this.indexes[name] = new Index(fieldList, opts))\n    this.index.visitAll(index.insertRecord, index)\n  }\n\n  /**\n   * Find the record or records that match the provided query or pass the\n   * provided filter function.\n   *\n   * Shortcut for `collection.query().filter(queryOrFn[, thisArg]).run()`\n   *\n   * @example <caption>Collection#filter</caption>\n   * const JSData = require('js-data');\n   * const { Collection } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const collection = new Collection([\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = collection.filter({\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = collection.filter((post) => post.id % 2 === 0);\n   *\n   * @method Collection#filter\n   * @param {(Object|Function)} [queryOrFn={}] Selection query or filter\n   * function.\n   * @param {object} [thisArg] Context to which to bind `queryOrFn` if\n   * `queryOrFn` is a function.\n   * @returns {Array} The result.\n   * @see query\n   * @since 3.0.0\n   */\n  filter (queryOrFn, thisArg?) {\n    return this.query()\n      .filter(queryOrFn, thisArg)\n      .run()\n  }\n\n  /**\n   * Iterate over all records.\n   *\n   * @example\n   * collection.forEach(function (record) {\n   *   // do something\n   * });\n   *\n   * @method Collection#forEach\n   * @since 3.0.0\n   * @param {Function} forEachFn Iteration function.\n   * @param {*} [thisArg] Context to which to bind `forEachFn`.\n   * @returns {Array} The result.\n   */\n  forEach (forEachFn, thisArg?) {\n    this.index.visitAll(forEachFn, thisArg)\n  }\n\n  /**\n   * Get the record with the given id.\n   *\n   * @method Collection#get\n   * @since 3.0.0\n   * @param {(string|number)} id The primary key of the record to get.\n   * @returns {(Object|Record)} The record with the given id.\n   */\n  get (id) {\n    const instances =\n      id === undefined\n        ? []\n        : this.query()\n          .get(id)\n          .run()\n    return instances.length ? instances[0] : undefined\n  }\n\n  /**\n   * Find the record or records that match the provided keyLists.\n   *\n   * Shortcut for `collection.query().getAll(keyList1, keyList2, ...).run()`\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = collection.getAll('draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = collection.getAll(['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method Collection#getAll\n   * @since 3.0.0\n   * @param {...Array} [keyList] Provide one or more keyLists, and all\n   * records matching each keyList will be retrieved. If no keyLists are\n   * provided, all records will be returned.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] Name of the secondary index to use in the\n   * query. If no index is specified, the main index is used.\n   * @returns {Array} The result.\n   */\n  getAll(keyList?: Array<string | number> | string | number, opts?)\n  getAll(keyList?: Array<string | number> | string | number, ...args)\n  getAll (...args) {\n    return this.query()\n      .getAll(...args)\n      .run()\n  }\n\n  /**\n   * Return the index with the given name. If no name is provided, return the\n   * main index. Throws an error if the specified index does not exist.\n   *\n   * @method Collection#getIndex\n   * @since 3.0.0\n   * @param {string} [name] The name of the index to retrieve.\n   */\n  getIndex (name): Index {\n    const index = name ? this.indexes[name] : this.index\n    if (!index) {\n      throw utils.err(`${DOMAIN}#getIndex`, name)(404, 'index')\n    }\n    return index\n  }\n\n  /**\n   * Limit the result.\n   *\n   * Shortcut for `collection.query().limit(maximumNumber).run()`\n   *\n   * @example\n   * const posts = collection.limit(10);\n   *\n   * @method Collection#limit\n   * @since 3.0.0\n   * @param {number} num The maximum number of records to keep in the result.\n   * @returns {Array} The result.\n   */\n  limit (num) {\n    return this.query()\n      .limit(num)\n      .run()\n  }\n\n  /**\n   * Apply a mapping function to all records.\n   *\n   * @example\n   * const names = collection.map((user) => user.name);\n   *\n   * @method Collection#map\n   * @since 3.0.0\n   * @param {Function} mapFn Mapping function.\n   * @param {*} [thisArg] Context to which to bind `mapFn`.\n   * @returns {Array} The result of the mapping.\n   */\n  map (cb, thisArg) {\n    const data = []\n    this.index.visitAll(value => {\n      data.push(cb.call(thisArg, value))\n    })\n    return data\n  }\n\n  /**\n   * Return the result of calling the specified function on each record in this\n   * collection's main index.\n   *\n   * @method Collection#mapCall\n   * @since 3.0.0\n   * @param {string} funcName Name of function to call\n   * @param {...*} [args] Remaining arguments to be passed to the function.\n   * @returns {Array} The result.\n   */\n  mapCall (funcName, ...args) {\n    const data = []\n    this.index.visitAll(record => {\n      data.push(record[funcName](...args))\n    })\n    return data\n  }\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#prune\n   * @param {object} [opts] Configuration options, passed to {@link Collection#removeAll}.\n   * @since 3.0.0\n   * @returns {Array} The removed records, if any.\n   */\n  prune (opts) {\n    return this.removeAll(this.unsaved(), opts)\n  }\n\n  /**\n   * Create a new query to be executed against the contents of the collection.\n   * The result will be all or a subset of the contents of the collection.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * collection.query()\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method Collection#query\n   * @since 3.0.0\n   * @returns {Query} New query object.\n   */\n  query (): Query {\n    const Ctor = this.queryClass\n    return new Ctor(this)\n  }\n\n  /**\n   * Return the primary key of the given, or if no record is provided, return the\n   * name of the field that holds the primary key of records in this Collection.\n   *\n   * @method Collection#recordId\n   * @since 3.0.0\n   * @param {(Object|Record)} [record] The record whose primary key is to be\n   * returned.\n   * @returns {(string|number)} Primary key or name of field that holds primary\n   * key.\n   */\n  recordId (record?) {\n    if (record) {\n      return utils.get(record, this.recordId())\n    }\n    return this.mapper ? this.mapper.idAttribute : this.idAttribute\n  }\n\n  /**\n   * Reduce the data in the collection to a single value and return the result.\n   *\n   * @example\n   * const totalVotes = collection.reduce((prev, record) => {\n   *   return prev + record.upVotes + record.downVotes;\n   * }, 0);\n   *\n   * @method Collection#reduce\n   * @since 3.0.0\n   * @param {Function} cb Reduction callback.\n   * @param {*} initialValue Initial value of the reduction.\n   * @returns {*} The result.\n   */\n  reduce (cb, initialValue) {\n    const data = this.getAll()\n    return data.reduce(cb, initialValue)\n  }\n\n  /**\n   * Remove the record with the given id from this Collection.\n   *\n   * @method Collection#remove\n   * @since 3.0.0\n   * @param {(string|number|object|Record)} idOrRecord The primary key of the\n   * record to be removed, or a reference to the record that is to be removed.\n   * @param {object} [opts] Configuration options.\n   * @returns {Object|Record} The removed record, if any.\n   */\n  remove (idOrRecord, opts: any = {}) {\n    this.beforeRemove(idOrRecord, opts)\n    let record = utils.isSorN(idOrRecord) ? this.get(idOrRecord) : idOrRecord\n\n    // The record is in the collection, remove it\n    if (utils.isObject(record)) {\n      record = this.index.removeRecord(record)\n      if (record) {\n        utils.forOwn(this.indexes, (index, name) => {\n          index.removeRecord(record)\n        })\n        if (utils.isFunction(record.off)) {\n          record.off('all', this._onRecordEvent, this)\n        }\n        if (!opts.silent) {\n          this.emit('remove', record)\n        }\n      }\n    }\n    return this.afterRemove(idOrRecord, opts, record) || record\n  }\n\n  /**\n   * Remove from this collection the given records or the records selected by\n   * the given \"query\".\n   *\n   * @method Collection#removeAll\n   * @since 3.0.0\n   * @param {Object|Object[]|Record[]} [queryOrRecords={}] Records to be removed or selection query. See {@link query}.\n   * @param {object} [queryOrRecords.where] See {@link query.where}.\n   * @param {number} [queryOrRecords.offset] See {@link query.offset}.\n   * @param {number} [queryOrRecords.limit] See {@link query.limit}.\n   * @param {string|Array[]} [queryOrRecords.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object[]|Record[])} The removed records, if any.\n   */\n  removeAll (queryOrRecords, opts: any = {}) {\n    this.beforeRemoveAll(queryOrRecords, opts)\n    let records = utils.isArray(queryOrRecords)\n      ? queryOrRecords.slice()\n      : this.filter(queryOrRecords)\n\n    // Remove each selected record from the collection\n    const optsCopy = utils.plainCopy(opts)\n    optsCopy.silent = true\n    records = records\n      .map(record => this.remove(record, optsCopy))\n      .filter(record => record)\n    if (!opts.silent) {\n      this.emit('remove', records)\n    }\n    return this.afterRemoveAll(queryOrRecords, opts, records) || records\n  }\n\n  /**\n   * Skip a number of results.\n   *\n   * Shortcut for `collection.query().skip(numberToSkip).run()`\n   *\n   * @example\n   * const posts = collection.skip(10);\n   *\n   * @method Collection#skip\n   * @since 3.0.0\n   * @param {number} num The number of records to skip.\n   * @returns {Array} The result.\n   */\n  skip (num) {\n    return this.query()\n      .skip(num)\n      .run()\n  }\n\n  /**\n   * Return the plain JSON representation of all items in this collection.\n   * Assumes records in this collection have a toJSON method.\n   *\n   * @method Collection#toJSON\n   * @since 3.0.0\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the representation.\n   * @returns {Array} The records.\n   */\n  toJSON (opts?) {\n    return this.mapCall('toJSON', opts)\n  }\n\n  /**\n   * Return all \"unsaved\" (not uniquely identifiable) records in this colleciton.\n   *\n   * @method Collection#unsaved\n   * @since 3.0.0\n   * @returns {Array} The unsaved records, if any.\n   */\n  unsaved (opts?) {\n    return this.index.get()\n  }\n\n  /**\n   * Update a record's position in a single index of this collection. See\n   * {@link Collection#updateIndexes} to update a record's position in all\n   * indexes at once.\n   *\n   * @method Collection#updateIndex\n   * @since 3.0.0\n   * @param {object} record The record to update.\n   * @param {object} [opts] Configuration options.\n   * @param {string} [opts.index] The index in which to update the record's\n   * position. If you don't specify an index then the record will be updated\n   * in the main index.\n   */\n  updateIndex (record, opts: { index?: string } = {}) {\n    this.getIndex(opts.index).updateRecord(record)\n  }\n\n  /**\n   * Updates all indexes in this collection for the provided record. Has no\n   * effect if the record is not in the collection.\n   *\n   * @method Collection#updateIndexes\n   * @since 3.0.0\n   * @param {object} record TODO\n   */\n  updateIndexes (record) {\n    this.index.updateRecord(record)\n    utils.forOwn(this.indexes, index => index.updateRecord(record))\n  }\n}\n\n/**\n * Fired when a record changes. Only works for records that have tracked changes.\n * See {@link Collection~changeListener} on how to listen for this event.\n *\n * @event Collection#change\n * @see Collection~changeListener\n */\n\n/**\n * Callback signature for the {@link Collection#event:change} event.\n *\n * @example\n * function onChange (record, changes) {\n *   // do something\n * }\n * collection.on('change', onChange);\n *\n * @callback Collection~changeListener\n * @param {Record} The Record that changed.\n * @param {object} The changes.\n * @see Collection#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the Collection. See\n * {@link Collection~addListener} on how to listen for this event.\n *\n * @event Collection#add\n * @see Collection~addListener\n * @see Collection#event:add\n * @see Collection#add\n */\n\n/**\n * Callback signature for the {@link Collection#event:add} event.\n *\n * @example\n * function onAdd (recordOrRecords) {\n *   // do something\n * }\n * collection.on('add', onAdd);\n *\n * @callback Collection~addListener\n * @param {Record|Record[]} The Record or Records that were added.\n * @see Collection#event:add\n * @see Collection#add\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the Collection. See\n * {@link Collection~removeListener} for how to listen for this event.\n *\n * @event Collection#remove\n * @see Collection~removeListener\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n */\n\n/**\n * Callback signature for the {@link Collection#event:remove} event.\n *\n * @example\n * function onRemove (recordsOrRecords) {\n *   // do something\n * }\n * collection.on('remove', onRemove);\n *\n * @callback Collection~removeListener\n * @param {Record|Record[]} Record or Records that were removed.\n * @see Collection#event:remove\n * @see Collection#remove\n * @see Collection#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this Collection:\n * @example <caption>Collection.extend</caption>\n * const JSData = require('js-data');\n * const { Collection } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomCollectionClass extends Collection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customCollection = new CustomCollectionClass();\n * console.log(customCollection.foo());\n * console.log(CustomCollectionClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherCollectionClass = Collection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherCollection = new OtherCollectionClass();\n * console.log(otherCollection.foo());\n * console.log(OtherCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherCollectionClass () {\n *   Collection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Collection.extend({\n *   constructor: AnotherCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherCollection = new AnotherCollectionClass();\n * console.log(anotherCollection.created_at);\n * console.log(anotherCollection.foo());\n * console.log(AnotherCollectionClass.beep());\n *\n * @method Collection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Collection class.\n * @since 3.0.0\n */\n","export class TsDataError extends Error {\n  errors: any;\n}\n","import utils from './utils'\nimport Component from './Component'\nimport { TsDataError } from './TsDataError'\n\nconst DOMAIN = 'Schema'\n\n/**\n * A function map for each of the seven primitive JSON types defined by the core specification.\n * Each function will check a given value and return true or false if the value is an instance of that type.\n * ```\n *   types.integer(1) // returns true\n *   types.string({}) // returns false\n * ```\n * http://json-schema.org/latest/json-schema-core.html#anchor8\n * @name Schema.types\n * @type {object}\n */\nconst types = {\n  array: utils.isArray,\n  boolean: utils.isBoolean,\n  integer: utils.isInteger,\n  null: utils.isNull,\n  number: utils.isNumber,\n  object: utils.isObject,\n  string: utils.isString\n}\n\n/**\n * @ignore\n */\nfunction segmentToString (segment, prev) {\n  let str = ''\n  if (segment) {\n    if (utils.isNumber(segment)) {\n      str += `[${segment}]`\n    } else if (prev) {\n      str += `.${segment}`\n    } else {\n      str += `${segment}`\n    }\n  }\n  return str\n}\n\n/**\n * @ignore\n */\nfunction makePath (opts: any = {}) {\n  let path = ''\n  const segments = opts.path || []\n  segments.forEach(segment => {\n    path += segmentToString(segment, path)\n  })\n  path += segmentToString(opts.prop, path)\n  return path\n}\n\n/**\n * @ignore\n */\nfunction makeError (actual, expected, opts) {\n  return {\n    expected,\n    actual: '' + actual,\n    path: makePath(opts)\n  }\n}\n\n/**\n * @ignore\n */\nfunction addError (actual, expected, opts, errors) {\n  errors.push(makeError(actual, expected, opts))\n}\n\n/**\n * @ignore\n */\nfunction maxLengthCommon (keyword, value, schema, opts) {\n  const max = schema[keyword]\n  if (value.length > max) {\n    return makeError(value.length, `length no more than ${max}`, opts)\n  }\n}\n\n/**\n * @ignore\n */\nfunction minLengthCommon (keyword, value, schema, opts) {\n  const min = schema[keyword]\n  if (value.length < min) {\n    return makeError(value.length, `length no less than ${min}`, opts)\n  }\n}\n\n/**\n * A map of all object member validation functions for each keyword defined in the JSON Schema.\n * @name Schema.validationKeywords\n * @type {object}\n */\nconst validationKeywords = {\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `allOf` keyword.\n   * The instance is valid against if and only if it is valid against all the schemas declared in the Schema's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be a valid JSON Schema.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor82\n   *\n   * @name Schema.validationKeywords.allOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `allOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  allOf (value, schema, opts) {\n    let allErrors = []\n    schema.allOf.forEach(_schema => {\n      allErrors = allErrors.concat(validate(value, _schema, opts) || [])\n    })\n    return allErrors.length ? allErrors : undefined\n  },\n\n  /**\n   * Validates the provided value against all schemas defined in the Schemas `anyOf` keyword.\n   * The instance is valid against this keyword if and only if it is valid against\n   * at least one of the schemas in this keyword's value.\n   *\n   * The value of this keyword MUST be an array. This array MUST have at least one element.\n   * Each element of this array MUST be an object, and each object MUST be a valid JSON Schema.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor85\n   *\n   * @name Schema.validationKeywords.anyOf\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `anyOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  anyOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.anyOf.forEach(_schema => {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * http://json-schema.org/latest/json-schema-validation.html#anchor70\n   *\n   * @name Schema.validationKeywords.dependencies\n   * @method\n   * @param {*} value TODO\n   * @param {object} schema TODO\n   * @param {object} opts TODO\n   */\n  dependencies (value, schema, opts) {\n    // TODO\n  },\n\n  /**\n   * Validates the provided value against an array of possible values defined by the Schema's `enum` keyword\n   * Validation succeeds if the value is deeply equal to one of the values in the array.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor76\n   *\n   * @name Schema.validationKeywords.enum\n   * @method\n   * @param {*} value Value to validate\n   * @param {object} schema Schema containing the `enum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  enum (value, schema, opts) {\n    const possibleValues = schema.enum\n    if (utils.findIndex(possibleValues, item => utils.deepEqual(item, value)) === -1) {\n      return makeError(value, `one of (${possibleValues.join(', ')})`, opts)\n    }\n  },\n\n  /**\n   * Validates each of the provided array values against a schema or an array of schemas defined by the Schema's\n   * `items` keyword\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor37 for validation rules.\n   *\n   * @name Schema.validationKeywords.items\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the items keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  items (value, schema, opts: any = {}) {\n    // TODO: additionalItems\n    let items = schema.items\n    let errors = []\n    const checkingTuple = utils.isArray(items)\n    const length = value.length\n    for (let prop = 0; prop < length; prop++) {\n      if (checkingTuple) {\n        // Validating a tuple, instead of just checking each item against the\n        // same schema\n        items = schema.items[prop]\n      }\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], items, opts) || [])\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided number against a maximum value defined by the Schema's `maximum` keyword\n   * Validation succeeds if the value is a number, and is less than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor17\n   *\n   * @name Schema.validationKeywords.maximum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `maximum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maximum (value, schema, opts) {\n    // Must be a number\n    const maximum = schema.maximum\n    // Must be a boolean\n    // Depends on maximum\n    // default: false\n    const exclusiveMaximum = schema.exclusiveMaximum\n    if (typeof value === typeof maximum && !(exclusiveMaximum ? maximum > value : maximum >= value)) {\n      return exclusiveMaximum\n        ? makeError(value, `no more than nor equal to ${maximum}`, opts)\n        : makeError(value, `no more than ${maximum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a maximum value defined by the Schema's `maxItems` keyword.\n   * Validation succeeds if the length of the array is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor42\n   *\n   * @name Schema.validationKeywords.maxItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `maxItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return maxLengthCommon('maxItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a maximum value defined in the Schema's `maxLength` keyword.\n   * Validation succeeds if the length of the string is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor26\n   *\n   * @name Schema.validationKeywords.maxLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `maxLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxLength (value, schema, opts) {\n    return maxLengthCommon('maxLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a maximum value defined in the Schema's\n   * `maxProperties` keyword.\n   * Validation succeeds if the object's property count is less than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor54\n   *\n   * @name Schema.validationKeywords.maxProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `maxProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  maxProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const maxProperties = schema.maxProperties\n    const length = Object.keys(value).length\n    if (length > maxProperties) {\n      return makeError(length, `no more than ${maxProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided value against a minimum value defined by the Schema's `minimum` keyword\n   * Validation succeeds if the value is a number and is greater than, or equal to, the value of this keyword.\n   * http://json-schema.org/latest/json-schema-validation.html#anchor21\n   *\n   * @name Schema.validationKeywords.minimum\n   * @method\n   * @param {*} value Number to validate against the keyword.\n   * @param {object} schema Schema containing the `minimum` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minimum (value, schema, opts) {\n    // Must be a number\n    const minimum = schema.minimum\n    // Must be a boolean\n    // Depends on minimum\n    // default: false\n    const exclusiveMinimum = schema.exclusiveMinimum\n    if (typeof value === typeof minimum && !(exclusiveMinimum ? value > minimum : value >= minimum)) {\n      return exclusiveMinimum\n        ? makeError(value, `no less than nor equal to ${minimum}`, opts)\n        : makeError(value, `no less than ${minimum}`, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided array against a minimum value defined by the Schema's `minItems` keyword.\n   * Validation succeeds if the length of the array is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor45\n   *\n   * @name Schema.validationKeywords.minItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `minItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minItems (value, schema, opts) {\n    if (utils.isArray(value)) {\n      return minLengthCommon('minItems', value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the length of the provided string against a minimum value defined in the Schema's `minLength` keyword.\n   * Validation succeeds if the length of the string is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor29\n   *\n   * @name Schema.validationKeywords.minLength\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `minLength` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minLength (value, schema, opts) {\n    return minLengthCommon('minLength', value, schema, opts)\n  },\n\n  /**\n   * Validates the count of the provided object's properties against a minimum value defined in the Schema's\n   * `minProperties` keyword.\n   * Validation succeeds if the object's property count is greater than, or equal to the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor57\n   *\n   * @name Schema.validationKeywords.minProperties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `minProperties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  minProperties (value, schema, opts) {\n    // validate only objects\n    if (!utils.isObject(value)) return\n    const minProperties = schema.minProperties\n    const length = Object.keys(value).length\n    if (length < minProperties) {\n      return makeError(length, `no more than ${minProperties} properties`, opts)\n    }\n  },\n\n  /**\n   * Validates the provided number is a multiple of the number defined in the Schema's `multipleOf` keyword.\n   * Validation succeeds if the number can be divided equally into the value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor14\n   *\n   * @name Schema.validationKeywords.multipleOf\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing the `multipleOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  multipleOf (value, schema, opts) {\n    const multipleOf = schema.multipleOf\n    if (utils.isNumber(value)) {\n      if ((value / multipleOf) % 1 !== 0) {\n        return makeError(value, `multipleOf ${multipleOf}`, opts)\n      }\n    }\n  },\n\n  /**\n   * Validates the provided value is not valid with any of the schemas defined in the Schema's `not` keyword.\n   * An instance is valid against this keyword if and only if it is NOT valid against the schemas in this keyword's\n   * value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor91\n   * @name Schema.validationKeywords.not\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the not keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  not (value, schema, opts) {\n    if (!validate(value, schema.not, opts)) {\n      // TODO: better messaging\n      return makeError('succeeded', 'should have failed', opts)\n    }\n  },\n\n  /**\n   * Validates the provided value is valid with one and only one of the schemas defined in the Schema's `oneOf` keyword.\n   * An instance is valid against this keyword if and only if it is valid against a single schemas in this keyword's\n   * value.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor88\n   * @name Schema.validationKeywords.oneOf\n   * @method\n   * @param {*} value to be checked.\n   * @param {object} schema Schema containing the `oneOf` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  oneOf (value, schema, opts) {\n    let validated = false\n    let allErrors = []\n    schema.oneOf.forEach(_schema => {\n      const errors = validate(value, _schema, opts)\n      if (errors) {\n        allErrors = allErrors.concat(errors)\n      } else if (validated) {\n        allErrors = [makeError('valid against more than one', 'valid against only one', opts)]\n        validated = false\n        return false\n      } else {\n        validated = true\n      }\n    })\n    return validated ? undefined : allErrors\n  },\n\n  /**\n   * Validates the provided string matches a pattern defined in the Schema's `pattern` keyword.\n   * Validation succeeds if the string is a match of the regex value of this keyword.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor33\n   * @name Schema.validationKeywords.pattern\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing the `pattern` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  pattern (value, schema, opts) {\n    const pattern = schema.pattern\n    if (utils.isString(value) && !value.match(pattern)) {\n      return makeError(value, pattern, opts)\n    }\n  },\n\n  /**\n   * Validates the provided object's properties against a map of values defined in the Schema's `properties` keyword.\n   * Validation succeeds if the object's property are valid with each of the schema's in the provided map.\n   * Validation also depends on the additionalProperties and or patternProperties.\n   *\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor64 for more info.\n   *\n   * @name Schema.validationKeywords.properties\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `properties` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  properties (value, schema, opts: any = {}) {\n    if (utils.isArray(value)) {\n      return\n    }\n\n    // Can be a boolean or an object\n    // Technically the default is an \"empty schema\", but here \"true\" is\n    // functionally the same\n    const additionalProperties = schema.additionalProperties === undefined ? true : schema.additionalProperties\n    const validated = []\n    // \"p\": The property set from \"properties\".\n    // Default is an object\n    const properties = schema.properties || {}\n    // \"pp\": The property set from \"patternProperties\".\n    // Default is an object\n    const patternProperties = schema.patternProperties || {}\n    let errors = []\n\n    utils.forOwn(properties, (_schema, prop) => {\n      opts.prop = prop\n      errors = errors.concat(validate(value[prop], _schema, opts) || [])\n      validated.push(prop)\n    })\n\n    const toValidate = utils.omit(value, validated)\n    utils.forOwn(patternProperties, (_schema, pattern) => {\n      utils.forOwn(toValidate, (undef, prop) => {\n        if (prop.match(pattern)) {\n          opts.prop = prop\n          errors = errors.concat(validate(value[prop], _schema, opts) || [])\n          validated.push(prop)\n        }\n      })\n    })\n    const keys = Object.keys(utils.omit(value, validated))\n    // If \"s\" is not empty, validation fails\n    if (additionalProperties === false) {\n      if (keys.length) {\n        const origProp = opts.prop\n        opts.prop = ''\n        addError(`extra fields: ${keys.join(', ')}`, 'no extra fields', opts, errors)\n        opts.prop = origProp\n      }\n    } else if (utils.isObject(additionalProperties)) {\n      // Otherwise, validate according to provided schema\n      keys.forEach(prop => {\n        opts.prop = prop\n        errors = errors.concat(validate(value[prop], additionalProperties, opts) || [])\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided object's has all properties listed in the Schema's `properties` keyword array.\n   * Validation succeeds if the object contains all properties provided in the array value of this keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor61\n   *\n   * @name Schema.validationKeywords.required\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing the `required` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  required (value, schema, opts: any = {}) {\n    const required = schema.required\n    const errors = []\n    if (!opts.existingOnly) {\n      required.forEach(prop => {\n        if (utils.get(value, prop) === undefined) {\n          const prevProp = opts.prop\n          opts.prop = prop\n          addError(undefined, 'a value', opts, errors)\n          opts.prop = prevProp\n        }\n      })\n    }\n    return errors.length ? errors : undefined\n  },\n\n  /**\n   * Validates the provided value's type is equal to the type, or array of types, defined in the Schema's `type`\n   * keyword.\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor79\n   *\n   * @name Schema.validationKeywords.type\n   * @method\n   * @param {*} value Value to be validated.\n   * @param {object} schema Schema containing the `type` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  type (value, schema, opts) {\n    let type = schema.type\n    let validType\n    // Can be one of several types\n    if (utils.isString(type)) {\n      type = [type]\n    }\n    // Try to match the value against an expected type\n    type.forEach(_type => {\n      // TODO: throw an error if type is not defined\n      if (types[_type](value, schema, opts)) {\n        // Matched a type\n        validType = _type\n        return false\n      }\n    })\n    // Value did not match any expected type\n    if (!validType) {\n      return makeError(\n        value !== undefined && value !== null ? typeof value : '' + value,\n        `one of (${type.join(', ')})`,\n        opts\n      )\n    }\n    // Run keyword validators for matched type\n    // http://json-schema.org/latest/json-schema-validation.html#anchor12\n    const validator = typeGroupValidators[validType]\n    if (validator) {\n      return validator(value, schema, opts)\n    }\n  },\n\n  /**\n   * Validates the provided array values are unique.\n   * Validation succeeds if the items in the array are unique, but only if the value of this keyword is true\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor49\n   *\n   * @name Schema.validationKeywords.uniqueItems\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing the `uniqueItems` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  uniqueItems (value, schema, opts) {\n    if (value?.length && schema.uniqueItems) {\n      const length = value.length\n      let item, i, j\n      // Check n - 1 items\n      for (i = length - 1; i > 0; i--) {\n        item = value[i]\n        // Only compare against unchecked items\n        for (j = i - 1; j >= 0; j--) {\n          // Found a duplicate\n          if (utils.deepEqual(item, value[j])) {\n            return makeError(item, 'no duplicates', opts)\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * @ignore\n */\nfunction runOps (ops, value, schema, opts) {\n  let errors = []\n  ops.forEach(op => {\n    if (schema[op] !== undefined) {\n      errors = errors.concat(validationKeywords[op](value, schema, opts) || [])\n    }\n  })\n  return errors.length ? errors : undefined\n}\n\n/**\n * Validation keywords validated for any type:\n *\n * - `enum`\n * - `type`\n * - `allOf`\n * - `anyOf`\n * - `oneOf`\n * - `not`\n *\n * @name Schema.ANY_OPS\n * @type {string[]}\n */\nconst ANY_OPS = ['enum', 'type', 'allOf', 'anyOf', 'oneOf', 'not']\n\n/**\n * Validation keywords validated for array types:\n *\n * - `items`\n * - `maxItems`\n * - `minItems`\n * - `uniqueItems`\n *\n * @name Schema.ARRAY_OPS\n * @type {string[]}\n */\nconst ARRAY_OPS = ['items', 'maxItems', 'minItems', 'uniqueItems']\n\n/**\n * Validation keywords validated for numeric (number and integer) types:\n *\n * - `multipleOf`\n * - `maximum`\n * - `minimum`\n *\n * @name Schema.NUMERIC_OPS\n * @type {string[]}\n */\nconst NUMERIC_OPS = ['multipleOf', 'maximum', 'minimum']\n\n/**\n * Validation keywords validated for object types:\n *\n * - `maxProperties`\n * - `minProperties`\n * - `required`\n * - `properties`\n * - `dependencies`\n *\n * @name Schema.OBJECT_OPS\n * @type {string[]}\n */\nconst OBJECT_OPS = ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n\n/**\n * Validation keywords validated for string types:\n *\n * - `maxLength`\n * - `minLength`\n * - `pattern`\n *\n * @name Schema.STRING_OPS\n * @type {string[]}\n */\nconst STRING_OPS = ['maxLength', 'minLength', 'pattern']\n\n/**\n * http://json-schema.org/latest/json-schema-validation.html#anchor75\n * @ignore\n */\nconst validateAny = (value, schema, opts) => runOps(ANY_OPS, value, schema, opts)\n\n/**\n * Validates the provided value against a given Schema according to the http://json-schema.org/ v4 specification.\n *\n * @name Schema.validate\n * @method\n * @param {*} value Value to be validated.\n * @param {object} schema Valid Schema according to the http://json-schema.org/ v4 specification.\n * @param {object} [opts] Configuration options.\n * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n */\nconst validate = (value, schema, opts: any = {}) => {\n  let errors = []\n  opts.ctx = opts.ctx || { value, schema }\n  let shouldPop\n  const prevProp = opts.prop\n  if (schema === undefined) {\n    return\n  }\n  if (!utils.isObject(schema)) {\n    throw utils.err(`${DOMAIN}#validate`)(500, `Invalid schema at path: \"${opts.path}\"`)\n  }\n  if (opts.path === undefined) {\n    opts.path = []\n  }\n  // Track our location as we recurse\n  if (opts.prop !== undefined) {\n    shouldPop = true\n    opts.path.push(opts.prop)\n    opts.prop = undefined\n  }\n  // Validate against parent schema\n  if (schema.extends) {\n    // opts.path = path\n    // opts.prop = prop\n    if (utils.isFunction(schema.extends.validate)) {\n      errors = errors.concat(schema.extends.validate(value, opts) || [])\n    } else {\n      errors = errors.concat(validate(value, schema.extends, opts) || [])\n    }\n  }\n  if (value === undefined) {\n    // Check if property is required\n    if (schema.required === true && !opts.existingOnly) {\n      addError(value, 'a value', opts, errors)\n    }\n    if (shouldPop) {\n      opts.path.pop()\n      opts.prop = prevProp\n    }\n    return errors.length ? errors : undefined\n  }\n\n  errors = errors.concat(validateAny(value, schema, opts) || [])\n  if (shouldPop) {\n    opts.path.pop()\n    opts.prop = prevProp\n  }\n  return errors.length ? errors : undefined\n}\n\n// These strings are cached for optimal performance of the change detection\n// boolean - Whether a Record is changing in the current execution frame\nconst changingPath = 'changing'\n// string[] - Properties that have changed in the current execution frame\nconst changedPath = 'changed'\n// Object[] - History of change records\nconst changeHistoryPath = 'history'\n// boolean - Whether a Record is currently being instantiated\nconst creatingPath = 'creating'\n// number - The setTimeout change event id of a Record, if any\nconst eventIdPath = 'eventId'\n// boolean - Whether to skip validation for a Record's currently changing property\nconst noValidatePath = 'noValidate'\n// boolean - Whether to preserve Change History for a Record\nconst keepChangeHistoryPath = 'keepChangeHistory'\n// boolean - Whether to skip change notification for a Record's currently\n// changing property\nconst silentPath = 'silent'\nconst validationFailureMsg = 'validation failed'\n\n/**\n * A map of validation functions grouped by type.\n *\n * @name Schema.typeGroupValidators\n * @type {object}\n */\nconst typeGroupValidators = {\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an\n   * array.\n   * The validation keywords for the type `array` are:\n   * ```\n   * ['items', 'maxItems', 'minItems', 'uniqueItems']\n   * ```\n   * see http://json-schema.org/latest/json-schema-validation.html#anchor25\n   *\n   * @name Schema.typeGroupValidators.array\n   * @method\n   * @param {*} value Array to be validated.\n   * @param {object} schema Schema containing at least one array keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  array: (value, schema, opts?) => runOps(ARRAY_OPS, value, schema, opts),\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an\n   * integer.\n   * The validation keywords for the type `integer` are:\n   * ```\n   * ['multipleOf', 'maximum', 'minimum']\n   * ```\n   * @name Schema.typeGroupValidators.integer\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `integer` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  integer: (value, schema, opts) =>\n    // Additional validations for numerics are the same\n    typeGroupValidators.numeric(value, schema, opts),\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an\n   * number.\n   * The validation keywords for the type `number` are:\n   * ```\n   * ['multipleOf', 'maximum', 'minimum']\n   * ```\n   * @name Schema.typeGroupValidators.number\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `number` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  number: (value, schema, opts) =>\n    // Additional validations for numerics are the same\n    typeGroupValidators.numeric(value, schema, opts),\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of a\n   * number or integer.\n   * The validation keywords for the type `numeric` are:\n   * ```\n   * ['multipleOf', 'maximum', 'minimum']\n   * ```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor13.\n   *\n   * @name Schema.typeGroupValidators.numeric\n   * @method\n   * @param {*} value Number to be validated.\n   * @param {object} schema Schema containing at least one `numeric` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  numeric: (value, schema, opts) => runOps(NUMERIC_OPS, value, schema, opts),\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an\n   * object.\n   * The validation keywords for the type `object` are:\n   * ```\n   * ['maxProperties', 'minProperties', 'required', 'properties', 'dependencies']\n   * ```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor53.\n   *\n   * @name Schema.typeGroupValidators.object\n   * @method\n   * @param {*} value Object to be validated.\n   * @param {object} schema Schema containing at least one `object` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  object: (value, schema, opts) => runOps(OBJECT_OPS, value, schema, opts),\n\n  /**\n   * Validates the provided value against the schema using all of the validation keywords specific to instances of an\n   * string.\n   * The validation keywords for the type `string` are:\n   * ```\n   * ['maxLength', 'minLength', 'pattern']\n   * ```\n   * See http://json-schema.org/latest/json-schema-validation.html#anchor25.\n   *\n   * @name Schema.typeGroupValidators.string\n   * @method\n   * @param {*} value String to be validated.\n   * @param {object} schema Schema containing at least one `string` keyword.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  string: (value, schema, opts?) => runOps(STRING_OPS, value, schema, opts)\n}\n\nexport interface PropertyDefinition {\n  type: string | string[]\n  track?: boolean\n  description?: string\n  indexed?: boolean\n  items?: PropertyDefinition\n  minItems?: number\n  uniqueItems?: boolean\n  extends?: Schema\n  get?: Function\n  properties?: { [name: string]: PropertyDefinition }\n  required?: string[] | boolean\n  maximum?: number\n  exclusiveMaximum?: boolean\n  minimum?: number\n  exclusiveMinimum?: boolean\n  additionalProperties?: boolean\n}\n\nexport interface SchemaDefinition {\n  type?: string\n  description?: string\n  $schema?: string\n  title?: string\n  properties?: { [name: string]: PropertyDefinition | any }\n  extends?: SchemaDefinition | Schema\n  items?: SchemaDefinition | Schema\n  track?: boolean\n  additionalProperties?\n  required?: string[]\n}\n\n/**\n * js-data's Schema class.\n *\n * @example <caption>Schema#constructor</caption>\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const PostSchema = new Schema({\n *   type: 'object',\n *   properties: {\n *     title: { type: 'string' }\n *   }\n * });\n * PostSchema.validate({ title: 1234 });\n *\n * @example\n * const JSData = require('js-data');\n * const { Schema } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * class CustomSchemaClass extends Schema {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSchema = new CustomSchemaClass();\n * console.log(customSchema.foo());\n * console.log(CustomSchemaClass.beep());\n *\n * @class Schema\n * @extends Component\n * @param {object} definition Schema definition according to json-schema.org\n */\nexport default class Schema extends Component {\n  type: string;\n  properties: any;\n  private readonly extends: Schema;\n  private readonly items: Schema;\n  private readonly track: any;\n  private readonly additionalProperties: any;\n\n  constructor (definition: SchemaDefinition = {}) {\n    super()\n    // TODO: schema validation\n    utils.fillIn(this, definition)\n\n    if (this.type === 'object') {\n      this.properties = this.properties || {}\n      utils.forOwn(this.properties, (_definition, prop) => {\n        if (!(_definition instanceof Schema)) {\n          this.properties[prop] = new Schema(_definition)\n        }\n      })\n    } else if (this.type === 'array' && this.items && !(this.items instanceof Schema)) {\n      this.items = new Schema(this.items)\n    }\n    if (this.extends && !(this.extends instanceof Schema)) {\n      this.extends = new Schema(this.extends)\n    }\n    ['allOf', 'anyOf', 'oneOf'].forEach(validationKeyword => {\n      if (this[validationKeyword]) {\n        this[validationKeyword].forEach((_definition, i) => {\n          if (!(_definition instanceof Schema)) {\n            this[validationKeyword][i] = new Schema(_definition)\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * This adds ES5 getters/setters to the target based on the \"properties\" in\n   * this Schema, which makes possible change tracking and validation on\n   * property assignment.\n   *\n   * @name Schema#apply\n   * @method\n   * @param {object} target The prototype to which to apply this schema.\n   * @param opts\n   */\n  apply (target, opts: any = {}) {\n    opts.getter = opts.getter || '_get'\n    opts.setter = opts.setter || '_set'\n    opts.unsetter = opts.unsetter || '_unset'\n    opts.track = opts.track || this.track\n    const properties = this.properties || {}\n    utils.forOwn(properties, (schema, prop) => {\n      Object.defineProperty(target, prop, this.makeDescriptor(prop, schema, opts))\n    })\n  }\n\n  /**\n   * Apply default values to the target object for missing values.\n   *\n   * @name Schema#applyDefaults\n   * @method\n   * @param {object} target The target to which to apply values for missing values.\n   */\n  applyDefaults (target) {\n    if (!target) {\n      return\n    }\n    const properties = this.properties || {}\n    const hasSet = utils.isFunction(target.set) || utils.isFunction(target._set)\n    utils.forOwn(properties, (schema, prop) => {\n      if (schema.hasOwnProperty('default') && utils.get(target, prop) === undefined) {\n        if (hasSet) {\n          target.set(prop, utils.plainCopy(schema.default), { silent: true })\n        } else {\n          utils.set(target, prop, utils.plainCopy(schema.default))\n        }\n      }\n      if (schema.type === 'object' && schema.properties) {\n        if (hasSet) {\n          const orig = target._get('noValidate')\n          target._set('noValidate', true)\n          utils.set(target, prop, utils.get(target, prop) || {}, { silent: true })\n          target._set('noValidate', orig)\n        } else {\n          utils.set(target, prop, utils.get(target, prop) || {})\n        }\n        schema.applyDefaults(utils.get(target, prop))\n      }\n    })\n  }\n\n  /**\n   * Assemble a property descriptor for tracking and validating changes to\n   * a property according to the given schema. This method is called when\n   * {@link Mapper#applySchema} is set to `true`.\n   *\n   * @name Schema#makeDescriptor\n   * @method\n   * @param {string} prop The property name.\n   * @param {(Schema|object)} schema The schema for the property.\n   * @param {object} [opts] Optional configuration.\n   * @param {function} [opts.getter] Custom getter function.\n   * @param {function} [opts.setter] Custom setter function.\n   * @param {function} [opts.track] Whether to track changes.\n   * @returns {object} A property descriptor for the given schema.\n   */\n  makeDescriptor (prop, schema, opts) {\n    const descriptor: any = {\n      // Better to allow configurability, but at the user's own risk\n      configurable: true,\n      // These properties are enumerable by default, but regardless of their\n      // enumerability, they won't be \"own\" properties of individual records\n      enumerable: schema.enumerable === undefined ? true : !!schema.enumerable,\n      get () {\n        return this._get(keyPath)\n      },\n      set (value) {\n        // These are accessed a lot\n        const _get = this[getter]\n        const _set = this[setter]\n        const _unset = this[unsetter]\n        // Optionally check that the new value passes validation\n        if (!_get(noValidatePath)) {\n          const errors = schema.validate(value, { path: [prop] })\n          if (errors) {\n            // Immediately throw an error, preventing the record from getting into\n            // an invalid state\n            const error = new TsDataError(validationFailureMsg)\n            error.errors = errors\n            throw error\n          }\n        }\n        // TODO: Make it so tracking can be turned on for all properties instead of\n        // only per-property\n        if (track && !_get(creatingPath)) {\n          // previous is versioned on database commit\n          // props are versioned on set()\n          const previous = _get(previousPath)\n          const current = _get(keyPath)\n          let changing = _get(changingPath)\n          let changed = _get(changedPath)\n\n          if (!changing) {\n            // Track properties that are changing in the current event loop\n            changed = []\n          }\n\n          // Add changing properties to this array once at most\n          const index = changed.indexOf(prop)\n          if (current !== value && index === -1) {\n            changed.push(prop)\n          }\n          if (previous === value) {\n            if (index >= 0) {\n              changed.splice(index, 1)\n            }\n          }\n          // No changes in current event loop\n          if (!changed.length) {\n            changing = false\n            _unset(changingPath)\n            _unset(changedPath)\n            // Cancel pending change event\n            if (_get(eventIdPath)) {\n              clearTimeout(_get(eventIdPath))\n              _unset(eventIdPath)\n            }\n          }\n          // Changes detected in current event loop\n          if (!changing && changed.length) {\n            _set(changedPath, changed)\n            _set(changingPath, true)\n            // Saving the timeout id allows us to batch all changes in the same\n            // event loop into a single \"change\"\n            // TODO: Optimize\n            _set(\n              eventIdPath,\n              setTimeout(() => {\n                // Previous event loop where changes were gathered has ended, so\n                // notify any listeners of those changes and prepare for any new\n                // changes\n                _unset(changedPath)\n                _unset(eventIdPath)\n                _unset(changingPath)\n                // TODO: Optimize\n                if (!_get(silentPath)) {\n                  let i\n                  for (i = 0; i < changed.length; i++) {\n                    this.emit('change:' + changed[i], this, utils.get(this, changed[i]))\n                  }\n\n                  const changes = utils.diffObjects({ [prop]: value }, { [prop]: current })\n\n                  if (_get(keepChangeHistoryPath)) {\n                    const changeRecord = utils.plainCopy(changes)\n                    changeRecord.timestamp = new Date().getTime()\n                    let changeHistory = _get(changeHistoryPath)\n                    if (!changeHistory) _set(changeHistoryPath, (changeHistory = []))\n                    changeHistory.push(changeRecord)\n                  }\n                  this.emit('change', this, changes)\n                }\n                _unset(silentPath)\n              }, 0)\n            )\n          }\n        }\n        _set(keyPath, value)\n        return value\n      }\n    }\n    // Cache a few strings for optimal performance\n    const keyPath = `props.${prop}`\n    const previousPath = `previous.${prop}`\n    const getter = opts.getter\n    const setter = opts.setter\n    const unsetter = opts.unsetter\n    const track = utils.isBoolean(opts.track) ? opts.track : schema.track\n\n    if (utils.isFunction(schema.get)) {\n      const originalGet = descriptor.get\n      descriptor.get = function () {\n        return schema.get.call(this, originalGet)\n      }\n    }\n\n    if (utils.isFunction(schema.set)) {\n      const originalSet = descriptor.set\n      descriptor.set = function (value) {\n        return schema.set.call(this, value, originalSet)\n      }\n    }\n\n    return descriptor\n  }\n\n  /**\n   * Create a copy of the given value that contains only the properties defined\n   * in this schema.\n   *\n   * @name Schema#pick\n   * @method\n   * @param {*} value The value to copy.\n   * @returns {*} The copy.\n   */\n  pick (value, opts?) {\n    if (value === undefined) {\n      return\n    }\n    if (this.type === 'object') {\n      const copy = {}\n      const properties = this.properties\n      if (properties) {\n        utils.forOwn(properties, (_definition, prop) => {\n          copy[prop] = _definition.pick(value[prop])\n        })\n      }\n      if (this.extends) {\n        utils.fillIn(copy, this.extends.pick(value))\n      }\n      // Conditionally copy properties not defined in \"properties\"\n      if (this.additionalProperties) {\n        for (const key in value) {\n          if (!properties[key]) {\n            copy[key] = utils.plainCopy(value[key])\n          }\n        }\n      }\n      return copy\n    } else if (this.type === 'array') {\n      return value.map(item => {\n        const _copy = this.items ? this.items.pick(item) : {}\n        if (this.extends) {\n          utils.fillIn(_copy, this.extends.pick(item))\n        }\n        return _copy\n      })\n    }\n    return utils.plainCopy(value)\n  }\n\n  /**\n   * Validate the provided value against this schema.\n   *\n   * @name Schema#validate\n   * @method\n   * @param {*} value Value to validate.\n   * @param {object} [opts] Configuration options.\n   * @returns {(array|undefined)} Array of errors or `undefined` if valid.\n   */\n  validate (value, opts?) {\n    return validate(value, this, opts)\n  }\n\n  static ANY_OPS = ANY_OPS;\n  static ARRAY_OPS = ARRAY_OPS;\n  static NUMERIC_OPS = NUMERIC_OPS;\n  static OBJECT_OPS = OBJECT_OPS;\n  static STRING_OPS = STRING_OPS;\n  static typeGroupValidators = typeGroupValidators;\n  static types = types;\n  static validate = validate;\n  static validationKeywords: any = validationKeywords;\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class BelongsToRelation extends Relation {\n  getForeignKey (record) {\n    return utils.get(record, this.foreignKey)\n  }\n\n  _setForeignKey (record, relatedRecord) {\n    utils.set(record, this.foreignKey, utils.get(relatedRecord, this.getRelation().idAttribute))\n  }\n\n  findExistingLinksFor (record) {\n    // console.log('\\tBelongsTo#findExistingLinksFor', record)\n    if (!record) {\n      return\n    }\n    const relatedId = utils.get(record, this.foreignKey)\n    if (relatedId !== undefined && relatedId !== null) {\n      return this.relatedCollection.get(relatedId)\n    }\n  }\n\n  isRequiresParentId () {\n    return true\n  }\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n\n    return this.createLinked(relationData, opts).then(record => {\n      this.setForeignKey(props, record)\n    })\n  }\n\n  createChildRecord () {\n    throw new Error('\"BelongsTo\" relation does not support child creation as it cannot have children.')\n  }\n\n  static TYPE_NAME = 'belongsTo';\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class HasManyRelation extends Relation {\n  foreignKeys: any;\n  localKeys: any;\n  validateOptions (related, opts) {\n    super.validateOptions(related, opts)\n\n    const { localKeys, foreignKeys, foreignKey } = opts\n\n    if (!foreignKey && !localKeys && !foreignKeys) {\n      throw utils.err('new Relation', 'opts.<foreignKey|localKeys|foreignKeys>')(400, 'string', foreignKey)\n    }\n  }\n\n  canFindLinkFor (record) {\n    const hasForeignKeys = this.foreignKey || this.foreignKeys\n    return !!(hasForeignKeys || (this.localKeys && utils.get(record, this.localKeys)))\n  }\n\n  linkRecord (record, relatedRecords) {\n    const relatedCollection = this.relatedCollection\n    const canAutoAddLinks = this.canAutoAddLinks\n    const foreignKey = this.foreignKey\n    const unsaved = this.relatedCollection.unsaved()\n\n    return relatedRecords.map(relatedRecord => {\n      const relatedId = relatedCollection.recordId(relatedRecord)\n\n      if (\n        (relatedId === undefined && unsaved.indexOf(relatedRecord) === -1) ||\n        relatedRecord !== relatedCollection.get(relatedId)\n      ) {\n        if (foreignKey) {\n          // TODO: slow, could be optimized? But user loses hook\n          this.setForeignKey(record, relatedRecord)\n        }\n        if (canAutoAddLinks) {\n          relatedRecord = relatedCollection.add(relatedRecord)\n        }\n      }\n\n      return relatedRecord\n    })\n  }\n\n  findExistingLinksFor (record) {\n    const id = utils.get(record, this.mapper.idAttribute)\n    const ids = this.localKeys ? utils.get(record, this.localKeys) : null\n    let records\n\n    if (id !== undefined && this.foreignKey) {\n      records = this.findExistingLinksByForeignKey(id)\n    } else if (this.localKeys && ids) {\n      records = this.findExistingLinksByLocalKeys(ids)\n    } else if (id !== undefined && this.foreignKeys) {\n      records = this.findExistingLinksByForeignKeys(id)\n    }\n\n    if (records?.length) {\n      return records\n    }\n  }\n\n  // e.g. user hasMany group via \"foreignKeys\", so find all users of a group\n  findExistingLinksByLocalKeys (ids) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.relatedCollection.mapper.idAttribute]: {\n          in: ids\n        }\n      }\n    })\n  }\n\n  // e.g. group hasMany user via \"localKeys\", so find all groups that own a user\n  findExistingLinksByForeignKeys (id) {\n    return this.relatedCollection.filter({\n      where: {\n        [this.foreignKeys]: {\n          contains: id\n        }\n      }\n    })\n  }\n\n  isRequiresParentId () {\n    return !!this.localKeys && this.localKeys.length > 0\n  }\n\n  isRequiresChildId () {\n    return !!this.foreignKey\n  }\n\n  createParentRecord (props, opts) {\n    const relationData = this.getLocalField(props)\n    const foreignIdField = this.getRelation().idAttribute\n\n    return this.createLinked(relationData, opts).then(records => {\n      utils.set(\n        props,\n        this.localKeys,\n        records.map(record => utils.get(record, foreignIdField))\n      )\n    })\n  }\n\n  createLinked (props, opts) {\n    return this.getRelation().createMany(props, opts)\n  }\n\n  static TYPE_NAME = 'hasMany';\n}\n","import utils from '../utils'\nimport { Relation } from '../Relation'\n\nexport class HasOneRelation extends Relation {\n  findExistingLinksFor (relatedMapper, record) {\n    const recordId = utils.get(record, relatedMapper.idAttribute)\n    const records = this.findExistingLinksByForeignKey(recordId)\n\n    if (records?.length) {\n      return records[0]\n    }\n  }\n\n  isRequiresChildId () {\n    return true\n  }\n\n  static TYPE_NAME = 'hasOne';\n}\n","import { Relation } from './Relation'\nimport { BelongsToRelation } from './Relation/BelongsTo'\nimport { HasManyRelation } from './Relation/HasMany'\nimport { HasOneRelation } from './Relation/HasOne';\n\n[BelongsToRelation, HasManyRelation, HasOneRelation].forEach(RelationType => {\n  Relation[RelationType.TYPE_NAME] = (related, options) => new RelationType(related, options)\n})\n\nexport { belongsToType, hasManyType, hasOneType, Relation } from './Relation'\n","import { Relation } from './relations'\n\nexport { belongsToType, hasManyType, hasOneType } from './relations'\n\n/**\n * BelongsTo relation decorator. You probably won't use this directly.\n *\n * @method\n * @param {Mapper} related The relation the target belongs to.\n * @param {object} opts Configuration options.\n * @param {string} opts.foreignKey The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport function belongsTo (related, opts) {\n  return mapper => {\n    Relation.belongsTo(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasMany relation decorator. You probably won't use this directly.\n *\n * @method\n * @param {Mapper} related The relation of which the target has many.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport function hasMany (related, opts) {\n  return mapper => {\n    Relation.hasMany(related, opts).assignTo(mapper)\n  }\n}\n\n/**\n * HasOne relation decorator. You probably won't use this directly.\n *\n * @method\n * @param {Mapper} related The relation of which the target has one.\n * @param {object} opts Configuration options.\n * @param {string} [opts.foreignKey] The field that holds the primary key of the\n * related record.\n * @param {string} opts.localField The field that holds a reference to the\n * related record object.\n * @returns {Function} Invocation function, which accepts the target as the only\n * parameter.\n */\nexport function hasOne (related, opts) {\n  return mapper => {\n    Relation.hasOne(related, opts).assignTo(mapper)\n  }\n}\n","import utils from './utils'\nimport Component from './Component'\nimport Record from './Record'\nimport Schema, { PropertyDefinition, SchemaDefinition } from './Schema'\nimport { Relation } from './Relation'\nimport { belongsTo, belongsToType, hasMany, hasManyType, hasOne, hasOneType } from './decorators'\nimport { TsDataError } from './TsDataError'\nimport { QueryDefinition } from './Query'\n\nconst DOMAIN = 'Mapper'\nconst applyDefaultsHooks = ['beforeCreate', 'beforeCreateMany']\nconst validatingHooks = ['beforeCreate', 'beforeCreateMany', 'beforeUpdate', 'beforeUpdateAll', 'beforeUpdateMany']\n\nfunction makeNotify (num) {\n  return function (...args) {\n    const opts = args[args.length - num]\n    const op = opts.op\n    this.dbg(op, ...args)\n\n    if (applyDefaultsHooks.indexOf(op) !== -1 && opts.applyDefaults !== false) {\n      const schema = this.getSchema()\n      if (schema?.applyDefaults) {\n        let toProcess = args[0]\n        if (!utils.isArray(toProcess)) {\n          toProcess = [toProcess]\n        }\n        toProcess.forEach(record => {\n          schema.applyDefaults(record)\n        })\n      }\n    }\n\n    // Automatic validation\n    if (validatingHooks.indexOf(op) !== -1 && !opts.noValidate) {\n      // Save current value of option\n      const originalExistingOnly = opts.existingOnly\n\n      // For updates, ignore required fields if they aren't present\n      if (op.indexOf('beforeUpdate') === 0 && opts.existingOnly === undefined) {\n        opts.existingOnly = true\n      }\n      const errors = this.validate(args[op === 'beforeUpdate' ? 1 : 0], utils.pick(opts, ['existingOnly']))\n\n      // Restore option\n      opts.existingOnly = originalExistingOnly\n\n      // Abort lifecycle due to validation errors\n      if (errors) {\n        const err = new TsDataError('validation failed')\n        err.errors = errors\n        return utils.reject(err)\n      }\n    }\n\n    // Emit lifecycle event\n    if (opts.notify || (opts.notify === undefined && this.notify)) {\n      setTimeout(() => {\n        this.emit(op, ...args)\n      })\n    }\n  }\n}\n\n// These are the default implementations of all of the lifecycle hooks\nconst notify = makeNotify(1)\nconst notify2 = makeNotify(2)\n\n// This object provides meta information used by Mapper#crud to actually\n// execute each lifecycle method\nconst LIFECYCLE_METHODS = {\n  count: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroy: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  destroyAll: {\n    defaults: [{}, {}],\n    skip: true,\n    types: []\n  },\n  find: {\n    defaults: [undefined, {}],\n    types: []\n  },\n  findAll: {\n    defaults: [{}, {}],\n    types: []\n  },\n  sum: {\n    defaults: [undefined, {}, {}],\n    skip: true,\n    types: []\n  },\n  update: {\n    adapterArgs (mapper, id, props, opts) {\n      return [id, mapper.toJSON(props, opts), opts]\n    },\n    beforeAssign: 1,\n    defaults: [undefined, {}, {}],\n    types: []\n  },\n  updateAll: {\n    adapterArgs (mapper, props, query, opts) {\n      return [mapper.toJSON(props, opts), query, opts]\n    },\n    beforeAssign: 0,\n    defaults: [{}, {}, {}],\n    types: []\n  },\n  updateMany: {\n    adapterArgs (mapper, records, opts) {\n      return [records.map(record => mapper.toJSON(record, opts)), opts]\n    },\n    beforeAssign: 0,\n    defaults: [[], {}],\n    types: []\n  }\n}\n\nexport interface MapperOpts {\n  name?: string\n\n  [customAttr: string]: any\n\n  endpoint?: string\n\n  onConflict?: 'skip'\n\n  relations?: any\n\n  type?: string\n\n  schema?: SchemaDefinition | Schema\n\n  recordClass?: typeof Record | boolean\n\n  wrap?: boolean\n\n  methods?: { [name: string]: Function }\n\n  scopes?: any\n\n  mapperClass?: typeof Mapper\n\n  /**\n   * Hash of registered adapters. Don't modify directly. Use\n   * {@link Mapper#registerAdapter} instead.\n   *\n   * @default {}\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  _adapters?: {}\n\n  /**\n   * Whether {@link Mapper#beforeCreate} and {@link Mapper#beforeCreateMany}\n   * should automatically receive default values according to the Mapper's schema.\n   *\n   * @default true\n   * @since 3.0.0\n   */\n  applyDefaults?: boolean\n\n  /**\n   * Whether to augment {@link Mapper#recordClass} with ES5 getters and setters\n   * according to the properties defined in {@link Mapper#schema}. This makes\n   * possible validation and change tracking on individual properties\n   * when using the dot (e.g. `user.name = \"Bob\"`) operator to modify a\n   * property, and is `true` by default.\n   *\n   * @default true\n   * @since 3.0.0\n   */\n  applySchema?: boolean\n\n  /**\n   * The name of the registered adapter that this Mapper should used by default.\n   *\n   * @default \"http\"\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  defaultAdapter?: string\n\n  /**\n   * The field used as the unique identifier on records handled by this Mapper.\n   *\n   * @default id\n   * @since 3.0.0\n   */\n  idAttribute?: string\n\n  properties?: { [name: string]: PropertyDefinition }\n\n  /**\n   * Whether records created from this mapper keep changeHistory on property changes.\n   *\n   * @default true\n   * @since 3.0.0\n   */\n  keepChangeHistory?: boolean\n\n  /**\n   * Whether this Mapper should emit operational events.\n   *\n   * @default true\n   * @since 3.0.0\n   */\n  notify?: boolean\n\n  /**\n   * Whether to skip validation when the Record instances are created.\n   *\n   * @default false\n   * @since 3.0.0\n   */\n  noValidate?: boolean\n\n  /**\n   * Whether {@link Mapper#create}, {@link Mapper#createMany},\n   * {@link Mapper#update}, {@link Mapper#updateAll}, {@link Mapper#updateMany},\n   * {@link Mapper#find}, {@link Mapper#findAll}, {@link Mapper#destroy},\n   * {@link Mapper#destroyAll}, {@link Mapper#count}, and {@link Mapper#sum}\n   * should return a raw result object that contains both the instance data\n   * returned by the adapter _and_ metadata about the operation.\n   *\n   * The default is to NOT return the result object, and instead return just the\n   * instance data.\n   *\n   * @default false\n   * @since 3.0.0\n   */\n  raw?: boolean\n\n  /**\n   * Whether records created from this mapper automatically validate their properties\n   * when their properties are modified.\n   *\n   * @default true\n   * @since 3.0.0\n   */\n  validateOnSet?: boolean\n}\n\nconst MAPPER_DEFAULTS: MapperOpts = {\n  _adapters: {},\n  applyDefaults: true,\n  applySchema: true,\n  defaultAdapter: 'http',\n  idAttribute: 'id',\n  keepChangeHistory: true,\n  notify: true,\n  noValidate: false,\n  raw: false,\n  validateOnSet: true\n}\n\n/**\n * The core of JSData's [ORM/ODM][orm] implementation. Given a minimum amount of\n * meta information about a resource, a Mapper can perform generic CRUD\n * operations against that resource. Apart from its configuration, a Mapper is\n * stateless. The particulars of various persistence layers have been abstracted\n * into adapters, which a Mapper uses to perform its operations.\n *\n * The term \"Mapper\" comes from the [Data Mapper Pattern][pattern] described in\n * Martin Fowler's [Patterns of Enterprise Application Architecture][book]. A\n * Data Mapper moves data between [in-memory object instances][record] and a\n * relational or document-based database. JSData's Mapper can work with any\n * persistence layer you can write an adapter for.\n *\n * _(\"Model\" is a heavily overloaded term and is avoided in this documentation\n * to prevent confusion.)_\n *\n * [orm]: https://en.wikipedia.org/wiki/Object-relational_mapping\n *\n * @example\n * [pattern]: https://en.wikipedia.org/wiki/Data_mapper_pattern\n * [book]: http://martinfowler.com/books/eaa.html\n * [record]: Record.html\n * // Import and instantiate\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @example\n * // Define a Mapper using the Container component\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @class Mapper\n * @extends Component\n * @param {object} opts Configuration options.\n * @param {boolean} [opts.applySchema=true] See {@link Mapper#applySchema}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {string} [opts.defaultAdapter=http] See {@link Mapper#defaultAdapter}.\n * @param {string} [opts.idAttribute=id] See {@link Mapper#idAttribute}.\n * @param {object} [opts.methods] See {@link Mapper#methods}.\n * @param {string} opts.name See {@link Mapper#name}.\n * @param {boolean} [opts.notify] See {@link Mapper#notify}.\n * @param {boolean} [opts.raw=false] See {@link Mapper#raw}.\n * @param {Function|boolean} [opts.recordClass] See {@link Mapper#recordClass}.\n * @param {Object|Schema} [opts.schema] See {@link Mapper#schema}.\n * @returns {Mapper} A new {@link Mapper} instance.\n * @see http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n */\nexport default class Mapper extends Component {\n  idAttribute: string;\n\n  name: string;\n  /**\n   * This Mapper's {@link Schema}.\n   *\n   * @example <caption>Mapper#schema</caption>\n   * const JSData = require('js-data');\n   * const { Mapper } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const UserMapper = new Mapper({\n   *   name: 'user',\n   *   schema: {\n   *     properties: {\n   *       id: { type: 'number' },\n   *       first: { type: 'string', track: true },\n   *       last: { type: 'string', track: true },\n   *       role: { type: 'string', track: true, required: true },\n   *       age: { type: 'integer', track: true },\n   *       is_active: { type: 'number' }\n   *     }\n   *   }\n   * });\n   * const user = UserMapper.createRecord({\n   *   id: 1,\n   *   name: 'John',\n   *   role: 'admin'\n   * });\n   * user.on('change', function (user, changes) {\n   *   console.log(changes);\n   * });\n   * user.on('change:role', function (user, value) {\n   *   console.log('change:role - ' + value);\n   * });\n   * user.role = 'owner';\n   *\n   * @name Mapper#schema\n   * @see Schema\n   * @since 3.0.0\n   * @type {Schema}\n   */\n  schema: Schema;\n  /**\n   * Set to `false` to force the Mapper to work with POJO objects only.\n   *\n   * @example\n   * // Use POJOs only.\n   * import { Mapper, Record } from 'js-data';\n   * const UserMapper = new Mapper({ recordClass: false });\n   * UserMapper.recordClass // false;\n   * const user = UserMapper.createRecord();\n   * user instanceof Record; // false\n   *\n   * @example\n   * // Set to a custom class to have records wrapped in your custom class.\n   * import { Mapper, Record } from 'js-data';\n   *  // Custom class\n   * class User {\n   *   constructor (props = {}) {\n   *     for (var key in props) {\n   *       if (props.hasOwnProperty(key)) {\n   *         this[key] = props[key];\n   *       }\n   *     }\n   *   }\n   * }\n   * const UserMapper = new Mapper({ recordClass: User });\n   * UserMapper.recordClass; // function User() {}\n   * const user = UserMapper.createRecord();\n   * user instanceof Record; // false\n   * user instanceof User; // true\n   *\n   *\n   * @example\n   * // Extend the {@link Record} class.\n   * import { Mapper, Record } from 'js-data';\n   *  // Custom class\n   * class User extends Record {\n   *   constructor () {\n   *     super(props);\n   *   }\n   * }\n   * const UserMapper = new Mapper({ recordClass: User });\n   * UserMapper.recordClass; // function User() {}\n   * const user = UserMapper.createRecord();\n   * user instanceof Record; // true\n   * user instanceof User; // true\n   *\n   * @name Mapper#recordClass\n   * @default {@link Record}\n   * @see Record\n   * @since 3.0.0\n   */\n  recordClass: typeof Record | Function | false | any;\n  methods: any;\n  applySchema: any;\n  relationList: any;\n  defaultAdapter: any;\n  relationFields: any;\n  _adapters: any;\n  relations: any;\n  /**\n   * The meta information describing this Mapper's available lifecycle\n   * methods. __Do not modify.__\n   *\n   * @name Mapper#lifecycleMethods\n   * @since 3.0.0\n   * @type {Object}\n   */\n  lifecycleMethods = LIFECYCLE_METHODS;\n\n  /**\n   * The {@link Container} that holds this Mapper. __Do not modify.__\n   *\n   * @name Mapper#lifecycleMethods\n   * @since 3.0.0\n   * @type {Object}\n   */\n  datastore: any;\n  validateOnSet: any;\n  keepChangeHistory: any;\n\n  constructor (opts: MapperOpts = {}) {\n    super()\n\n    // Apply user-provided configuration\n    utils.fillIn(this, opts)\n    // Fill in any missing options with the defaults\n    utils.fillIn(this, utils.copy(MAPPER_DEFAULTS))\n\n    /**\n     * The name for this Mapper. This is the minimum amount of meta information\n     * required for a Mapper to be able to execute CRUD operations for a\n     * Resource.\n     *\n     * @name Mapper#name\n     * @since 3.0.0\n     * @type {string}\n     */\n    if (!this.name) {\n      throw utils.err(`new ${DOMAIN}`, 'opts.name')(400, 'string', this.name)\n    }\n\n    // Setup schema, with an empty default schema if necessary\n    if (this.schema) {\n      this.schema.type = this.schema.type || 'object'\n      if (!(this.schema instanceof Schema)) {\n        this.schema = new Schema(this.schema || { type: 'object' })\n      }\n    }\n\n    // Create a subclass of Record that's tied to this Mapper\n    if (this.recordClass === undefined) {\n      // tslint:disable-next-line:max-classes-per-file\n      this.recordClass = class TiedRecord extends Record {}\n    }\n\n    if (this.recordClass) {\n      this.recordClass.mapper = this\n\n      /**\n       * Functions that should be added to the prototype of {@link Mapper#recordClass}.\n       *\n       * @name Mapper#methods\n       * @since 3.0.0\n       * @type {Object}\n       */\n      if (utils.isObject(this.methods)) {\n        utils.addHiddenPropsToTarget(this.recordClass.prototype, this.methods)\n      }\n\n      // We can only apply the schema to the prototype of this.recordClass if the\n      // class extends Record\n      if (\n        Record.prototype.isPrototypeOf(Object.create(this.recordClass.prototype)) &&\n        this.schema &&\n        this.schema.apply &&\n        this.applySchema\n      ) {\n        this.schema.apply(this.recordClass.prototype)\n      }\n    }\n  }\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCount = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreate = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterCreateMany = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroy = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterDestroyAll\n   * @param {*} data The `data` returned by the adapter.\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterDestroyAll = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFind = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterFindAll = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterSum\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterSum = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdate = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateAll = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#afterUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @param {*} result The result, if any.\n   * @since 3.0.0\n   */\n  afterUpdateMany = notify2;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#create}. If this method\n   * returns a promise then {@link Mapper#create} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreate\n   * @param {object} props The `props` argument passed to {@link Mapper#create}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#create}.\n   * @since 3.0.0\n   */\n  beforeCreate = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#createMany}. If this method\n   * returns a promise then {@link Mapper#createMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCreateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#createMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#createMany}.\n   * @since 3.0.0\n   */\n  beforeCreateMany = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#count}. If this method\n   * returns a promise then {@link Mapper#count} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeCount\n   * @param {object} query The `query` argument passed to {@link Mapper#count}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#count}.\n   * @since 3.0.0\n   */\n  beforeCount = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroy}. If this method\n   * returns a promise then {@link Mapper#destroy} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroy\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#destroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroy}.\n   * @since 3.0.0\n   */\n  beforeDestroy = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#destroyAll}. If this method\n   * returns a promise then {@link Mapper#destroyAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeDestroyAll\n   * @param {query} query The `query` argument passed to {@link Mapper#destroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#destroyAll}.\n   * @since 3.0.0\n   */\n  beforeDestroyAll = notify;\n\n  /**\n   * Mappers lifecycle hook called by {@link Mapper#find}. If this method\n   * returns a promise then {@link Mapper#find} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFind\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#find}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#find}.\n   * @since 3.0.0\n   */\n  beforeFind = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#findAll}. If this method\n   * returns a promise then {@link Mapper#findAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeFindAll\n   * @param {object} query The `query` argument passed to {@link Mapper#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#findAll}.\n   * @since 3.0.0\n   */\n  beforeFindAll = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#sum}. If this method\n   * returns a promise then {@link Mapper#sum} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeSum\n   * @param {string} field The `field` argument passed to {@link Mapper#sum}.\n   * @param {object} query The `query` argument passed to {@link Mapper#sum}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#sum}.\n   * @since 3.0.0\n   */\n  beforeSum = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#update}. If this method\n   * returns a promise then {@link Mapper#update} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdate\n   * @param {(string|number)} id The `id` argument passed to {@link Mapper#update}.\n   * @param {props} props The `props` argument passed to {@link Mapper#update}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#update}.\n   * @since 3.0.0\n   */\n  beforeUpdate = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateAll}. If this method\n   * returns a promise then {@link Mapper#updateAll} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateAll\n   * @param {object} props The `props` argument passed to {@link Mapper#updateAll}.\n   * @param {object} query The `query` argument passed to {@link Mapper#updateAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateAll}.\n   * @since 3.0.0\n   */\n  beforeUpdateAll = notify;\n\n  /**\n   * Mapper lifecycle hook called by {@link Mapper#updateMany}. If this method\n   * returns a promise then {@link Mapper#updateMany} will wait for the promise\n   * to resolve before continuing.\n   *\n   * @method Mapper#beforeUpdateMany\n   * @param {array} records The `records` argument passed to {@link Mapper#updateMany}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#updateMany}.\n   * @since 3.0.0\n   */\n  beforeUpdateMany = notify;\n\n  /**\n   * This method is called at the end of most lifecycle methods. It does the\n   * following:\n   *\n   * 1. If `opts.raw` is `true`, add this Mapper's configuration to the `opts`\n   * argument as metadata for the operation.\n   * 2. Wrap the result data appropriately using {@link Mapper#wrap}, which\n   * calls {@link Mapper#createRecord}.\n   *\n   * @method Mapper#_end\n   * @private\n   * @since 3.0.0\n   */\n  _end (result, opts, skip = false) {\n    if (opts.raw) {\n      utils._(result, opts)\n    }\n    if (skip) {\n      return result\n    }\n    let _data = opts.raw ? result.data : result\n    if (_data && utils.isFunction(this.wrap)) {\n      _data = this.wrap(_data, opts)\n      if (opts.raw) {\n        result.data = _data\n      } else {\n        result = _data\n      }\n    }\n    return result\n  }\n\n  /**\n   * Define a belongsTo relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * PostMapper.belongsTo(UserMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to post records at \"post.user\"\n   *   localField: 'user'\n   * });\n   *\n   * CommentMapper.belongsTo(UserMapper, {\n   *   // comment.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // user records will be attached to comment records at \"comment.user\"\n   *   localField: 'user'\n   * });\n   * CommentMapper.belongsTo(PostMapper, {\n   *   // comment.post_id points to post.id\n   *   foreignKey: 'post_id'\n   *   // post records will be attached to comment records at \"comment.post\"\n   *   localField: 'post'\n   * });\n   *\n   * @method Mapper#belongsTo\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  belongsTo (relatedMapper, opts) {\n    return belongsTo(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Select records according to the `query` argument and return the count.\n   *\n   * {@link Mapper#beforeCount} will be called before calling the adapter.\n   * {@link Mapper#afterCount} will be called after calling the adapter.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * PostMapper.count({ status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Mapper#count\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `count` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the count of the selected records.\n   * @since 3.0.0\n   */\n  count (query, opts?) {\n    return this.crud('count', query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreate\n   * @see Mapper~beforeCreateListener\n   * @see Mapper#create\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Mapper~beforeCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeCreate}.\n   * @see Mapper#event:beforeCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#create}. See\n   * {@link Mapper~afterCreateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreate\n   * @see Mapper~afterCreateListener\n   * @see Mapper#create\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Mapper~afterCreateListener\n   * @param {object} props The `props` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterCreate}.\n   * @see Mapper#event:afterCreate\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  /**\n   * Create and save a new the record using the provided `props`.\n   *\n   * {@link Mapper#beforeCreate} will be called before calling the adapter.\n   * {@link Mapper#afterCreate} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save a new blog post\n   * PostMapper.create({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#create\n   * @param {object} props The properties for the new record.\n   * @param {object} [opts] Configuration options. Refer to the `create` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `props` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#create}\n   * or {@link Mapper#createMany} call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created record.\n   * @since 3.0.0\n   */\n  create (props: any = {}, opts: any = {}) {\n    const originalRecord = props\n    let parentRelationMap = {}\n    let adapterResponse: any = {}\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    opts.op = 'beforeCreate'\n    return this._runHook(opts.op, props, opts)\n      .then(props => {\n        opts.with = opts.with || []\n        return this._createParentRecordIfRequired(props, opts)\n      })\n      .then(relationMap => {\n        parentRelationMap = relationMap\n      })\n      .then(() => {\n        opts.op = 'create'\n        return this._invokeAdapterMethod(opts.op, props, opts)\n      })\n      .then(result => {\n        adapterResponse = result\n      })\n      .then(() => {\n        const createdProps = opts.raw ? adapterResponse.data : adapterResponse\n\n        return this._createOrAssignChildRecordIfRequired(createdProps, {\n          opts,\n          parentRelationMap,\n          originalProps: props\n        })\n      })\n      .then(createdProps => {\n        return this._commitChanges(originalRecord, createdProps)\n      })\n      .then(record => {\n        if (opts.raw) {\n          adapterResponse.data = record\n        } else {\n          adapterResponse = record\n        }\n        const result = this._end(adapterResponse, opts)\n        opts.op = 'afterCreate'\n        return this._runHook(opts.op, props, opts, result)\n      })\n  }\n\n  _commitChanges (recordOrRecords, newValues) {\n    if (utils.isArray(recordOrRecords)) {\n      return recordOrRecords.map((record, i) => this._commitChanges(record, newValues[i]))\n    }\n\n    utils.set(recordOrRecords, newValues, { silent: true })\n\n    if (utils.isFunction(recordOrRecords.commit)) {\n      recordOrRecords.commit()\n    }\n\n    return recordOrRecords\n  }\n\n  /**\n   * Use {@link Mapper#createRecord} instead.\n   * @deprecated\n   * @method Mapper#createInstance\n   * @param {Object|Array} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Object|Array} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createInstance (props, opts?) {\n    return this.createRecord(props, opts)\n  }\n\n  /**\n   * Creates parent record for relation types like BelongsTo or HasMany with localKeys\n   * in order to satisfy foreignKey dependency (so called child records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} opts See {@link Mapper#create}.\n   * @returns {Object} cached parent records map\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createParentRecordIfRequired (props, opts) {\n    const tasks = []\n    const relations = []\n\n    utils.forEachRelation(this, opts, (def, optsCopy) => {\n      if (!def.isRequiresParentId() || !def.getLocalField(props)) {\n        return\n      }\n\n      optsCopy.raw = false\n      relations.push(def)\n      tasks.push(def.createParentRecord(props, optsCopy))\n    })\n\n    return Promise.all(tasks).then(records => {\n      return relations.reduce((map, relation, index) => {\n        relation.setLocalField(map, records[index])\n        return map\n      }, {})\n    })\n  }\n\n  /**\n   * Creates child record for relation types like HasOne or HasMany with foreignKey\n   * in order to satisfy foreignKey dependency (so called parent records).\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} context contains collected information.\n   * @param {object} context.opts See {@link Mapper#create}.\n   * @param {object} context.parentRelationMap contains parent records map\n   * @param {object} context.originalProps contains data passed into {@link Mapper#create} method\n   * @return {Promise} updated props\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  _createOrAssignChildRecordIfRequired (props, context) {\n    const tasks = []\n\n    utils.forEachRelation(this, context.opts, (def, optsCopy) => {\n      const relationData = def.getLocalField(context.originalProps)\n\n      if (!relationData) {\n        return\n      }\n\n      optsCopy.raw = false\n      // Create hasMany and hasOne after the main create because we needed\n      // a generated id to attach to these items\n      if (def.isRequiresChildId()) {\n        tasks.push(def.createChildRecord(props, relationData, optsCopy))\n      } else if (def.isRequiresParentId()) {\n        const parent = def.getLocalField(context.parentRelationMap)\n\n        if (parent) {\n          def.setLocalField(props, parent)\n        }\n      }\n    })\n\n    return Promise.all(tasks).then(() => props)\n  }\n\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeCreateMany\n   * @see Mapper~beforeCreateManyListener\n   * @see Mapper#createMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Mapper~beforeCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Mapper#event:beforeCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#createMany}. See\n   * {@link Mapper~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterCreateMany\n   * @see Mapper~afterCreateManyListener\n   * @see Mapper#createMany\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Mapper~afterCreateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Mapper#event:afterCreateMany\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of records, batch create them via an adapter.\n   *\n   * {@link Mapper#beforeCreateMany} will be called before calling the adapter.\n   * {@link Mapper#afterCreateMany} will be called after calling the adapter.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * PostMapper.createMany([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Mapper#beforeCreate\n   * @fires Mapper#afterCreate\n   * @method Mapper#createMany\n   * @param {Record[]} records Array of records to be created in one batch.\n   * @param {object} [opts] Configuration options. Refer to the `createMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to create in a cascading\n   * create if `records` contains nested relations. NOT performed in a\n   * transaction. Each nested create will result in another {@link Mapper#createMany}\n   * call.\n   * @param {string[]} [opts.pass=[]] Relations to send to the adapter as part\n   * of the payload. Normally relations are not sent.\n   * @returns {Promise} Resolves with the created records.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  createMany (records = [], opts: any = {}) {\n    // Default values for arguments\n    const originalRecords = records\n    let adapterResponse\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    opts.adapter = this.getAdapterName(opts)\n\n    // beforeCreateMany lifecycle hook\n    opts.op = 'beforeCreateMany'\n    return this._runHook(opts.op, records, opts)\n      .then(records => {\n        // Deep pre-create belongsTo relations\n        const belongsToRelationData = {}\n        opts.with = opts.with || []\n        let tasks = []\n        utils.forEachRelation(this, opts, (def, optsCopy) => {\n          const relationData = records.map(record => def.getLocalField(record)).filter(Boolean)\n          if (def.type === belongsToType && relationData.length === records.length) {\n            // Create belongsTo relation first because we need a generated id to\n            // attach to the child\n            optsCopy.raw = false\n            tasks.push(\n              def\n                .createLinked(relationData, optsCopy)\n                .then(relatedRecords => {\n                  records.forEach((record, i) => def.setForeignKey(record, relatedRecords[i]))\n                })\n                .then(relatedRecords => {\n                  def.setLocalField(belongsToRelationData, relatedRecords)\n                })\n            )\n          }\n        })\n        return Promise.all(tasks)\n          .then(() => {\n            opts.op = 'createMany'\n            return this._invokeAdapterMethod(opts.op, records, opts)\n          })\n          .then(result => {\n            adapterResponse = result\n          })\n          .then(() => {\n            const createdRecordsData = opts.raw ? adapterResponse.data : adapterResponse\n\n            // Deep post-create hasOne relations\n            tasks = []\n            utils.forEachRelation(this, opts, (def, optsCopy) => {\n              const relationData = records.map(record => def.getLocalField(record)).filter(Boolean)\n              if (relationData.length !== records.length) {\n                return\n              }\n\n              optsCopy.raw = false\n              const belongsToData = def.getLocalField(belongsToRelationData)\n              let task\n              // Create hasMany and hasOne after the main create because we needed\n              // a generated id to attach to these items\n              if (def.type === hasManyType) {\n                // Not supported\n                this.log('warn', 'deep createMany of hasMany type not supported!')\n              } else if (def.type === hasOneType) {\n                createdRecordsData.forEach((createdRecordData, i) => {\n                  def.setForeignKey(createdRecordData, relationData[i])\n                })\n                task = def\n                  .getRelation()\n                  .createMany(relationData, optsCopy)\n                  .then(relatedData => {\n                    createdRecordsData.forEach((createdRecordData, i) => {\n                      def.setLocalField(createdRecordData, relatedData[i])\n                    })\n                  })\n              } else if (\n                def.type === belongsToType &&\n                belongsToData &&\n                belongsToData.length === createdRecordsData.length\n              ) {\n                createdRecordsData.forEach((createdRecordData, i) => {\n                  def.setLocalField(createdRecordData, belongsToData[i])\n                })\n              }\n              if (task) {\n                tasks.push(task)\n              }\n            })\n            return Promise.all(tasks).then(() => {\n              return this._commitChanges(originalRecords, createdRecordsData)\n            })\n          })\n      })\n      .then(records => {\n        if (opts.raw) {\n          adapterResponse.data = records\n        } else {\n          adapterResponse = records\n        }\n        const result = this._end(adapterResponse, opts)\n        opts.op = 'afterCreateMany'\n        return this._runHook(opts.op, records, opts, result)\n      })\n  }\n\n  /**\n   * Create an unsaved, uncached instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   *\n   * Returns `props` if `props` is already an instance of\n   * {@link Mapper#recordClass}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * const post = PostMapper.createRecord();\n   *\n   * @example\n   * // Create an unsaved record instance with inital properties\n   * const post = PostMapper.createRecord({\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create a record instance that corresponds to a saved record\n   * const post = PostMapper.createRecord({\n   *   // JSData thinks this record has been saved if it has a primary key\n   *   id: 1234,\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * });\n   *\n   * @example\n   * // Create record instances from an array\n   * const posts = PostMapper.createRecord([{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]);\n   *\n   * @example\n   * // Records are validated by default\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * try {\n   *   const post = PostMapper.createRecord({\n   *     title: 1234,\n   *   });\n   * } catch (err) {\n   *   console.log(err.errors); // [{ expected: 'one of (string)', actual: 'number', path: 'title' }]\n   * }\n   *\n   * @example\n   * // Skip validation\n   * import { Mapper } from 'js-data';\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   schema: { properties: { title: { type: 'string' } } }\n   * });\n   * const post = PostMapper.createRecord({\n   *   title: 1234,\n   * }, { noValidate: true });\n   * console.log(post.isValid()); // false\n   *\n   * @method Mapper#createRecord\n   * @param {Object|Object[]} props The properties for the Record instance or an\n   * array of property objects for the Record instances.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @returns {Record|Record[]} The Record instance or Record instances.\n   * @since 3.0.0\n   */\n  createRecord (props: any = {}, opts?): Record | Record[] | any {\n    if (utils.isArray(props)) {\n      return props.map(_props => this.createRecord(_props, opts))\n    }\n    if (!utils.isObject(props)) {\n      throw utils.err(`${DOMAIN}#createRecord`, 'props')(400, 'array or object', props)\n    }\n\n    if (this.relationList) {\n      this.relationList.forEach(def => {\n        def.ensureLinkedDataHasProperType(props, opts)\n      })\n    }\n    const RecordCtor = this.recordClass\n\n    const result = !RecordCtor || props instanceof RecordCtor ? props : new RecordCtor(props, opts)\n    return result\n    // Record.mapper = this;\n    // return new Record(props);\n  }\n\n  /**\n   * Lifecycle invocation method. You probably won't call this method directly.\n   *\n   * @method Mapper#crud\n   * @param {string} method Name of the lifecycle method to invoke.\n   * @param {...*} args Arguments to pass to the lifecycle method.\n   * @returns {Promise}\n   * @since 3.0.0\n   */\n  crud (method, ...args) {\n    const config = this.lifecycleMethods[method]\n    if (!config) {\n      throw utils.err(`${DOMAIN}#crud`, method)(404, 'method')\n    }\n\n    const upper = `${method.charAt(0).toUpperCase()}${method.substr(1)}`\n    const before = `before${upper}`\n    const after = `after${upper}`\n\n    let op\n\n    // Default values for arguments\n    config.defaults.forEach((value, i) => {\n      if (args[i] === undefined) {\n        args[i] = utils.copy(value)\n      }\n    })\n\n    const opts = args[args.length - 1]\n\n    // Fill in \"opts\" with the Mapper's configuration\n    utils._(opts, this)\n    const adapter = opts.adapter = this.getAdapterName(opts)\n\n    // before lifecycle hook\n    op = opts.op = before\n    return utils\n      .resolve(this[op](...args))\n      .then(_value => {\n        if (args[config.beforeAssign] !== undefined) {\n          // Allow for re-assignment from lifecycle hook\n          args[config.beforeAssign] = _value === undefined ? args[config.beforeAssign] : _value\n        }\n        // Now delegate to the adapter\n        op = opts.op = method\n        args = config.adapterArgs ? config.adapterArgs(this, ...args) : args\n        this.dbg(op, ...args)\n        return utils.resolve(this.getAdapter(adapter)[op](this, ...args))\n      })\n      .then(result => {\n        // force noValidate on find/findAll\n        const noValidate = /find/.test(op) || opts.noValidate\n        const _opts = Object.assign({}, opts, { noValidate })\n\n        result = this._end(result, _opts, !!config.skip)\n        args.push(result)\n        // after lifecycle hook\n        op = opts.op = after\n        return utils.resolve(this[op](...args)).then(_result => {\n          // Allow for re-assignment from lifecycle hook\n          return _result === undefined ? result : _result\n        })\n      })\n  }\n\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroy\n   * @see Mapper~beforeDestroyListener\n   * @see Mapper#destroy\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Mapper~beforeDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroy}.\n   * @see Mapper#event:beforeDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroy}. See\n   * {@link Mapper~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroy\n   * @see Mapper~afterDestroyListener\n   * @see Mapper#destroy\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Mapper~afterDestroyListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroy}.\n   * @see Mapper#event:afterDestroy\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, destroy the record with the given primary key.\n   *\n   * {@link Mapper#beforeDestroy} will be called before destroying the record.\n   * {@link Mapper#afterDestroy} will be called after destroying the record.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * PostMapper.destroy(1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.destroy(1234, { raw: true }).then((result) => {\n   *   console.log(result.deleted); e.g. 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroy\n   * @fires Mapper#afterDestroy\n   * @method Mapper#destroy\n   * @param {(string|number)} id The primary key of the record to destroy.\n   * @param {object} [opts] Configuration options. Refer to the `destroy` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the record has been destroyed. Resolves\n   * even if no record was found to be destroyed.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroy (id: string | number, opts?) {\n    return this.crud('destroy', id, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeDestroyAll\n   * @see Mapper~beforeDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Mapper~beforeDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeDestroyAll}.\n   * @see Mapper#event:beforeDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#destroyAll}. See\n   * {@link Mapper~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterDestroyAll\n   * @see Mapper~afterDestroyAllListener\n   * @see Mapper#destroyAll\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Mapper~afterDestroyAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterDestroyAll}.\n   * @see Mapper#event:afterDestroyAll\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Destroy the records selected by `query` via an adapter. If no `query` is\n   * provided then all records will be destroyed.\n   *\n   * {@link Mapper#beforeDestroyAll} will be called before destroying the records.\n   * {@link Mapper#afterDestroyAll} will be called after destroying the records.\n   *\n   * @example\n   * // Destroy all blog posts\n   * PostMapper.destroyAll().then(() => {\n   *   // All blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * PostMapper.destroyAll({ status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @example\n   * // Get full response\n   * const query = null;\n   * const options = { raw: true };\n   * PostMapper.destroyAll(query, options).then((result) => {\n   *   console.log(result.deleted); e.g. 14\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeDestroyAll\n   * @fires Mapper#afterDestroyAll\n   * @method Mapper#destroyAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `destroyAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves when the records have been destroyed. Resolves\n   * even if no records were found to be destroyed.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  destroyAll (query?, opts?) {\n    return this.crud('destroyAll', query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~beforeFindListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFind\n   * @see Mapper~beforeFindListener\n   * @see Mapper#find\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Mapper~beforeFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFind}.\n   * @see Mapper#event:beforeFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#find}. See\n   * {@link Mapper~afterFindListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFind\n   * @see Mapper~afterFindListener\n   * @see Mapper#find\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Mapper~afterFindListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFind}.\n   * @see Mapper#event:afterFind\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  /**\n   * Retrieve via an adapter the record with the given primary key.\n   *\n   * {@link Mapper#beforeFind} will be called before calling the adapter.\n   * {@link Mapper#afterFind} will be called after calling the adapter.\n   *\n   * @example\n   * PostMapper.find(1).then((post) => {\n   *   console.log(post); // { id: 1, ...}\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.find(1, { raw: true }).then((result) => {\n   *   console.log(result.data); // { id: 1, ...}\n   *   console.log(result.found); // 1\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFind\n   * @fires Mapper#afterFind\n   * @method Mapper#find\n   * @param {(string|number)} id The primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options. Refer to the `find` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found record. Resolves with\n   * `undefined` if no record was found.\n   * @see http://www.js-data.io/v3.0/docs/reading-data\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  find (id: string | number, opts?) {\n    return this.crud('find', id, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeFindAll\n   * @see Mapper~beforeFindAllListener\n   * @see Mapper#findAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Mapper~beforeFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeFindAll}.\n   * @see Mapper#event:beforeFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#findAll}. See\n   * {@link Mapper~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterFindAll\n   * @see Mapper~afterFindAllListener\n   * @see Mapper#findAll\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Mapper~afterFindAllListener\n   * @param {object} query The `query` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterFindAll}.\n   * @see Mapper#event:afterFindAll\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, select records to retrieve via an adapter.\n   *\n   * {@link Mapper#beforeFindAll} will be called before calling the adapter.\n   * {@link Mapper#afterFindAll} will be called after calling the adapter.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * PostMapper.findAll({ status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, status: 'published', ...}, ...]\n   * });\n   *\n   * @example\n   * // Get full response\n   * PostMapper.findAll({ status: 'published' }, { raw: true }).then((result) => {\n   *   console.log(result.data); // [{ id: 1, status: 'published', ...}, ...]\n   *   console.log(result.found); // e.g. 13\n   *   console.log(...); // etc., more metadata can be found on the result\n   * });\n   *\n   * @fires Mapper#beforeFindAll\n   * @fires Mapper#afterFindAll\n   * @method Mapper#findAll\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `findAll` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @param {string[]} [opts.with=[]] Relations to eager load in the request.\n   * @returns {Promise} Resolves with the found records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/reading-data\",\"Reading data\"]\n   */\n  findAll (query, opts?) {\n    return this.crud('findAll', query, opts)\n  }\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Mapper#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapter (name?: string) {\n    this.dbg('getAdapter', 'name:', name)\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  }\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Mapper#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapterName (opts: any = {}) {\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || opts.defaultAdapter\n  }\n\n  /**\n   * Get the object of registered adapters for this Mapper.\n   *\n   * @method Mapper#getAdapters\n   * @returns {Object} {@link Mapper#_adapters}\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  getAdapters () {\n    return this._adapters\n  }\n\n  /**\n   * Returns this Mapper's {@link Schema}.\n   *\n   * @method Mapper#getSchema\n   * @returns {Schema} This Mapper's {@link Schema}.\n   * @see Mapper#schema\n   * @since 3.0.0\n   */\n  getSchema () {\n    return this.schema\n  }\n\n  /**\n   * Defines a hasMany relationship. Only useful if you're managing your\n   * Mappers manually and not using a Container or DataStore component.\n   *\n   * @example\n   * UserMapper.hasMany(PostMapper, {\n   *   // post.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // post records will be attached to user records at \"user.posts\"\n   *   localField: 'posts'\n   * });\n   *\n   * @method Mapper#hasMany\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasMany (relatedMapper, opts) {\n    return hasMany(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Defines a hasOne relationship. Only useful if you're managing your Mappers\n   * manually and not using a {@link Container} or {@link DataStore} component.\n   *\n   * @example\n   * UserMapper.hasOne(ProfileMapper, {\n   *   // profile.user_id points to user.id\n   *   foreignKey: 'user_id'\n   *   // profile records will be attached to user records at \"user.profile\"\n   *   localField: 'profile'\n   * });\n   *\n   * @method Mapper#hasOne\n   * @see http://www.js-data.io/v3.0/docs/relations\n   * @since 3.0.0\n   */\n  hasOne (relatedMapper, opts) {\n    return hasOne(relatedMapper, opts)(this)\n  }\n\n  /**\n   * Return whether `record` is an instance of this Mapper's recordClass.\n   *\n   * @example\n   * const post = PostMapper.createRecord();\n   *\n   * console.log(PostMapper.is(post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof PostMapper.recordClass); // true\n   *\n   * @method Mapper#is\n   * @param {Object|Record} record The record to check.\n   * @returns {boolean} Whether `record` is an instance of this Mapper's\n   * {@link Mapper#recordClass}.\n   * @since 3.0.0\n   */\n  is (record) {\n    const recordClass = this.recordClass\n    return recordClass ? record instanceof recordClass : false\n  }\n\n  /**\n   * Register an adapter on this Mapper under the given name.\n   *\n   * @method Mapper#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for this Mapper.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts: any = {}) {\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.defaultAdapter = name\n    }\n  }\n\n  _runHook (hookName, ...hookArgs) {\n    const defaultValueIndex = hookName.indexOf('after') === 0 ? hookArgs.length - 1 : 0\n\n    return utils\n      .resolve(this[hookName](...hookArgs))\n      .then(overridenResult => (overridenResult === undefined ? hookArgs[defaultValueIndex] : overridenResult))\n  }\n\n  _invokeAdapterMethod (method, propsOrRecords, opts) {\n    const conversionOptions = { with: opts.pass || [] }\n    let object\n\n    this.dbg(opts.op, propsOrRecords, opts)\n\n    if (utils.isArray(propsOrRecords)) {\n      object = propsOrRecords.map(record => this.toJSON(record, conversionOptions))\n    } else {\n      object = this.toJSON(propsOrRecords, conversionOptions)\n    }\n\n    return this.getAdapter(opts.adapter)[method](this, object, opts)\n  }\n\n  /**\n   * Select records according to the `query` argument, and aggregate the sum\n   * value of the property specified by `field`.\n   *\n   * {@link Mapper#beforeSum} will be called before calling the adapter.\n   * {@link Mapper#afterSum} will be called after calling the adapter.\n   *\n   * @example\n   * PurchaseOrderMapper.sum('amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Mapper#sum\n   * @param {string} field The field to sum.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `sum` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the aggregated sum.\n   * @since 3.0.0\n   */\n  sum (field, query: QueryDefinition, opts?) {\n    return this.crud('sum', field, query, opts)\n  }\n\n  /**\n   * Return a plain object representation of the given record. Relations can\n   * be optionally be included. Non-schema properties can be excluded.\n   *\n   * @example\n   * import { Mapper, Schema } from 'js-data';\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = PersonMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(PersonMapper.toJSON(person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * const PersonRelaxedMapper = new Mapper({\n   *   name: 'personRelaxed',\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = PersonRelaxedMapper.createRecord({ id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(PersonRelaxedMapper.toJSON(person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Mapper#toJSON\n   * @param {Record|Record[]} records Record or records from which to create a\n   * POJO representation.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Array of relation names or relation fields\n   * to include in the POJO representation.\n   * @param {boolean} [opts.withAll] Whether to simply include all relations in\n   * the representation. Overrides `opts.with`.\n   * @returns {Object|Object[]} POJO representation of the record or records.\n   * @since 3.0.0\n   */\n  toJSON (records, opts: any = {}) {\n    let record\n    if (utils.isArray(records)) {\n      return records.map(record => this.toJSON(record, opts))\n    } else {\n      record = records\n    }\n    const relationFields = (this ? this.relationFields : []) || []\n    let json = {}\n\n    // Copy properties defined in the schema\n    if (this && this.schema) {\n      json = this.schema.pick(record)\n    } else {\n      for (const key in record) {\n        if (relationFields.indexOf(key) === -1) {\n          json[key] = utils.plainCopy(record[key])\n        }\n      }\n    }\n\n    // The user wants to include relations in the resulting plain object representation\n    if (this && opts.withAll) {\n      opts.with = relationFields.slice()\n    }\n    if (this && opts.with) {\n      if (utils.isString(opts.with)) {\n        opts.with = [opts.with]\n      }\n      utils.forEachRelation(this, opts, (def, optsCopy) => {\n        const relationData = def.getLocalField(record)\n        if (relationData) {\n          // The actual recursion\n          if (utils.isArray(relationData)) {\n            def.setLocalField(\n              json,\n              relationData.map(item => {\n                return def.getRelation().toJSON(item, optsCopy)\n              })\n            )\n          } else {\n            def.setLocalField(json, def.getRelation().toJSON(relationData, optsCopy))\n          }\n        }\n      })\n    }\n    return json\n  }\n\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdate\n   * @see Mapper~beforeUpdateListener\n   * @see Mapper#update\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Mapper~beforeUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#beforeUpdate}.\n   * @see Mapper#event:beforeUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#update}. See\n   * {@link Mapper~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdate\n   * @see Mapper~afterUpdateListener\n   * @see Mapper#update\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Mapper~afterUpdateListener\n   * @param {string|number} id The `id` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument passed to {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument passed to {@link Mapper#afterUpdate}.\n   * @see Mapper#event:afterUpdate\n   * @see Mapper#update\n   * @since 3.0.0\n   */\n  /**\n   * Using an adapter, update the record with the primary key specified by the\n   * `id` argument.\n   *\n   * {@link Mapper#beforeUpdate} will be called before updating the record.\n   * {@link Mapper#afterUpdate} will be called after updating the record.\n   *\n   * @example\n   * // Update a specific post\n   * PostMapper.update(1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Mapper#beforeUpdate\n   * @fires Mapper#afterUpdate\n   * @method Mapper#update\n   * @param {(string|number)} id The primary key of the record to update.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options. Refer to the `update` method\n   * of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * transaction.\n   * @returns {Promise} Resolves with the updated record. Rejects if the record\n   * could not be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (id, props, opts?) {\n    return this.crud('update', id, props, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateAll\n   * @see Mapper~beforeUpdateAllListener\n   * @see Mapper#updateAll\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Mapper~beforeUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Mapper#event:beforeUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateAll}. See\n   * {@link Mapper~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateAll\n   * @see Mapper~afterUpdateAllListener\n   * @see Mapper#updateAll\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Mapper~afterUpdateAllListener\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Mapper#event:afterUpdateAll\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Using the `query` argument, perform the a single updated to the selected\n   * records.\n   *\n   * {@link Mapper#beforeUpdateAll} will be called before making the update.\n   * {@link Mapper#afterUpdateAll} will be called after making the update.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * PostMapper.updateAll(update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateAll\n   * @fires Mapper#afterUpdateAll\n   * @method Mapper#updateAll\n   * @param {object} props Update to apply to selected records.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options. Refer to the `updateAll`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the update records, if any.\n   * @see query\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateAll (props, query?: QueryDefinition, opts?) {\n    return this.crud('updateAll', props, query, opts)\n  }\n\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#beforeUpdateMany\n   * @see Mapper~beforeUpdateManyListener\n   * @see Mapper#updateMany\n   */\n  /**\n   * Callback signature for the {@link Mapper#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Mapper~beforeUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Mapper#event:beforeUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Mapper#updateMany}. See\n   * {@link Mapper~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Mapper#afterUpdateMany\n   * @see Mapper~afterUpdateManyListener\n   * @see Mapper#updateMany\n   */\n\n  /**\n   * Callback signature for the {@link Mapper#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Mapper~afterUpdateManyListener\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Mapper#event:afterUpdateMany\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Given an array of updates, perform each of the updates via an adapter. Each\n   * \"update\" is a hash of properties with which to update an record. Each\n   * update must contain the primary key of the record to be updated.\n   *\n   * {@link Mapper#beforeUpdateMany} will be called before making the update.\n   * {@link Mapper#afterUpdateMany} will be called after making the update.\n   *\n   * @example\n   * PostMapper.updateMany([\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Mapper#beforeUpdateMany\n   * @fires Mapper#afterUpdateMany\n   * @method Mapper#updateMany\n   * @param {Record[]} records Array up record updates.\n   * @param {object} [opts] Configuration options. Refer to the `updateMany`\n   * method of whatever adapter you're using for more configuration options.\n   * @param {boolean} [opts.adapter={@link Mapper#defaultAdapter}] Name of the\n   * adapter to use.\n   * @param {boolean} [opts.notify={@link Mapper#notify}] See {@link Mapper#notify}.\n   * @param {boolean} [opts.noValidate={@link Mapper#noValidate}] See {@link Mapper#noValidate}.\n   * @param {boolean} [opts.raw={@link Mapper#raw}] See {@link Mapper#raw}.\n   * @returns {Promise} Resolves with the updated records. Rejects if any of the\n   * records could be found.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  updateMany (records, opts?) {\n    return this.crud('updateMany', records, opts)\n  }\n\n  /**\n   * Validate the given record or records according to this Mapper's\n   * {@link Schema}. If there are no validation errors then the return value\n   * will be `undefined`.\n   *\n   * @example\n   * import {Mapper, Schema} from 'js-data'\n   * const PersonSchema = new Schema({\n   *   properties: {\n   *     name: { type: 'string' },\n   *     id: { type: 'string' }\n   *   }\n   * });\n   * const PersonMapper = new Mapper({\n   *   name: 'person',\n   *   schema: PersonSchema\n   * });\n   * let errors = PersonMapper.validate({ name: 'John' });\n   * console.log(errors); // undefined\n   * errors = PersonMapper.validate({ name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Mapper#validate\n   * @param {Object|Object[]} record The record or records to validate.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Schema#validate}.\n   * @returns {Object[]} Array of errors or `undefined` if no errors.\n   * @since 3.0.0\n   */\n  validate (record, opts: any = {}) {\n    const schema = this.getSchema()\n    if (!schema) {\n      return\n    }\n    const _opts = utils.pick(opts, ['existingOnly'])\n    if (utils.isArray(record)) {\n      const errors = record.map(_record => schema.validate(_record, utils.pick(_opts, ['existingOnly'])))\n\n      return errors.some(Boolean) ? errors : undefined\n    }\n    return schema.validate(record, _opts)\n  }\n\n  /**\n   * Method used to wrap data returned by an adapter with this Mapper's\n   * {@link Mapper#recordClass}. This method is used by all of a Mapper's CRUD\n   * methods. The provided implementation of this method assumes that the `data`\n   * passed to it is a record or records that need to be wrapped with\n   * {@link Mapper#createRecord}. Override with care.\n   *\n   * Provided implementation of {@link Mapper#wrap}:\n   *\n   * ```\n   * function (data, opts) {\n   *   return this.createRecord(data, opts);\n   * }\n   * ```\n   *\n   * @example\n   * const PostMapper = new Mapper({\n   *   name: 'post',\n   *   // Override to customize behavior\n   *   wrap (data, opts) {\n   *     const originalWrap = this.constructor.prototype.wrap;\n   *     // Let's say \"GET /post\" doesn't return JSON quite like JSData expects,\n   *     // but the actual post records are nested under a \"posts\" field. So,\n   *     // we override Mapper#wrap to handle this special case.\n   *     if (opts.op === 'findAll') {\n   *       return originalWrap.call(this, data.posts, opts);\n   *     }\n   *     // Otherwise perform original behavior\n   *     return originalWrap.call(this, data, opts);\n   *   }\n   * });\n   *\n   * @method Mapper#wrap\n   * @param {Object|Object[]} data The record or records to be wrapped.\n   * @param {object} [opts] Configuration options. Passed to {@link Mapper#createRecord}.\n   * @returns {Record|Record[]} The wrapped record or records.\n   * @since 3.0.0\n   */\n  wrap (data, opts) {\n    return this.createRecord(data, opts)\n  }\n\n  /**\n   * @ignore\n   */\n  defineRelations () {\n    // Setup the mapper's relations, including generating Mapper#relationList\n    // and Mapper#relationFields\n    utils.forOwn(this.relations, (group, type) => {\n      utils.forOwn(group, (relations, _name) => {\n        if (utils.isObject(relations)) {\n          relations = [relations]\n        }\n        relations.forEach(def => {\n          const relatedMapper = this.datastore.getMapperByName(_name) || _name\n          def.getRelation = () => this.datastore.getMapper(_name)\n\n          if (typeof Relation[type] !== 'function') {\n            throw utils.err(DOMAIN, 'defineRelations')(400, 'relation type (hasOne, hasMany, etc)', type, true)\n          }\n\n          this[type](relatedMapper, def)\n        })\n      })\n    })\n  }\n}\n\n/**\n * Create a subclass of this Mapper:\n *\n * @example <caption>Mapper.extend</caption>\n * const JSData = require('js-data');\n * const { Mapper } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomMapperClass extends Mapper {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * };\n * const customMapper = new CustomMapperClass();\n * console.log(customMapper.foo());\n * console.log(CustomMapperClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherMapperClass = Mapper.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherMapper = new OtherMapperClass();\n * console.log(otherMapper.foo());\n * console.log(OtherMapperClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherMapperClass () {\n *   Mapper.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * Mapper.extend({\n *   constructor: AnotherMapperClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherMapper = new AnotherMapperClass();\n * console.log(anotherMapper.created_at);\n * console.log(anotherMapper.foo());\n * console.log(AnotherMapperClass.beep());\n *\n * @method Mapper.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this Mapper class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport Component from './Component'\nimport Mapper, { MapperOpts } from './Mapper'\nimport Record from './Record'\n\nconst DOMAIN = 'Container'\n\nexport const proxiedMapperMethods = [\n  'count',\n  'create',\n  'createMany',\n  'createRecord',\n  'destroy',\n  'destroyAll',\n  'find',\n  'findAll',\n  'getSchema',\n  'is',\n  'sum',\n  'toJSON',\n  'update',\n  'updateAll',\n  'updateMany',\n  'validate'\n]\n\n/**\n * The `Container` class is a place to define and store {@link Mapper} instances.\n *\n * `Container` makes it easy to manage your Mappers. Without a container, you\n * need to manage Mappers yourself, including resolving circular dependencies\n * among relations. All Mappers in a container share the same adapters, so you\n * don't have to register adapters for every single Mapper.\n *\n * @example <caption>Container#constructor</caption>\n * // import { Container } from 'js-data';\n * const JSData = require('js-data');\n * const {Container} = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * const store = new Container();\n *\n * @class Container\n * @extends Component\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {Constructor} [opts.mapperClass] See {@link Container#mapperClass}.\n * @param {object} [opts.mapperDefaults] See {@link Container#mapperDefaults}.\n * @since 3.0.0\n */\nexport class Container extends Component {\n  mapperDefaults: any;\n  mapperClass: typeof Mapper;\n  _adapters: any;\n  _mappers: { [name: string]: Mapper };\n\n  constructor (opts = {}) {\n    super()\n\n    Object.defineProperties(this, {\n      /**\n       * The adapters registered with this Container, which are also shared by all\n       * Mappers in this Container.\n       *\n       * @name Container#_adapters\n       * @see Container#registerAdapter\n       * @since 3.0.0\n       * @type {Object}\n       */\n      _adapters: {\n        value: {}\n      },\n\n      /**\n       * The the mappers in this container\n       *\n       * @name Container#_mappers\n       * @see Mapper\n       * @since 3.0.0\n       * @type {Object}\n       */\n      _mappers: {\n        value: {}\n      },\n\n      /**\n       * Constructor function to use in {@link Container#defineMapper} to create new\n       * {@link Mapper} instances. {@link Container#mapperClass} should extend\n       * {@link Mapper}. By default {@link Mapper} is used to instantiate Mappers.\n       *\n       * @example <caption>Container#mapperClass</caption>\n       * // import { Container, Mapper } from 'js-data';\n       * const JSData = require('js-data');\n       * const { Container, Mapper } = JSData;\n       * console.log('Using JSData v' + JSData.version.full);\n       *\n       * class MyMapperClass extends Mapper {\n       *   foo () { return 'bar' }\n       * }\n       * const store = new Container({\n       *   mapperClass: MyMapperClass\n       * });\n       * store.defineMapper('user');\n       * console.log(store.getMapper('user').foo());\n       *\n       * @name Container#mapperClass\n       * @see Mapper\n       * @since 3.0.0\n       * @type {Constructor}\n       */\n      mapperClass: {\n        value: undefined,\n        writable: true\n      }\n    })\n\n    // Apply options provided by the user\n    utils.fillIn(this, opts)\n\n    /**\n     * Defaults options to pass to {@link Container#mapperClass} when creating a\n     * new {@link Mapper}.\n     *\n     * @example <caption>Container#mapperDefaults</caption>\n     * // import { Container } from 'js-data';\n     * const JSData = require('js-data');\n     * const { Container } = JSData;\n     * console.log('Using JSData v' + JSData.version.full);\n     *\n     * const store = new Container({\n     *   mapperDefaults: {\n     *     idAttribute: '_id'\n     *   }\n     * });\n     * store.defineMapper('user');\n     * console.log(store.getMapper('user').idAttribute);\n     *\n     * @default {}\n     * @name Container#mapperDefaults\n     * @since 3.0.0\n     * @type {Object}\n     */\n    this.mapperDefaults = this.mapperDefaults || {}\n\n    // Use the Mapper class if the user didn't provide a mapperClass\n    this.mapperClass = this.mapperClass || Mapper\n  }\n\n  /**\n   * Register a new event listener on this Container.\n   *\n   * Proxy for {@link Component#on}. If an event was emitted by a {@link Mapper}\n   * in the Container, then the name of the {@link Mapper} will be prepended to\n   * the arugments passed to the listener.\n   *\n   * @example <caption>Container#on</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * store.on('foo', function (...args) { console.log(args.join(':')) });\n   * store.defineMapper('user');\n   * store.emit('foo', 'arg1', 'arg2');\n   * store.getMapper('user').emit('foo', 'arg1', 'arg2');\n   *\n   * @method Container#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   * @since 3.0.0\n   */\n\n  /**\n   * Used to bind to events emitted by mappers in this container.\n   *\n   * @method Container#_onMapperEvent\n   * @param {string} name Name of the mapper that emitted the event.\n   * @param {...*} [args] Args See {@link Mapper#emit}.\n   * @private\n   * @since 3.0.0\n   */\n  _onMapperEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  }\n\n  /**\n   * Return a container scoped to a particular mapper.\n   *\n   * @example <caption>Container#as</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method Container#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} A container scoped to a particular mapper.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props: any = {}\n    const original = this\n    proxiedMapperMethods.forEach(method => {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    return Object.create(this, props)\n  }\n\n  /**\n   * Create a new mapper and register it in this container.\n   *\n   * @example <caption>Container#defineMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container({\n   *   mapperDefaults: { foo: 'bar' }\n   * });\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(UserMapper.foo);\n   *\n   * @method Container#defineMapper\n   * @param {string} name Name under which to register the new {@link Mapper}.\n   * {@link Mapper#name} will be set to this value.\n   * @param {object} [opts] Configuration options. Passed to\n   * {@link Container#mapperClass} when creating the new {@link Mapper}.\n   * @returns {Mapper} The newly created instance of {@link Mapper}.\n   * @see Container#as\n   * @since 3.0.0\n   */\n  defineMapper (name?: string | MapperOpts | any, opts?: MapperOpts) {\n    // For backwards compatibility with defineResource\n    if (utils.isObject(name)) {\n      opts = name\n      name = opts.name\n    }\n    if (!utils.isString(name)) {\n      throw utils.err(`${DOMAIN}#defineMapper`, 'name')(400, 'string', name)\n    }\n\n    // Default values for arguments\n    opts = opts || {}\n    // Set Mapper#name\n    opts.name = name\n    opts.relations = opts.relations || {}\n\n    // Check if the user is overriding the datastore's default mapperClass\n    const mapperClass = opts.mapperClass || this.mapperClass\n    delete opts.mapperClass\n\n    // Apply the datastore's defaults to the options going into the mapper\n    utils.fillIn(opts, this.mapperDefaults)\n\n    // Instantiate a mapper\n    const mapper = (this._mappers[name] = new mapperClass(opts)); // eslint-disable-line\n    mapper.relations = mapper.relations || {}\n    // Make sure the mapper's name is set\n    mapper.name = name\n    // All mappers in this datastore will share adapters\n    mapper._adapters = this.getAdapters()\n\n    mapper.datastore = this\n\n    mapper.on('all', (...args) => this._onMapperEvent(name, ...args))\n    mapper.defineRelations()\n\n    return mapper\n  }\n\n  defineResource (name, opts) {\n    console.warn('DEPRECATED: defineResource is deprecated, use defineMapper instead')\n    return this.defineMapper(name, opts)\n  }\n\n  /**\n   * Return the registered adapter with the given name or the default adapter if\n   * no name is provided.\n   *\n   * @method Container#getAdapter\n   * @param {string} [name] The name of the adapter to retrieve.\n   * @returns {Adapter} The adapter.\n   * @since 3.0.0\n   */\n  getAdapter (name?) {\n    const adapter = this.getAdapterName(name)\n    if (!adapter) {\n      throw utils.err(`${DOMAIN}#getAdapter`, 'name')(400, 'string', name)\n    }\n    return this.getAdapters()[adapter]\n  }\n\n  /**\n   * Return the name of a registered adapter based on the given name or options,\n   * or the name of the default adapter if no name provided.\n   *\n   * @method Container#getAdapterName\n   * @param {(Object|string)} [opts] The name of an adapter or options, if any.\n   * @returns {string} The name of the adapter.\n   * @since 3.0.0\n   */\n  getAdapterName (opts: any = {}) {\n    if (utils.isString(opts)) {\n      opts = { adapter: opts }\n    }\n    return opts.adapter || this.mapperDefaults.defaultAdapter\n  }\n\n  /**\n   * Return the registered adapters of this container.\n   *\n   * @method Container#getAdapters\n   * @returns {Adapter}\n   * @since 3.0.0\n   */\n  getAdapters () {\n    return this._adapters\n  }\n\n  /**\n   * Return the mapper registered under the specified name.\n   *\n   * @example <caption>Container#getMapper</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * store.getMapper('profile'); // throws Error, there is no mapper with name \"profile\"\n   *\n   * @method Container#getMapper\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapper (name: string): Mapper {\n    const mapper = this.getMapperByName(name)\n    if (!mapper) {\n      throw utils.err(`${DOMAIN}#getMapper`, name)(404, 'mapper')\n    }\n    return mapper\n  }\n\n  /**\n   * Return the mapper registered under the specified name.\n   * Doesn't throw error if mapper doesn't exist.\n   *\n   * @example <caption>Container#getMapperByName</caption>\n   * // import { Container } from 'js-data';\n   * const JSData = require('js-data');\n   * const { Container } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new Container();\n   * // Container#defineMapper returns a direct reference to the newly created\n   * // Mapper.\n   * const UserMapper = store.defineMapper('user');\n   * console.log(UserMapper === store.getMapper('user'));\n   * console.log(UserMapper === store.as('user').getMapper());\n   * console.log(store.getMapper('profile')); // Does NOT throw an error\n   *\n   * @method Container#getMapperByName\n   * @param {string} name {@link Mapper#name}.\n   * @returns {Mapper}\n   * @since 3.0.0\n   */\n  getMapperByName (name) {\n    return this._mappers[name]\n  }\n\n  /**\n   * Register an adapter on this container under the given name. Adapters\n   * registered on a container are shared by all mappers in the container.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import { RethinkDBAdapter } from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   *\n   * @method Container#registerAdapter\n   * @param {string} name The name of the adapter to register.\n   * @param {Adapter} adapter The adapter to register.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.default=false] Whether to make the adapter the\n   * default adapter for all Mappers in this container.\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/connecting-to-a-data-source\",\"Connecting to a data source\"]\n   */\n  registerAdapter (name, adapter, opts: any = {}) {\n    this.getAdapters()[name] = adapter\n    // Optionally make it the default adapter for the target.\n    if (opts === true || opts.default) {\n      this.mapperDefaults.defaultAdapter = name\n      utils.forOwn(this._mappers, mapper => {\n        mapper.defaultAdapter = name\n      })\n    }\n  }\n\n  /**\n   * Wrapper for {@link Mapper#count}.\n   *\n   * @example\n   * // Get the number of published blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.count('post', { status: 'published' }).then((numPublished) => {\n   *   console.log(numPublished); // e.g. 45\n   * });\n   *\n   * @method Container#count\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#count}.\n   * @param {object} [opts] See {@link Mapper#count}.\n   * @returns {Promise} See {@link Mapper#count}.\n   * @see Mapper#count\n   * @since 3.0.0\n   */\n  count (name, query, opts?) {\n    return this.getMapper(name).count(query, opts)\n  }\n\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~beforeCreateListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreate\n   * @see Container~beforeCreateListener\n   * @see Container#create\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback Container~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see Container#event:beforeCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#create}. See\n   * {@link Container~afterCreateListener} for how to listen for this event.\n   *\n   * @event Container#afterCreate\n   * @see Container~afterCreateListener\n   * @see Container#create\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback Container~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see Container#event:afterCreate\n   * @see Container#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}.\n   *\n   * @example\n   * // Create and save a new blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.create('post', {\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreate\n   * @fires Container#afterCreate\n   * @method Container#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#create}.\n   * @param {object} [opts] See {@link Mapper#create}.\n   * @returns {Promise} See {@link Mapper#create}.\n   * @see Mapper#create\n   * @since 3.0.0\n   */\n  create (name, props, opts) {\n    return this.getMapper(name).create(props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeCreateMany\n   * @see Container~beforeCreateManyListener\n   * @see Container#createMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback Container~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see Container#event:beforeCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#createMany}. See\n   * {@link Container~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterCreateMany\n   * @see Container~afterCreateManyListener\n   * @see Container#createMany\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback Container~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see Container#event:afterCreateMany\n   * @see Container#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}.\n   *\n   * @example\n   * // Create and save several new blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.createMany('post', [{\n   *   title: 'Modeling your data',\n   *   status: 'draft'\n   * }, {\n   *   title: 'Reading data',\n   *   status: 'draft'\n   * }]).then((posts) => {\n   *   console.log(posts[0]); // { id: 1234, status: 'draft', ... }\n   *   console.log(posts[1]); // { id: 1235, status: 'draft', ... }\n   * });\n   *\n   * @fires Container#beforeCreateMany\n   * @fires Container#afterCreateMany\n   * @method Container#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record[]} records See {@link Mapper#createMany}.\n   * @param {object} [opts] See {@link Mapper#createMany}.\n   * @returns {Promise} See {@link Mapper#createMany}.\n   * @see Mapper#createMany\n   * @since 3.0.0\n   */\n  createMany (name, records, opts) {\n    return this.getMapper(name).createMany(records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * __Note:__ This method does __not__ interact with any adapter, and does\n   * __not__ save any data. It only creates new objects in memory.\n   *\n   * @example\n   * // Create empty unsaved record instance\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = PostMapper.createRecord();\n   *\n   * @method Container#createRecord\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Object[]} props See {@link Mapper#createRecord}.\n   * @param {object} [opts] See {@link Mapper#createRecord}.\n   * @returns {Promise} See {@link Mapper#createRecord}.\n   * @see Mapper#createRecord\n   * @since 3.0.0\n   */\n  createRecord (name, props?, opts?) {\n    return this.getMapper(name).createRecord(props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroy\n   * @see Container~beforeDestroyListener\n   * @see Container#destroy\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback Container~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see Container#event:beforeDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroy}. See\n   * {@link Container~afterDestroyListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroy\n   * @see Container~afterDestroyListener\n   * @see Container#destroy\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback Container~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see Container#event:afterDestroy\n   * @see Container#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}.\n   *\n   * @example\n   * // Destroy a specific blog post\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroy('post', 1234).then(() => {\n   *   // Blog post #1234 has been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroy\n   * @fires Container#afterDestroy\n   * @method Container#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#destroy}.\n   * @param {object} [opts] See {@link Mapper#destroy}.\n   * @returns {Promise} See {@link Mapper#destroy}.\n   * @see Mapper#destroy\n   * @since 3.0.0\n   */\n  destroy (name, id, opts) {\n    return this.getMapper(name).destroy(id, opts)\n  }\n\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeDestroyAll\n   * @see Container~beforeDestroyAllListener\n   * @see Container#destroyAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback Container~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see Container#event:beforeDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#destroyAll}. See\n   * {@link Container~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event Container#afterDestroyAll\n   * @see Container~afterDestroyAllListener\n   * @see Container#destroyAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback Container~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see Container#event:afterDestroyAll\n   * @see Container#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}.\n   *\n   * @example\n   * // Destroy all \"draft\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.destroyAll('post', { status: 'draft' }).then(() => {\n   *   // All \"draft\" blog posts have been destroyed\n   * });\n   *\n   * @fires Container#beforeDestroyAll\n   * @fires Container#afterDestroyAll\n   * @method Container#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#destroyAll}.\n   * @param {object} [opts] See {@link Mapper#destroyAll}.\n   * @returns {Promise} See {@link Mapper#destroyAll}.\n   * @see Mapper#destroyAll\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts) {\n    return this.getMapper(name).destroyAll(query, opts)\n  }\n\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~beforeFindListener} for how to listen for this event.\n   *\n   * @event Container#beforeFind\n   * @see Container~beforeFindListener\n   * @see Container#find\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback Container~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see Container#event:beforeFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#find}. See\n   * {@link Container~afterFindListener} for how to listen for this event.\n   *\n   * @event Container#afterFind\n   * @see Container~afterFindListener\n   * @see Container#find\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback Container~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see Container#event:afterFind\n   * @see Container#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.find('post', 1).then((post) => {\n   *   console.log(post) // { id: 1, ...}\n   * });\n   *\n   * @fires Container#beforeFind\n   * @fires Container#afterFind\n   * @method Container#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#find}.\n   * @param {object} [opts] See {@link Mapper#find}.\n   * @returns {Promise} See {@link Mapper#find}.\n   * @see Mapper#find\n   * @since 3.0.0\n   */\n  find (name, id, opts) {\n    return this.getMapper(name).find(id, opts)\n  }\n\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeFindAll\n   * @see Container~beforeFindAllListener\n   * @see Container#findAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback Container~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see Container#event:beforeFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#findAll}. See\n   * {@link Container~afterFindAllListener} for how to listen for this event.\n   *\n   * @event Container#afterFindAll\n   * @see Container~afterFindAllListener\n   * @see Container#findAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback Container~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see Container#event:afterFindAll\n   * @see Container#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createRecord}.\n   *\n   * @example\n   * // Find all \"published\" blog posts\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.findAll('post', { status: 'published' }).then((posts) => {\n   *   console.log(posts); // [{ id: 1, ...}, ...]\n   * });\n   *\n   * @fires Container#beforeFindAll\n   * @fires Container#afterFindAll\n   * @method Container#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] See {@link Mapper#findAll}.\n   * @param {object} [opts] See {@link Mapper#findAll}.\n   * @returns {Promise} See {@link Mapper#findAll}.\n   * @see Mapper#findAll\n   * @since 3.0.0\n   */\n  findAll (name, query, opts) {\n    return this.getMapper(name).findAll(query, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#getSchema}.\n   *\n   * @method Container#getSchema\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @returns {Schema} See {@link Mapper#getSchema}.\n   * @see Mapper#getSchema\n   * @since 3.0.0\n   */\n  getSchema (name) {\n    return this.getMapper(name).getSchema()\n  }\n\n  /**\n   * Wrapper for {@link Mapper#is}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post');\n   * const post = store.createRecord();\n   *\n   * console.log(store.is('post', post)); // true\n   * // Equivalent to what's above\n   * console.log(post instanceof store.getMapper('post').recordClass); // true\n   *\n   * @method Container#is\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Object|Record} record See {@link Mapper#is}.\n   * @returns {boolean} See {@link Mapper#is}.\n   * @see Mapper#is\n   * @since 3.0.0\n   */\n  is (name, record) {\n    return this.getMapper(name).is(record)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#sum}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('purchase_order');\n   *\n   * store.sum('purchase_order', 'amount', { status: 'paid' }).then((amountPaid) => {\n   *   console.log(amountPaid); // e.g. 451125.34\n   * });\n   *\n   * @method Container#sum\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {string} field See {@link Mapper#sum}.\n   * @param {object} [query] See {@link Mapper#sum}.\n   * @param {object} [opts] See {@link Mapper#sum}.\n   * @returns {Promise} See {@link Mapper#sum}.\n   * @see Mapper#sum\n   * @since 3.0.0\n   */\n  sum (name, field, query, opts) {\n    return this.getMapper(name).sum(field, query, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#toJSON}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('person', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * const person = store.createRecord('person', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is stripped by toJSON()\n   * console.log(store.toJSON('person', person)); // {\"id\":1,\"name\":\"John\"}\n   *\n   * store.defineMapper('personRelaxed', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     },\n   *     additionalProperties: true\n   *   }\n   * });\n   * const person2 = store.createRecord('personRelaxed', { id: 1, name: 'John', foo: 'bar' });\n   * // \"foo\" is not stripped by toJSON\n   * console.log(store.toJSON('personRelaxed', person2)); // {\"id\":1,\"name\":\"John\",\"foo\":\"bar\"}\n   *\n   * @method Container#toJSON\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {Record|Record[]} records See {@link Mapper#toJSON}.\n   * @param {object} [opts] See {@link Mapper#toJSON}.\n   * @returns {Object|Object[]} See {@link Mapper#toJSON}.\n   * @see Mapper#toJSON\n   * @since 3.0.0\n   */\n  toJSON (name, records, opts?) {\n    return this.getMapper(name).toJSON(records, opts)\n  }\n\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdate\n   * @see Container~beforeUpdateListener\n   * @see Container#update\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback Container~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see Container#event:beforeUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#update}. See\n   * {@link Container~afterUpdateListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdate\n   * @see Container~afterUpdateListener\n   * @see Container#update\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback Container~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see Container#event:afterUpdate\n   * @see Container#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.update('post', 1234, {\n   *   status: 'published',\n   *   published_at: new Date()\n   * }).then((post) => {\n   *   console.log(post); // { id: 1234, status: 'published', ... }\n   * });\n   *\n   * @fires Container#beforeUpdate\n   * @fires Container#afterUpdate\n   * @method Container#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Mapper#update}.\n   * @param {object} props See {@link Mapper#update}.\n   * @param {object} [opts] See {@link Mapper#update}.\n   * @returns {Promise} See {@link Mapper#update}.\n   * @see Mapper#update\n   * @since 3.0.0\n   * @tutorial [\"http://www.js-data.io/v3.0/docs/saving-data\",\"Saving data\"]\n   */\n  update (name, id, props, opts) {\n    return this.getMapper(name).update(id, props, opts)\n  }\n\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateAll\n   * @see Container~beforeUpdateAllListener\n   * @see Container#updateAll\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback Container~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see Container#event:beforeUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateAll}. See\n   * {@link Container~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateAll\n   * @see Container~afterUpdateAllListener\n   * @see Container#updateAll\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback Container~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see Container#event:afterUpdateAll\n   * @see Container#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}.\n   *\n   * @example\n   * // Turn all of John's blog posts into drafts.\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * const update = { status: draft: published_at: null };\n   * const query = { userId: 1234 };\n   * store.updateAll('post', update, query).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateAll\n   * @fires Container#afterUpdateAll\n   * @method Container#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props See {@link Mapper#updateAll}.\n   * @param {object} [query] See {@link Mapper#updateAll}.\n   * @param {object} [opts] See {@link Mapper#updateAll}.\n   * @returns {Promise} See {@link Mapper#updateAll}.\n   * @see Mapper#updateAll\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts) {\n    return this.getMapper(name).updateAll(props, query, opts)\n  }\n\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#beforeUpdateMany\n   * @see Container~beforeUpdateManyListener\n   * @see Container#updateMany\n   */\n  /**\n   * Callback signature for the {@link Container#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback Container~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see Container#event:beforeUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link Container#updateMany}. See\n   * {@link Container~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event Container#afterUpdateMany\n   * @see Container~afterUpdateManyListener\n   * @see Container#updateMany\n   */\n\n  /**\n   * Callback signature for the {@link Container#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback Container~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see Container#event:afterUpdateMany\n   * @see Container#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * import RethinkDBAdapter from 'js-data-rethinkdb';\n   * const store = new Container();\n   * store.registerAdapter('rethinkdb', new RethinkDBAdapter(), { default: true });\n   * store.defineMapper('post');\n   *\n   * store.updateMany('post', [\n   *   { id: 1234, status: 'draft' },\n   *   { id: 2468, status: 'published', published_at: new Date() }\n   * ]).then((posts) => {\n   *   console.log(posts); // [...]\n   * });\n   *\n   * @fires Container#beforeUpdateMany\n   * @fires Container#afterUpdateMany\n   * @method Container#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#updateMany}.\n   * @param {object} [opts] See {@link Mapper#updateMany}.\n   * @returns {Promise} See {@link Mapper#updateMany}.\n   * @see Mapper#updateMany\n   * @since 3.0.0\n   */\n  updateMany (name, record, opts) {\n    return this.getMapper(name).updateMany(record, opts)\n  }\n\n  /**\n   * Wrapper for {@link Mapper#validate}.\n   *\n   * @example\n   * import { Container } from 'js-data';\n   * const store = new Container();\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       name: { type: 'string' },\n   *       id: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * let errors = store.validate('post', { name: 'John' });\n   * console.log(errors); // undefined\n   * errors = store.validate('post', { name: 123 });\n   * console.log(errors); // [{ expected: 'one of (string)', actual: 'number', path: 'name' }]\n   *\n   * @method Container#validate\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records See {@link Mapper#validate}.\n   * @param {object} [opts] See {@link Mapper#validate}.\n   * @returns {Promise} See {@link Mapper#validate}.\n   * @see Mapper#validate\n   * @since 3.0.0\n   */\n  validate (name, record, opts) {\n    return this.getMapper(name).validate(record, opts)\n  }\n}\n","import utils from './utils'\n\nimport { belongsToType, hasManyType, hasOneType } from './decorators'\nimport { Container, proxiedMapperMethods } from './Container'\nimport Collection from './Collection'\nimport { MapperOpts } from './Mapper'\nimport Schema from './Schema'\n\nconst DOMAIN = 'SimpleStore'\nconst proxiedCollectionMethods = [\n  'add',\n  'between',\n  'createIndex',\n  'filter',\n  'get',\n  'getAll',\n  'prune',\n  'query',\n  'toJSON',\n  'unsaved'\n]\nconst ownMethodsForScoping = ['addToCache', 'cachedFind', 'cachedFindAll', 'cacheFind', 'cacheFindAll', 'hashQuery']\n\nconst cachedFn = function (name, hashOrId, opts) {\n  const cached = this._completedQueries[name][hashOrId]\n  if (utils.isFunction(cached)) {\n    return cached(name, hashOrId, opts)\n  }\n  return cached\n}\n\nexport interface SimpleStoreOpts {\n  /**\n   * Whether to use the pending query if a `find` request for the specified\n   * record is currently underway. Can be set to `true`, `false`, or to a\n   * function that returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFind\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFind?: boolean | Function\n\n  /**\n   * Whether to use the pending query if a `findAll` request for the given query\n   * is currently underway. Can be set to `true`, `false`, or to a function that\n   * returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFindAll\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFindAll?: boolean | Function\n}\n\nconst SIMPLESTORE_DEFAULTS = {\n  /**\n   * Whether to use the pending query if a `find` request for the specified\n   * record is currently underway. Can be set to `true`, `false`, or to a\n   * function that returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFind\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFind: true,\n\n  /**\n   * Whether to use the pending query if a `findAll` request for the given query\n   * is currently underway. Can be set to `true`, `false`, or to a function that\n   * returns `true` or `false`.\n   *\n   * @default true\n   * @name SimpleStore#usePendingFindAll\n   * @since 3.0.0\n   * @type {boolean|Function}\n   */\n  usePendingFindAll: true\n}\n\n/**\n * The `SimpleStore` class is an extension of {@link Container}. Not only does\n * `SimpleStore` manage mappers, but also collections. `SimpleStore` implements the\n * asynchronous {@link Mapper} methods, such as {@link Mapper#find} and\n * {@link Mapper#create}. If you use the asynchronous `SimpleStore` methods\n * instead of calling them directly on the mappers, then the results of the\n * method calls will be inserted into the store's collections. You can think of\n * a `SimpleStore` as an [Identity Map](https://en.wikipedia.org/wiki/Identity_map_pattern)\n * for the [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\n * (the Mappers).\n *\n * ```javascript\n * import { SimpleStore } from 'js-data';\n * ```\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * import { HttpAdapter } from 'js-data-http';\n * const store = new SimpleStore();\n *\n * // SimpleStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // SimpleStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful SimpleStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class SimpleStore\n * @extends Container\n * @param {object} [opts] Configuration options. See {@link Container}.\n * @param {boolean} [opts.collectionClass={@link Collection}] See {@link SimpleStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link SimpleStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link SimpleStore#usePendingFindAll}.\n * @returns {SimpleStore}\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-SimpleStore\",\"Working with the SimpleStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nexport default class SimpleStore extends Container {\n  collectionClass: typeof Collection;\n  _collections: { [name: string]: Collection } = {};\n  _completedQueries = {};\n  _pendingQueries = {};\n  usePendingFind: boolean;\n  usePendingFindAll: boolean;\n\n  constructor (opts: SimpleStoreOpts = {}) {\n    super({ ...SIMPLESTORE_DEFAULTS, ...opts })\n    this.collectionClass = this.collectionClass || Collection\n  }\n\n  /**\n   * Internal method used to handle Mapper responses.\n   *\n   * @method SimpleStore#_end\n   * @private\n   * @param {string} name Name of the {@link Collection} to which to\n   * add the data.\n   * @param {object} result The result from a Mapper.\n   * @param {object} [opts] Configuration options.\n   * @returns {(Object|Array)} Result.\n   */\n  _end (name, result, opts) {\n    let data = opts.raw ? result.data : result\n    if (data && utils.isFunction(this.addToCache)) {\n      data = this.addToCache(name, data, opts)\n      if (opts.raw) {\n        result.data = data\n      } else {\n        result = data\n      }\n    }\n    return result\n  }\n\n  /**\n   * Register a new event listener on this SimpleStore.\n   *\n   * Proxy for {@link Container#on}. If an event was emitted by a Mapper or\n   * Collection in the SimpleStore, then the name of the Mapper or Collection will\n   * be prepended to the arugments passed to the provided event handler.\n   *\n   * @example\n   * // Listen for all \"afterCreate\" events in a SimpleStore\n   * store.on('afterCreate', (mapperName, props, opts, result) => {\n   *   console.log(mapperName); // \"post\"\n   *   console.log(props.id); // undefined\n   *   console.log(result.id); // 1234\n   * });\n   * store.create('post', { title: 'Modeling your data' }).then((post) => {\n   *   console.log(post.id); // 1234\n   * });\n   *\n   * @example\n   * // Listen for the \"add\" event on a collection\n   * store.on('add', (mapperName, records) => {\n   *   console.log(records); // [...]\n   * });\n   *\n   * @example\n   * // Listen for \"change\" events on a record\n   * store.on('change', (mapperName, record, changes) => {\n   *   console.log(changes); // { changed: { title: 'Modeling your data' } }\n   * });\n   * post.title = 'Modeling your data';\n   *\n   * @method SimpleStore#on\n   * @param {string} event Name of event to subsribe to.\n   * @param {Function} listener Listener function to handle the event.\n   * @param {*} [ctx] Optional content in which to invoke the listener.\n   */\n\n  /**\n   * Used to bind to events emitted by collections in this store.\n   *\n   * @method SimpleStore#_onCollectionEvent\n   * @private\n   * @param {string} name Name of the collection that emitted the event.\n   * @param {...*} [args] Args passed to {@link Collection#emit}.\n   */\n  _onCollectionEvent (name, ...args) {\n    const type = args.shift()\n    this.emit(type, name, ...args)\n  }\n\n  /**\n   * This method takes the data received from {@link SimpleStore#find},\n   * {@link SimpleStore#findAll}, {@link SimpleStore#update}, etc., and adds the\n   * data to the store. _You don't need to call this method directly._\n   *\n   * If you're using the http adapter and your response data is in an unexpected\n   * format, you may need to override this method so the right data gets added\n   * to the store.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return SimpleStore.prototype.addToCache.call(this, mapperName, data, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   addToCache (mapperName, data, opts) {\n   *     // Let's say for a particular Resource, response data is in a weird format\n   *     if (name === 'comment') {\n   *       // Re-assign the variable to add the correct records into the stores\n   *       data = data.items;\n   *     }\n   *     // Now perform default behavior\n   *     return super.addToCache(mapperName, data, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#addToCache\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {*} data Data from which data should be selected for add.\n   * @param {object} [opts] Configuration options.\n   */\n  addToCache (name, data, opts) {\n    return this.getCollection(name).add(data, opts)\n  }\n\n  /**\n   * Return the store scoped to a particular mapper/collection pair.\n   *\n   * @example <caption>SimpleStore.as</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * const UserMapper = store.defineMapper('user');\n   * const UserStore = store.as('user');\n   *\n   * const user1 = store.createRecord('user', { name: 'John' });\n   * const user2 = UserStore.createRecord({ name: 'John' });\n   * const user3 = UserMapper.createRecord({ name: 'John' });\n   * console.log(user1 === user2);\n   * console.log(user2 === user3);\n   * console.log(user1 === user3);\n   *\n   * @method SimpleStore#as\n   * @param {string} name Name of the {@link Mapper}.\n   * @returns {Object} The store, scoped to a particular Mapper/Collection pair.\n   * @since 3.0.0\n   */\n  as (name) {\n    const props: any = {}\n    const original = this\n    const methods = ownMethodsForScoping.concat(proxiedMapperMethods).concat(proxiedCollectionMethods)\n\n    methods.forEach(method => {\n      props[method] = {\n        writable: true,\n        value (...args) {\n          return original[method](name, ...args)\n        }\n      }\n    })\n    props.getMapper = {\n      writable: true,\n      value () {\n        return original.getMapper(name)\n      }\n    }\n    props.getCollection = {\n      writable: true,\n      value () {\n        return original.getCollection(name)\n      }\n    }\n    return Object.create(this, props)\n  }\n\n  /**\n   * Retrieve a cached `find` result, if any. This method is called during\n   * {@link SimpleStore#find} to determine if {@link Mapper#find} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#find} will\n   * be called. Otherwise {@link SimpleStore#find} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFind.call(this, mapperName, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFind (mapperName, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#find call\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFind(mapperName, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cachedFind = cachedFn\n\n  /**\n   * Retrieve a cached `findAll` result, if any. This method is called during\n   * {@link SimpleStore#findAll} to determine if {@link Mapper#findAll} needs to be\n   * called. If this method returns `undefined` then {@link Mapper#findAll} will\n   * be called. Otherwise {@link SimpleStore#findAll} will immediately resolve with\n   * the return value of this method.\n   *\n   * When using {@link SimpleStore} in the browser, you can override this method\n   * to implement your own cache-busting strategy.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return undefined to trigger a Mapper#findAll call\n   *       return undefined;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cachedFindAll(mapperName, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cachedFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cachedFindAll = cachedFn\n\n  /**\n   * Mark a {@link Mapper#find} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `find` entry is\n   * added it means subsequent calls to the same Resource with the same `id`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#get} instead of delegating to {@link Mapper#find}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return SimpleStore.prototype.cacheFind.call(this, mapperName, data, id, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cacheFind (mapperName, data, id, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior\n   *     return super.cacheFind(mapperName, data, id, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFind\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}.\n   * @param {*} data The result to cache.\n   * @param {(string|number)} id The `id` argument passed to {@link SimpleStore#find}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#find}.\n   * @since 3.0.0\n   */\n  cacheFind (name, data, id, opts) {\n    this._completedQueries[name][id] = (name, id, opts) => this.get(name, id)\n  }\n\n  /**\n   * Mark a {@link Mapper#findAll} result as cached by adding an entry to\n   * {@link SimpleStore#_completedQueries}. By default, once a `findAll` entry is\n   * added it means subsequent calls to the same Resource with the same `query`\n   * argument will immediately resolve with the result of calling\n   * {@link SimpleStore#filter} instead of delegating to {@link Mapper#findAll}.\n   *\n   * As part of implementing your own caching strategy, you may choose to\n   * override this method.\n   *\n   * @example\n   * const store = new SimpleStore({\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return SimpleStore.prototype.cachedFindAll.call(this, mapperName, data, hash, opts);\n   *   }\n   * });\n   *\n   * @example\n   * // Extend using ES2015 class syntax.\n   * class MyStore extends SimpleStore {\n   *   cachedFindAll (mapperName, data, hash, opts) {\n   *     // Let's say for a particular Resource, we always want to pull fresh from the server\n   *     if (mapperName === 'schedule') {\n   *       // Return without saving an entry to SimpleStore#_completedQueries\n   *       return;\n   *     }\n   *     // Otherwise perform default behavior.\n   *     return super.cachedFindAll(mapperName, data, hash, opts);\n   *   }\n   * }\n   * const store = new MyStore();\n   *\n   * @method SimpleStore#cacheFindAll\n   * @param {string} name The `name` argument passed to {@link SimpleStore#findAll}.\n   * @param {*} data The result to cache.\n   * @param {string} hash The result of calling {@link SimpleStore#hashQuery} on\n   * the `query` argument passed to {@link SimpleStore#findAll}.\n   * @param {object} opts The `opts` argument passed to {@link SimpleStore#findAll}.\n   * @since 3.0.0\n   */\n  cacheFindAll (name, data, hash, opts) {\n    this._completedQueries[name][hash] = (name, hash, opts) => this.filter(name, utils.fromJson(hash))\n  }\n\n  /**\n   * Remove __all__ records from the in-memory store and reset\n   * {@link SimpleStore#_completedQueries}.\n   *\n   * @method SimpleStore#clear\n   * @returns {Object} Object containing all records that were in the store.\n   * @see SimpleStore#remove\n   * @see SimpleStore#removeAll\n   * @since 3.0.0\n   */\n  clear () {\n    const removed = {}\n    utils.forOwn(this._collections, (collection, name) => {\n      removed[name] = collection.removeAll()\n      this._completedQueries[name] = {}\n    })\n    return removed\n  }\n\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~beforeCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreate\n   * @see SimpleStore~beforeCreateListener\n   * @see SimpleStore#create\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreate} event.\n   *\n   * @example\n   * function onBeforeCreate (mapperName, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreate', onBeforeCreate);\n   *\n   * @callback SimpleStore~beforeCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreate}.\n   * @see SimpleStore#event:beforeCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#create}. See\n   * {@link SimpleStore~afterCreateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreate\n   * @see SimpleStore~afterCreateListener\n   * @see SimpleStore#create\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreate} event.\n   *\n   * @example\n   * function onAfterCreate (mapperName, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreate', onAfterCreate);\n   *\n   * @callback SimpleStore~afterCreateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterCreate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreate}.\n   * @see SimpleStore#event:afterCreate\n   * @see SimpleStore#create\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#create}. Adds the created record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book {\"author_id\":1234,...}\n   * store.create('book', {\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }).then((book) => {\n   *   console.log(book.id); // 120392\n   *   console.log(book.title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreate\n   * @fires SimpleStore#afterCreate\n   * @fires SimpleStore#add\n   * @method SimpleStore#create\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} record Passed to {@link Mapper#create}.\n   * @param {object} [opts] Passed to {@link Mapper#create}. See\n   * {@link Mapper#create} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  create (name, record, opts: any = {}) {\n    return super.create(name, record, opts).then(result => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~beforeCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeCreateMany\n   * @see SimpleStore~beforeCreateManyListener\n   * @see SimpleStore#createMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeCreateMany} event.\n   *\n   * @example\n   * function onBeforeCreateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeCreateMany', onBeforeCreateMany);\n   *\n   * @callback SimpleStore~beforeCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeCreateMany}.\n   * @see SimpleStore#event:beforeCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#createMany}. See\n   * {@link SimpleStore~afterCreateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterCreateMany\n   * @see SimpleStore~afterCreateManyListener\n   * @see SimpleStore#createMany\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterCreateMany} event.\n   *\n   * @example\n   * function onAfterCreateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterCreateMany', onAfterCreateMany);\n   *\n   * @callback SimpleStore~afterCreateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterCreateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterCreateMany}.\n   * @see SimpleStore#event:afterCreateMany\n   * @see SimpleStore#createMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#createMany}. Adds the created records to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   POST /book [{\"author_id\":1234,...},{...}]\n   * store.createMany('book', [{\n   *   author_id: 1234,\n   *   edition: 'First Edition',\n   *   title: 'Respect your Data'\n   * }, {\n   *   author_id: 1234,\n   *   edition: 'Second Edition',\n   *   title: 'Respect your Data'\n   * }]).then((books) => {\n   *   console.log(books[0].id); // 142394\n   *   console.log(books[0].title); // \"Respect your Data\"\n   * });\n   *\n   * @fires SimpleStore#beforeCreateMany\n   * @fires SimpleStore#afterCreateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#createMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {array} records Passed to {@link Mapper#createMany}.\n   * @param {object} [opts] Passed to {@link Mapper#createMany}. See\n   * {@link Mapper#createMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the create.\n   * @since 3.0.0\n   */\n  createMany (name, records, opts: any = {}) {\n    return super.createMany(name, records, opts).then(result => this._end(name, result, opts))\n  }\n\n  defineMapper (name, opts: MapperOpts = {}) {\n    const self = this\n    const mapper = super.defineMapper(name, opts)\n    self._pendingQueries[name] = {}\n    self._completedQueries[name] = {}\n    if (!mapper.relationList) Object.defineProperty(mapper, 'relationList', { value: [] })\n\n    const collectionOpts: any = {\n      // Make sure the collection has somewhere to store \"added\" timestamps\n      _added: {},\n      // Give the collection a reference to this SimpleStore\n      datastore: this,\n      // The mapper tied to the collection\n      mapper\n    }\n\n    if (opts && 'onConflict' in opts) {\n      collectionOpts.onConflict = opts.onConflict\n    }\n\n    // The SimpleStore uses a subclass of Collection that is \"SimpleStore-aware\"\n    const collection = (self._collections[name] = new self.collectionClass(null, collectionOpts))\n\n    const schema = mapper.schema || ({} as Schema)\n    const properties = schema.properties || {}\n    // TODO: Make it possible index nested properties?\n    utils.forOwn(properties, (opts, prop) => {\n      if (opts.indexed) {\n        collection.createIndex(prop)\n      }\n    })\n\n    // Create a secondary index on the \"added\" timestamps of records in the\n    // collection\n    collection.createIndex('addedTimestamps', ['$'], {\n      fieldGetter (obj) {\n        return collection._added[collection.recordId(obj)]\n      }\n    })\n\n    collection.on('all', (...args) => {\n      self._onCollectionEvent(name, ...args)\n    })\n\n    return mapper\n  }\n\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~beforeDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroy\n   * @see SimpleStore~beforeDestroyListener\n   * @see SimpleStore#destroy\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroy} event.\n   *\n   * @example\n   * function onBeforeDestroy (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroy', onBeforeDestroy);\n   *\n   * @callback SimpleStore~beforeDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroy}.\n   * @see SimpleStore#event:beforeDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroy}. See\n   * {@link SimpleStore~afterDestroyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroy\n   * @see SimpleStore~afterDestroyListener\n   * @see SimpleStore#destroy\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroy} event.\n   *\n   * @example\n   * function onAfterDestroy (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroy', onAfterDestroy);\n   *\n   * @callback SimpleStore~afterDestroyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroy}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroy}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroy}.\n   * @see SimpleStore#event:afterDestroy\n   * @see SimpleStore#destroy\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroy}. Removes any destroyed record from the\n   * in-memory store. Clears out any {@link SimpleStore#_completedQueries} entries\n   * associated with the provided `id`.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is no longer in the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroy\n   * @fires SimpleStore#afterDestroy\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroy\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#destroy}.\n   * @param {object} [opts] Passed to {@link Mapper#destroy}. See\n   * {@link Mapper#destroy} for more configuration options.\n   * @returns {Promise} Resolves when the destroy operation completes.\n   * @since 3.0.0\n   */\n  destroy (name, id, opts: any = {}) {\n    return super.destroy(name, id, opts).then(result => {\n      const record = this.getCollection(name).remove(id, opts)\n\n      if (opts.raw) {\n        result.data = record\n      } else {\n        result = record\n      }\n      delete this._pendingQueries[name][id]\n      delete this._completedQueries[name][id]\n      return result\n    })\n  }\n\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~beforeDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeDestroyAll\n   * @see SimpleStore~beforeDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeDestroyAll} event.\n   *\n   * @example\n   * function onBeforeDestroyAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeDestroyAll', onBeforeDestroyAll);\n   *\n   * @callback SimpleStore~beforeDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeDestroyAll}.\n   * @see SimpleStore#event:beforeDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#destroyAll}. See\n   * {@link SimpleStore~afterDestroyAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterDestroyAll\n   * @see SimpleStore~afterDestroyAllListener\n   * @see SimpleStore#destroyAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterDestroyAll} event.\n   *\n   * @example\n   * function onAfterDestroyAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterDestroyAll', onAfterDestroyAll);\n   *\n   * @callback SimpleStore~afterDestroyAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterDestroyAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterDestroyAll}.\n   * @see SimpleStore#event:afterDestroyAll\n   * @see SimpleStore#destroyAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#destroyAll}. Removes any destroyed records from\n   * the in-memory store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * store.add('book', { id: 1234, title: 'Data Management is Hard' });\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   DELETE /book/1234\n   * store.destroy('book', 1234).then(() => {\n   *   // The book record is gone from the in-memory store\n   *   console.log(store.get('book', 1234)); // undefined\n   *   return store.find('book', 1234);\n   * }).then((book) {\n   *   // The book was deleted from the database too\n   *   console.log(book); // undefined\n   * });\n   *\n   * @fires SimpleStore#beforeDestroyAll\n   * @fires SimpleStore#afterDestroyAll\n   * @fires SimpleStore#remove\n   * @method SimpleStore#destroyAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper#destroyAll}.\n   * @param {object} [opts] Passed to {@link Mapper#destroyAll}. See\n   * {@link Mapper#destroyAll} for more configuration options.\n   * @returns {Promise} Resolves when the delete completes.\n   * @since 3.0.0\n   */\n  destroyAll (name, query, opts: any = {}) {\n    return super.destroyAll(name, query, opts).then(result => {\n      const records = this.getCollection(name).removeAll(query, opts)\n\n      if (opts.raw) {\n        result.data = records\n      } else {\n        result = records\n      }\n      const hash = this.hashQuery(name, query, opts)\n      delete this._pendingQueries[name][hash]\n      delete this._completedQueries[name][hash]\n      return result\n    })\n  }\n\n  eject (name, id, opts) {\n    console.warn('DEPRECATED: \"eject\" is deprecated, use \"remove\" instead')\n    return this.remove(name, id, opts)\n  }\n\n  ejectAll (name, query, opts) {\n    console.warn('DEPRECATED: \"ejectAll\" is deprecated, use \"removeAll\" instead')\n    return this.removeAll(name, query, opts)\n  }\n\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~beforeFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFind\n   * @see SimpleStore~beforeFindListener\n   * @see SimpleStore#find\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFind} event.\n   *\n   * @example\n   * function onBeforeFind (mapperName, id, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFind', onBeforeFind);\n   *\n   * @callback SimpleStore~beforeFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFind}.\n   * @see SimpleStore#event:beforeFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#find}. See\n   * {@link SimpleStore~afterFindListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFind\n   * @see SimpleStore~afterFindListener\n   * @see SimpleStore#find\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFind} event.\n   *\n   * @example\n   * function onAfterFind (mapperName, id, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFind', onAfterFind);\n   *\n   * @callback SimpleStore~afterFindListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFind}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterFind}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFind}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFind}.\n   * @see SimpleStore#event:afterFind\n   * @see SimpleStore#find\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#find}. Adds any found record to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('book');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /book/1234\n   * store.find('book', 1234).then((book) => {\n   *   // The book record is now in the in-memory store\n   *   console.log(store.get('book', 1234) === book); // true\n   * });\n   *\n   * @fires SimpleStore#beforeFind\n   * @fires SimpleStore#afterFind\n   * @fires SimpleStore#add\n   * @method SimpleStore#find\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#find}.\n   * @param {object} [opts] Passed to {@link Mapper#find}.\n   * @param {boolean} [opts.force] Bypass cacheFind\n   * @param {boolean|Function} [opts.usePendingFind] See {@link SimpleStore#usePendingFind}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  find (name, id, opts: any = {}) {\n    const mapper = this.getMapper(name)\n    const pendingQuery = this._pendingQueries[name][id]\n    const usePendingFind = opts.usePendingFind === undefined ? this.usePendingFind : opts.usePendingFind\n    utils._(opts, mapper)\n\n    if (\n      pendingQuery &&\n      (utils.isFunction(usePendingFind) ? usePendingFind.call(this, name, id, opts) : usePendingFind)\n    ) {\n      return pendingQuery\n    }\n    const item = this.cachedFind(name, id, opts)\n\n    if (opts.force || !item) {\n      const promise = (this._pendingQueries[name][id] = super.find(name, id, opts))\n      return promise.then(\n        result => {\n          delete this._pendingQueries[name][id]\n          result = this._end(name, result, opts)\n          this.cacheFind(name, result, id, opts)\n          return result\n        },\n        err => {\n          delete this._pendingQueries[name][id]\n          return utils.reject(err)\n        }\n      )\n    }\n\n    return utils.resolve(item)\n  }\n\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~beforeFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeFindAll\n   * @see SimpleStore~beforeFindAllListener\n   * @see SimpleStore#findAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeFindAll} event.\n   *\n   * @example\n   * function onBeforeFindAll (mapperName, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeFindAll', onBeforeFindAll);\n   *\n   * @callback SimpleStore~beforeFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeFindAll}.\n   * @see SimpleStore#event:beforeFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#findAll}. See\n   * {@link SimpleStore~afterFindAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterFindAll\n   * @see SimpleStore~afterFindAllListener\n   * @see SimpleStore#findAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterFindAll} event.\n   *\n   * @example\n   * function onAfterFindAll (mapperName, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterFindAll', onAfterFindAll);\n   *\n   * @callback SimpleStore~afterFindAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterFindAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterFindAll}.\n   * @see SimpleStore#event:afterFindAll\n   * @see SimpleStore#findAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#findAll}. Adds any found records to the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('movie');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   GET /movie?rating=PG\n   * store.find('movie', { rating: 'PG' }).then((movies) => {\n   *   // The movie records are now in the in-memory store\n   *   console.log(store.filter('movie'));\n   * });\n   *\n   * @fires SimpleStore#beforeFindAll\n   * @fires SimpleStore#afterFindAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#findAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} [query] Passed to {@link Mapper.findAll}.\n   * @param {object} [opts] Passed to {@link Mapper.findAll}.\n   * @param {boolean} [opts.force] Bypass cacheFindAll\n   * @param {boolean|Function} [opts.usePendingFindAll] See {@link SimpleStore#usePendingFindAll}\n   * @returns {Promise} Resolves with the result, if any.\n   * @since 3.0.0\n   */\n  findAll (name, query, opts: any = {}) {\n    const mapper = this.getMapper(name)\n    const hash = this.hashQuery(name, query, opts)\n    const pendingQuery = this._pendingQueries[name][hash]\n    const usePendingFindAll = opts.usePendingFindAll === undefined ? this.usePendingFindAll : opts.usePendingFindAll\n    utils._(opts, mapper)\n\n    if (\n      pendingQuery &&\n      (utils.isFunction(usePendingFindAll) ? usePendingFindAll.call(this, name, query, opts) : usePendingFindAll)\n    ) {\n      return pendingQuery\n    }\n\n    const items = this.cachedFindAll(name, hash, opts)\n\n    if (opts.force || !items) {\n      const promise = (this._pendingQueries[name][hash] = super.findAll(name, query, opts))\n      return promise.then(\n        result => {\n          delete this._pendingQueries[name][hash]\n          result = this._end(name, result, opts)\n          this.cacheFindAll(name, result, hash, opts)\n          return result\n        },\n        err => {\n          delete this._pendingQueries[name][hash]\n          return utils.reject(err)\n        }\n      )\n    }\n\n    return utils.resolve(items)\n  }\n\n  /**\n   * Return the {@link Collection} with the given name, if for some\n   * reason you need a direct reference to the collection.\n   *\n   * @param {string} name Name of the {@link Collection} to retrieve.\n   * @since 3.0.0\n   * @throws {Error} Thrown if the specified {@link Collection} does not\n   * exist.\n   */\n  getCollection (name): Collection {\n    const collection = this._collections[name]\n    if (!collection) {\n      throw utils.err(`${DOMAIN}#getCollection`, name)(404, 'collection')\n    }\n    return collection\n  }\n\n  /**\n   * Hashing function used to cache {@link SimpleStore#find} and\n   * {@link SimpleStore#findAll} requests. This method simply JSONifies the\n   * `query` argument passed to {@link SimpleStore#find} or\n   * {@link SimpleStore#findAll}.\n   *\n   * Override this method for custom hashing behavior.\n   * @method SimpleStore#hashQuery\n   * @param {string} name The `name` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @param {object} query The `query` argument passed to {@link SimpleStore#find}\n   * or {@link SimpleStore#findAll}.\n   * @returns {string} The JSONified `query`.\n   * @since 3.0.0\n   */\n  hashQuery (name, query, opts) {\n    return utils.toJson(query || {})\n  }\n\n  inject (name, records, opts) {\n    console.warn('DEPRECATED: \"inject\" is deprecated, use \"add\" instead')\n    return this.add(name, records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#remove}. Removes the specified\n   * {@link Record} from the store.\n   *\n   * @example <caption>SimpleStore#remove</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   * console.log(store.getAll('book').length);\n   * store.add('book', { id: 1234 });\n   * console.log(store.getAll('book').length);\n   * store.remove('book', 1234);\n   * console.log(store.getAll('book').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#remove\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {string|number} id The primary key of the {@link Record} to remove.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  remove (name, id, opts?) {\n    const record = this.getCollection(name).remove(id, opts)\n    if (record) {\n      this.removeRelated(name, [record], opts)\n    }\n    return record\n  }\n\n  /**\n   * Wrapper for {@link Collection#removeAll}. Removes the selected\n   * {@link Record}s from the store.\n   *\n   * @example <caption>SimpleStore#removeAll</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('movie');\n   * console.log(store.getAll('movie').length);\n   * store.add('movie', [{ id: 3, rating: 'R' }, { id: 4, rating: 'PG-13' });\n   * console.log(store.getAll('movie').length);\n   * store.removeAll('movie', { rating: 'R' });\n   * console.log(store.getAll('movie').length);\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeAll\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {object} [query={}] Selection query. See {@link query}.\n   * @param {object} [query.where] See {@link query.where}.\n   * @param {number} [query.offset] See {@link query.offset}.\n   * @param {number} [query.limit] See {@link query.limit}.\n   * @param {string|Array[]} [query.orderBy] See {@link query.orderBy}.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record} to also\n   * remove from the store.\n   * @returns {Record} The removed {@link Record}s, if any.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  removeAll (name, query, opts) {\n    if (!query || !Object.keys(query).length) {\n      this._completedQueries[name] = {}\n    } else {\n      this._completedQueries[name][this.hashQuery(name, query, opts)] = undefined\n    }\n    const records = this.getCollection(name).removeAll(query, opts)\n    if (records.length) {\n      this.removeRelated(name, records, opts)\n    }\n    return records\n  }\n\n  /**\n   * Remove from the store {@link Record}s that are related to the provided\n   * {@link Record}(s).\n   *\n   * @fires SimpleStore#remove\n   * @method SimpleStore#removeRelated\n   * @param {string} name The name of the {@link Collection} to target.\n   * @param {Record|Record[]} records {@link Record}s whose relations are to be\n   * removed.\n   * @param {object} [opts] Configuration options.\n   * @param {string[]} [opts.with] Relations of the {@link Record}(s) to remove\n   * from the store.\n   * @since 3.0.0\n   */\n  removeRelated (name, records, opts) {\n    if (!utils.isArray(records)) {\n      records = [records]\n    }\n    utils.forEachRelation(this.getMapper(name), opts, (def, optsCopy) => {\n      records.forEach(record => {\n        let relatedData\n        let query\n        if (def.foreignKey && (def.type === hasOneType || def.type === hasManyType)) {\n          query = { [def.foreignKey]: def.getForeignKey(record) }\n        } else if (def.type === hasManyType && def.localKeys) {\n          query = {\n            where: {\n              [def.getRelation().idAttribute]: {\n                in: utils.get(record, def.localKeys)\n              }\n            }\n          }\n        } else if (def.type === hasManyType && def.foreignKeys) {\n          query = {\n            where: {\n              [def.foreignKeys]: {\n                contains: def.getForeignKey(record)\n              }\n            }\n          }\n        } else if (def.type === belongsToType) {\n          relatedData = this.remove(def.relation, def.getForeignKey(record), optsCopy)\n        }\n        if (query) {\n          relatedData = this.removeAll(def.relation, query, optsCopy)\n        }\n        if (relatedData) {\n          if (utils.isArray(relatedData) && !relatedData.length) {\n            return\n          }\n          if (def.type === hasOneType) {\n            relatedData = relatedData[0]\n          }\n          def.setLocalField(record, relatedData)\n        }\n      })\n    })\n  }\n\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~beforeUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdate\n   * @see SimpleStore~beforeUpdateListener\n   * @see SimpleStore#update\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdate} event.\n   *\n   * @example\n   * function onBeforeUpdate (mapperName, id, props, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdate', onBeforeUpdate);\n   *\n   * @callback SimpleStore~beforeUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdate}.\n   * @see SimpleStore#event:beforeUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#update}. See\n   * {@link SimpleStore~afterUpdateListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdate\n   * @see SimpleStore~afterUpdateListener\n   * @see SimpleStore#update\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdate} event.\n   *\n   * @example\n   * function onAfterUpdate (mapperName, id, props, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdate', onAfterUpdate);\n   *\n   * @callback SimpleStore~afterUpdateListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdate}.\n   * @param {string|number} id The `id` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdate}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdate}.\n   * @see SimpleStore#event:afterUpdate\n   * @see SimpleStore#update\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#update}. Adds the updated {@link Record} to the\n   * store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post/1234 {\"status\":\"published\"}\n   * store.update('post', 1, { status: 'published' }).then((post) => {\n   *   // The post record has also been updated in the in-memory store\n   *   console.log(store.get('post', 1234));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdate\n   * @fires SimpleStore#afterUpdate\n   * @fires SimpleStore#add\n   * @method SimpleStore#update\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id Passed to {@link Mapper#update}.\n   * @param {object} record Passed to {@link Mapper#update}.\n   * @param {object} [opts] Passed to {@link Mapper#update}. See\n   * {@link Mapper#update} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  update (name, id, record, opts: any = {}) {\n    return super.update(name, id, record, opts).then(result => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~beforeUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateAll\n   * @see SimpleStore~beforeUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateAll} event.\n   *\n   * @example\n   * function onBeforeUpdateAll (mapperName, props, query, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateAll', onBeforeUpdateAll);\n   *\n   * @callback SimpleStore~beforeUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#beforeUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateAll}.\n   * @see SimpleStore#event:beforeUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateAll}. See\n   * {@link SimpleStore~afterUpdateAllListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateAll\n   * @see SimpleStore~afterUpdateAllListener\n   * @see SimpleStore#updateAll\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateAll} event.\n   *\n   * @example\n   * function onAfterUpdateAll (mapperName, props, query, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateAll', onAfterUpdateAll);\n   *\n   * @callback SimpleStore~afterUpdateAllListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} props The `props` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} query The `query` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateAll}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateAll}.\n   * @see SimpleStore#event:afterUpdateAll\n   * @see SimpleStore#updateAll\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateAll}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post?author_id=1234 {\"status\":\"published\"}\n   * store.updateAll('post', { author_id: 1234 }, { status: 'published' }).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.filter('posts', { author_id: 1234 }));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateAll\n   * @fires SimpleStore#afterUpdateAll\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateAll\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {object} props Passed to {@link Mapper#updateAll}.\n   * @param {object} [query] Passed to {@link Mapper#updateAll}.\n   * @param {object} [opts] Passed to {@link Mapper#updateAll}. See\n   * {@link Mapper#updateAll} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateAll (name, props, query, opts: any = {}) {\n    return super.updateAll(name, props, query, opts).then(result => this._end(name, result, opts))\n  }\n\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~beforeUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#beforeUpdateMany\n   * @see SimpleStore~beforeUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n  /**\n   * Callback signature for the {@link SimpleStore#event:beforeUpdateMany} event.\n   *\n   * @example\n   * function onBeforeUpdateMany (mapperName, records, opts) {\n   *   // do something\n   * }\n   * store.on('beforeUpdateMany', onBeforeUpdateMany);\n   *\n   * @callback SimpleStore~beforeUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#beforeUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#beforeUpdateMany}.\n   * @see SimpleStore#event:beforeUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Fired during {@link SimpleStore#updateMany}. See\n   * {@link SimpleStore~afterUpdateManyListener} for how to listen for this event.\n   *\n   * @event SimpleStore#afterUpdateMany\n   * @see SimpleStore~afterUpdateManyListener\n   * @see SimpleStore#updateMany\n   */\n\n  /**\n   * Callback signature for the {@link SimpleStore#event:afterUpdateMany} event.\n   *\n   * @example\n   * function onAfterUpdateMany (mapperName, records, opts, result) {\n   *   // do something\n   * }\n   * store.on('afterUpdateMany', onAfterUpdateMany);\n   *\n   * @callback SimpleStore~afterUpdateManyListener\n   * @param {string} name The `name` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} records The `records` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} opts The `opts` argument received by {@link Mapper#afterUpdateMany}.\n   * @param {object} result The `result` argument received by {@link Mapper#afterUpdateMany}.\n   * @see SimpleStore#event:afterUpdateMany\n   * @see SimpleStore#updateMany\n   * @since 3.0.0\n   */\n  /**\n   * Wrapper for {@link Mapper#updateMany}. Adds the updated {@link Record}s to\n   * the store.\n   *\n   * @example\n   * import { SimpleStore } from 'js-data';\n   * import { HttpAdapter } from 'js-data-http';\n   *\n   * const store = new SimpleStore();\n   * store.registerAdapter('http', new HttpAdapter(), { default: true });\n   *\n   * store.defineMapper('post');\n   *\n   * // Since this example uses the http adapter, we'll get something like:\n   * //\n   * //   PUT /post [{\"id\":3,status\":\"published\"},{\"id\":4,status\":\"published\"}]\n   * store.updateMany('post', [\n   *   { id: 3, status: 'published' },\n   *   { id: 4, status: 'published' }\n   * ]).then((posts) => {\n   *   // The post records have also been updated in the in-memory store\n   *   console.log(store.getAll('post', 3, 4));\n   * });\n   *\n   * @fires SimpleStore#beforeUpdateMany\n   * @fires SimpleStore#afterUpdateMany\n   * @fires SimpleStore#add\n   * @method SimpleStore#updateMany\n   * @param {string} name Name of the {@link Mapper} to target.\n   * @param {(Object[]|Record[])} records Passed to {@link Mapper#updateMany}.\n   * @param {object} [opts] Passed to {@link Mapper#updateMany}. See\n   * {@link Mapper#updateMany} for more configuration options.\n   * @returns {Promise} Resolves with the result of the update.\n   * @since 3.0.0\n   */\n  updateMany (name, records, opts: any = {}) {\n    return super.updateMany(name, records, opts).then(result => this._end(name, result, opts))\n  }\n\n  /**\n   * Wrapper for {@link Collection#add}.\n   *\n   * @example <caption>SimpleStore#add</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('book');\n   *\n   * // Add one book to the in-memory store:\n   * store.add('book', { id: 1, title: 'Respect your Data' });\n   * // Add multiple books to the in-memory store:\n   * store.add('book', [\n   *   { id: 2, title: 'Easy data recipes' },\n   *   { id: 3, title: 'Active Record 101' }\n   * ]);\n   *\n   * @fires SimpleStore#add\n   * @method SimpleStore#add\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Object[]|Record|Record[])} records See {@link Collection#add}.\n   * @param {object} [opts] Configuration options. See {@link Collection#add}.\n   * @returns {(Object|Object[]|Record|Record[])} See {@link Collection#add}.\n   * @see Collection#add\n   * @see Collection#add\n   * @since 3.0.0\n   */\n  add (name, records, opts?) {\n    return this.getCollection(name).add(records, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#between}.\n   *\n   * @example\n   * // Get all users ages 18 to 30\n   * const users = store.between('user', 18, 30, { index: 'age' });\n   *\n   * @example\n   * // Same as above\n   * const users = store.between('user', [18], [30], { index: 'age' });\n   *\n   * @method SimpleStore#between\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {array} leftKeys See {@link Collection#between}.\n   * @param {array} rightKeys See {@link Collection#between}.\n   * @param {object} [opts] Configuration options. See {@link Collection#between}.\n   * @returns {Object[]|Record[]} See {@link Collection#between}.\n   * @see Collection#between\n   * @see Collection#between\n   * @since 3.0.0\n   */\n  between (name, leftKeys, rightKeys, opts) {\n    return this.getCollection(name).between(leftKeys, rightKeys, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#createIndex}.\n   *\n   * @example\n   * // Index users by age\n   * store.createIndex('user', 'age');\n   *\n   * @example\n   * // Index users by status and role\n   * store.createIndex('user', 'statusAndRole', ['status', 'role']);\n   *\n   * @method SimpleStore#createIndex\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {string} indexName See {@link Collection#createIndex}.\n   * @param {string[]} [fieldList] See {@link Collection#createIndex}.\n   * @param {object} [opts] Configuration options. See {@link Collection#between}.\n   * @see Collection#createIndex\n   * @see Collection#createIndex\n   * @since 3.0.0\n   */\n  createIndex (name: string | number, indexName: string, fieldList?: string[], opts?) {\n    return this.getCollection(name).createIndex(indexName, fieldList, opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#filter}.\n   *\n   * @example <caption>SimpleStore#filter</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * // Get the draft posts created less than three months ago\n   * let posts = store.filter('post', {\n   *   where: {\n   *     status: {\n   *       '==': 'draft'\n   *     },\n   *     created_at_timestamp: {\n   *       '>=': (new Date().getTime() - (1000 \\* 60 \\* 60 \\* 24 \\* 30 \\* 3)) // 3 months ago\n   *     }\n   *   }\n   * });\n   * console.log(posts);\n   *\n   * // Use a custom filter function\n   * posts = store.filter('post', function (post) { return post.id % 2 === 0 });\n   *\n   * @method SimpleStore#filter\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(Object|Function)} [queryOrFn={}] See {@link Collection#filter}.\n   * @param {object} [thisArg] See {@link Collection#filter}.\n   * @returns {Array} See {@link Collection#filter}.\n   * @see Collection#filter\n   * @see Collection#filter\n   * @since 3.0.0\n   */\n  filter (name, queryOrFn?, thisArg?) {\n    return this.getCollection(name).filter(queryOrFn, thisArg)\n  }\n\n  /**\n   * Wrapper for {@link Collection#get}.\n   *\n   * @example <caption>SimpleStore#get</caption>\n   * const JSData = require('js-data');\n   * const { SimpleStore } = JSData;\n   * console.log('Using JSData v' + JSData.version.full);\n   *\n   * const store = new SimpleStore();\n   * store.defineMapper('post');\n   * store.add('post', [\n   *   { id: 1, status: 'draft', created_at_timestamp: new Date().getTime() }\n   * ]);\n   *\n   * console.log(store.get('post', 1)); // {...}\n   * console.log(store.get('post', 2)); // undefined\n   *\n   * @method SimpleStore#get\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {(string|number)} id See {@link Collection#get}.\n   * @returns {(Object|Record)} See {@link Collection#get}.\n   * @see Collection#get\n   * @see Collection#get\n   * @since 3.0.0\n   */\n  get (name, id) {\n    return this.getCollection(name).get(id)\n  }\n\n  /**\n   * Wrapper for {@link Collection#getAll}.\n   *\n   * @example\n   * // Get the posts where \"status\" is \"draft\" or \"inReview\"\n   * const posts = store.getAll('post', 'draft', 'inReview', { index: 'status' });\n   *\n   * @example\n   * // Same as above\n   * const posts = store.getAll('post', ['draft'], ['inReview'], { index: 'status' });\n   *\n   * @method SimpleStore#getAll\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {...Array} [keyList] See {@link Collection#getAll}.\n   * @param {object} [opts] See {@link Collection#getAll}.\n   * @returns {Array} See {@link Collection#getAll}.\n   * @see Collection#getAll\n   * @see Collection#getAll\n   * @since 3.0.0\n   */\n  getAll (name, ...args) {\n    return this.getCollection(name).getAll(...args)\n  }\n\n  /**\n   * Wrapper for {@link Collection#prune}.\n   *\n   * @method SimpleStore#prune\n   * @param name\n   * @param {object} [opts] See {@link Collection#prune}.\n   * @returns {Array} See {@link Collection#prune}.\n   * @see Collection#prune\n   * @see Collection#prune\n   * @since 3.0.0\n   */\n  prune (name: string, opts?) {\n    return this.getCollection(name).prune(opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#query}.\n   *\n   * @example\n   * // Grab page 2 of users between ages 18 and 30\n   * store.query('user')\n   *   .between(18, 30, { index: 'age' }) // between ages 18 and 30\n   *   .skip(10) // second page\n   *   .limit(10) // page size\n   *   .run();\n   *\n   * @method SimpleStore#query\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @returns {Query} See {@link Collection#query}.\n   * @see Collection#query\n   * @see Collection#query\n   * @since 3.0.0\n   */\n  query (name) {\n    return this.getCollection(name).query()\n  }\n\n  /**\n   * Wrapper for {@link Collection#toJSON}.\n   *\n   * @example\n   * store.defineMapper('post', {\n   *   schema: {\n   *     properties: {\n   *       id: { type: 'number' },\n   *       title: { type: 'string' }\n   *     }\n   *   }\n   * });\n   * store.add('post', [\n   *   { id: 1, status: 'published', title: 'Respect your Data' },\n   *   { id: 2, status: 'draft', title: 'Connecting to a data source' }\n   * ]);\n   * console.log(store.toJSON('post'));\n   * const draftsJSON = store.query('post')\n   *   .filter({ status: 'draft' })\n   *   .mapCall('toJSON')\n   *   .run();\n   *\n   * @method SimpleStore#toJSON\n   * @param {(string|number)} name Name of the {@link Mapper} to target.\n   * @param {object} [opts] See {@link Collection#toJSON}.\n   * @returns {Array} See {@link Collection#toJSON}.\n   * @see Collection#toJSON\n   * @see Collection#toJSON\n   * @since 3.0.0\n   */\n  toJSON (name, opts) {\n    return this.getCollection(name).toJSON(opts)\n  }\n\n  /**\n   * Wrapper for {@link Collection#unsaved}.\n   *\n   * @method SimpleStore#unsaved\n   * @returns {Array} See {@link Collection#unsaved}.\n   * @see Collection#unsaved\n   * @see Collection#unsaved\n   * @since 3.0.0\n   */\n  unsaved (name, opts?) {\n    return this.getCollection(name).unsaved(opts)\n  }\n}\n\n/**\n * Fired when a record changes. Only works for records that have tracked fields.\n * See {@link SimpleStore~changeListener} on how to listen for this event.\n *\n * @event SimpleStore#change\n * @see SimpleStore~changeListener\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:change} event.\n *\n * @example\n * function onChange (mapperName, record, changes) {\n *   // do something\n * }\n * store.on('change', onChange);\n *\n * @callback SimpleStore~changeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record} record The Record that changed.\n * @param {object} changes The changes.\n * @see SimpleStore#event:change\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are added to the in-memory store. See\n * {@link SimpleStore~addListener} on how to listen for this event.\n *\n * @event SimpleStore#add\n * @see SimpleStore~addListener\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:add} event.\n *\n * @example\n * function onAdd (mapperName, recordOrRecords) {\n *   // do something\n * }\n * store.on('add', onAdd);\n *\n * @callback SimpleStore~addListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} The Record or Records that were added.\n * @see SimpleStore#event:add\n * @see SimpleStore#add\n * @see SimpleStore#create\n * @see SimpleStore#createMany\n * @see SimpleStore#find\n * @see SimpleStore#findAll\n * @see SimpleStore#update\n * @see SimpleStore#updateAll\n * @see SimpleStore#updateMany\n * @since 3.0.0\n */\n\n/**\n * Fired when one or more records are removed from the in-memory store. See\n * {@link SimpleStore~removeListener} for how to listen for this event.\n *\n * @event SimpleStore#remove\n * @see SimpleStore~removeListener\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n */\n\n/**\n * Callback signature for the {@link SimpleStore#event:remove} event.\n *\n * @example\n * function onRemove (mapperName, recordsOrRecords) {\n *   // do something\n * }\n * store.on('remove', onRemove);\n *\n * @callback SimpleStore~removeListener\n * @param {string} name The name of the associated {@link Mapper}.\n * @param {Record|Record[]} Record or Records that were removed.\n * @see SimpleStore#event:remove\n * @see SimpleStore#clear\n * @see SimpleStore#destroy\n * @see SimpleStore#destroyAll\n * @see SimpleStore#remove\n * @see SimpleStore#removeAll\n * @since 3.0.0\n */\n\n/**\n * Create a subclass of this SimpleStore:\n * @example <caption>SimpleStore.extend</caption>\n * const JSData = require('js-data');\n * const { SimpleStore } = JSData;\n * console.log('Using JSData v' + JSData.version.full);\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomSimpleStoreClass extends SimpleStore {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customSimpleStore = new CustomSimpleStoreClass();\n * console.log(customSimpleStore.foo());\n * console.log(CustomSimpleStoreClass.beep());\n *\n * // Extend the class using alternate method.\n * const OtherSimpleStoreClass = SimpleStore.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const otherSimpleStore = new OtherSimpleStoreClass();\n * console.log(otherSimpleStore.foo());\n * console.log(OtherSimpleStoreClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherSimpleStoreClass () {\n *   SimpleStore.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * SimpleStore.extend({\n *   constructor: AnotherSimpleStoreClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * })\n * const anotherSimpleStore = new AnotherSimpleStoreClass();\n * console.log(anotherSimpleStore.created_at);\n * console.log(anotherSimpleStore.foo());\n * console.log(AnotherSimpleStoreClass.beep());\n *\n * @method SimpleStore.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this SimpleStore class.\n * @since 3.0.0\n */\n","import utils from './utils'\nimport './decorators'\nimport Collection from './Collection'\n\nconst DOMAIN = 'LinkedCollection'\n\n/**\n * Extends {@link Collection}. Used by a {@link DataStore} to implement an\n * Identity Map.\n *\n * @example\n * import {LinkedCollection} from 'js-data';\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomLinkedCollectionClass extends LinkedCollection {\n *   foo () { return 'bar'; }\n *   static beep () { return 'boop'; }\n * }\n * const customLinkedCollection = new CustomLinkedCollectionClass();\n * console.log(customLinkedCollection.foo());\n * console.log(CustomLinkedCollectionClass.beep());\n *\n * @class LinkedCollection\n * @extends Collection\n * @param {array} [records] Initial set of records to insert into the\n * collection. See {@link Collection}.\n * @param {object} [opts] Configuration options. See {@link Collection}.\n * @returns {Mapper}\n */\nexport default class LinkedCollection extends Collection {\n  datastore: any;\n\n  constructor (records, opts) {\n    super(records, opts)\n\n    // Make sure this collection has a reference to a datastore\n    if (!this.datastore) {\n      throw utils.err(`new ${DOMAIN}`, 'opts.datastore')(400, 'DataStore', this.datastore)\n    }\n  }\n\n  _addMeta (record, timestamp) {\n    // Track when this record was added\n    this._added[this.recordId(record)] = timestamp\n\n    if (utils.isFunction(record._set)) {\n      record._set('$', timestamp)\n    }\n  }\n\n  _clearMeta (record) {\n    delete this._added[this.recordId(record)]\n    if (utils.isFunction(record._set)) {\n      record._set('$') // unset\n    }\n  }\n\n  _onRecordEvent (...args) {\n    Collection.prototype._onRecordEvent.apply(this, args)\n    const event = args[0]\n    // This is a very brute force method\n    // Lots of room for optimization\n    if (utils.isString(event) && event.indexOf('change') === 0) {\n      this.updateIndexes(args[1])\n    }\n  }\n\n  add (records, opts) {\n    const mapper = this.mapper\n    const timestamp = new Date().getTime()\n    const singular = utils.isObject(records) && !utils.isArray(records)\n\n    if (singular) {\n      records = [records]\n    }\n    records = super.add(records, opts)\n\n    if (mapper.relationList.length && records.length) {\n      // Check the currently visited record for relations that need to be\n      // inserted into their respective collections.\n      mapper.relationList.forEach(def => {\n        def.addLinkedRecords(records)\n      })\n    }\n\n    records.forEach(record => this._addMeta(record, timestamp))\n\n    return singular ? records[0] : records\n  }\n\n  remove (idOrRecord, opts) {\n    const mapper = this.mapper\n    const record = super.remove(idOrRecord, opts)\n    if (record) {\n      this._clearMeta(record)\n    }\n\n    if (mapper.relationList.length && record) {\n      mapper.relationList.forEach(def => {\n        def.removeLinkedRecords(mapper, [record])\n      })\n    }\n\n    return record\n  }\n\n  removeAll (query, opts) {\n    const mapper = this.mapper\n    const records = super.removeAll(query, opts)\n    records.forEach(this._clearMeta, this)\n\n    if (mapper.relationList.length && records.length) {\n      mapper.relationList.forEach(def => {\n        def.removeLinkedRecords(mapper, records)\n      })\n    }\n\n    return records\n  }\n}\n\n/**\n * Create a subclass of this LinkedCollection:\n *\n * // Extend the class using alternate method.\n * const OtherLinkedCollectionClass = LinkedCollection.extend({\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const otherLinkedCollection = new OtherLinkedCollectionClass();\n * console.log(otherLinkedCollection.foo());\n * console.log(OtherLinkedCollectionClass.beep());\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherLinkedCollectionClass () {\n *   LinkedCollection.call(this);\n *   this.created_at = new Date().getTime();\n * }\n * LinkedCollection.extend({\n *   constructor: AnotherLinkedCollectionClass,\n *   foo () { return 'bar'; }\n * }, {\n *   beep () { return 'boop'; }\n * });\n * const anotherLinkedCollection = new AnotherLinkedCollectionClass();\n * console.log(anotherLinkedCollection.created_at);\n * console.log(anotherLinkedCollection.foo());\n * console.log(AnotherLinkedCollectionClass.beep());\n *\n * @method LinkedCollection.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this LinkedCollection class.\n * @since 3.0.0\n */\n","import utils, { safeSetLink, safeSetProp } from './utils'\n\nimport { belongsToType, hasManyType, hasOneType } from './decorators'\nimport SimpleStore, { SimpleStoreOpts } from './SimpleStore'\nimport LinkedCollection from './LinkedCollection'\nimport { MapperOpts } from './Mapper'\n\nexport interface DataStoreOpts extends SimpleStoreOpts {\n  [customAttr: string]: any\n\n  linkRelations?: boolean\n  unlinkOnDestroy?: boolean\n  collectionClass /*: typeof Collection */?\n  mapperClass?\n  scopes?: any\n}\n\nconst DATASTORE_DEFAULTS: DataStoreOpts = {\n  /**\n   * Whether in-memory relations should be unlinked from records after they are\n   * destroyed.\n   *\n   * @default true\n   * @name DataStore#unlinkOnDestroy\n   * @since 3.0.0\n   * @type {boolean}\n   */\n  unlinkOnDestroy: true,\n\n  collectionClass: LinkedCollection\n}\n\n/**\n * The `DataStore` class is an extension of {@link SimpleStore}. Not only does\n * `DataStore` manage mappers and store data in collections, it uses the\n * {@link LinkedCollection} class to link related records together in memory.\n *\n * ```javascript\n * import { DataStore } from 'js-data';\n * ```\n *\n * @example\n * import { DataStore } from 'js-data';\n * import HttpAdapter from 'js-data-http';\n * const store = new DataStore();\n *\n * // DataStore#defineMapper returns a direct reference to the newly created\n * // Mapper.\n * const UserMapper = store.defineMapper('user');\n *\n * // DataStore#as returns the store scoped to a particular Mapper.\n * const UserStore = store.as('user');\n *\n * // Call \"find\" on \"UserMapper\" (Stateless ORM)\n * UserMapper.find(1).then((user) => {\n *   // retrieved a \"user\" record via the http adapter, but that's it\n *\n *   // Call \"find\" on \"store\" targeting \"user\" (Stateful DataStore)\n *   return store.find('user', 1); // same as \"UserStore.find(1)\"\n * }).then((user) => {\n *   // not only was a \"user\" record retrieved, but it was added to the\n *   // store's \"user\" collection\n *   const cachedUser = store.getCollection('user').get(1);\n *   console.log(user === cachedUser); // true\n * });\n *\n * @class DataStore\n * @extends SimpleStore\n * @param {object} [opts] Configuration options. See {@link SimpleStore}.\n * @param {boolean} [opts.collectionClass={@link LinkedCollection}] See {@link DataStore#collectionClass}.\n * @param {boolean} [opts.debug=false] See {@link Component#debug}.\n * @param {boolean} [opts.unlinkOnDestroy=true] See {@link DataStore#unlinkOnDestroy}.\n * @param {boolean|Function} [opts.usePendingFind=true] See {@link DataStore#usePendingFind}.\n * @param {boolean|Function} [opts.usePendingFindAll=true] See {@link DataStore#usePendingFindAll}.\n * @returns {DataStore}\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/working-with-the-datastore\",\"Working with the DataStore\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/jsdata-and-the-browser\",\"Notes on using JSData in the Browser\"]\n */\nexport default class DataStore extends SimpleStore {\n  unlinkOnDestroy: any;\n\n  constructor (opts: DataStoreOpts = {}) {\n    // Fill in any missing options with the defaults\n    super({ ...DATASTORE_DEFAULTS, ...opts })\n  }\n\n  /**\n   * Creates a new [Mapper] with [name] from the [opts]\n   * @param {string} name\n   * @param {object} opts\n   * @returns {*}\n   */\n  defineMapper (name, opts?: MapperOpts) {\n    // Complexity of this method is beyond simply using => functions to bind context\n    const self = this\n    const mapper = super.defineMapper(name, opts)\n    const idAttribute = mapper.idAttribute\n    const collection = this.getCollection(name)\n\n    mapper.relationList.forEach(def => {\n      const relation = def.relation\n      const localField = def.localField\n      const path = `links.${localField}`\n      const foreignKey = def.foreignKey\n      const type = def.type\n      const updateOpts = { index: foreignKey }\n      let descriptor\n\n      const getter = function () {\n        return this._get(path)\n      }\n\n      if (type === belongsToType) {\n        if (!collection.indexes[foreignKey]) {\n          collection.createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get: getter,\n          // e.g. profile.user = someUser\n          // or comment.post = somePost\n          set (record) {\n            // e.g. const otherUser = profile.user\n            const currentParent = this._get(path)\n            // e.g. profile.user === someUser\n            if (record === currentParent) {\n              return currentParent\n            }\n            const id = utils.get(this, idAttribute)\n            const inverseDef = def.getInverse(mapper)\n\n            // e.g. profile.user !== someUser\n            // or comment.post !== somePost\n            if (currentParent && inverseDef) {\n              this.removeInverseRelation(currentParent, id, inverseDef, idAttribute)\n            }\n            if (record) {\n              // e.g. profile.user = someUser\n              const relatedIdAttribute = def.getRelation().idAttribute\n              const relatedId = utils.get(record, relatedIdAttribute)\n\n              // Prefer store record\n              if (relatedId !== undefined && this._get('$')) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              // e.g. profile.user = someUser\n              // or comment.post = somePost\n              safeSetLink(this, localField, record)\n              safeSetProp(this, foreignKey, relatedId)\n              collection.updateIndex(this, updateOpts)\n\n              if (inverseDef) {\n                this.setupInverseRelation(record, id, inverseDef, idAttribute)\n              }\n            } else {\n              // Unset in-memory link only\n              // e.g. profile.user = undefined\n              // or comment.post = undefined\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n\n        let foreignKeyDescriptor = Object.getOwnPropertyDescriptor(mapper.recordClass.prototype, foreignKey)\n        if (!foreignKeyDescriptor) {\n          foreignKeyDescriptor = {\n            enumerable: true\n          }\n        }\n        const originalGet = foreignKeyDescriptor.get\n        foreignKeyDescriptor.get = function () {\n          if (originalGet) {\n            return originalGet.call(this)\n          }\n          return this._get(`props.${foreignKey}`)\n        }\n        const originalSet = foreignKeyDescriptor.set\n        foreignKeyDescriptor.set = function (value) {\n          if (originalSet) {\n            originalSet.call(this, value)\n          }\n          const currentParent = utils.get(this, localField)\n          const id = utils.get(this, idAttribute)\n          const inverseDef = def.getInverse(mapper)\n          const currentParentId = currentParent ? utils.get(currentParent, def.getRelation().idAttribute) : undefined\n\n          if (inverseDef && currentParent && currentParentId !== undefined && currentParentId !== value) {\n            if (inverseDef.type === hasOneType) {\n              safeSetLink(currentParent, inverseDef.localField, undefined)\n            } else if (inverseDef.type === hasManyType) {\n              const children = utils.get(currentParent, inverseDef.localField)\n              if (id === undefined) {\n                utils.remove(children, child => child === this)\n              } else {\n                utils.remove(children, child => child === this || id === utils.get(child, idAttribute))\n              }\n            }\n          }\n\n          safeSetProp(this, foreignKey, value)\n          collection.updateIndex(this, updateOpts)\n\n          if (value === undefined || value === null) {\n            if (currentParentId !== undefined) {\n              // Unset locals\n              utils.set(this, localField, undefined)\n            }\n          } else if (this._get('$')) {\n            const storeRecord = self.get(relation, value)\n            if (storeRecord) {\n              utils.set(this, localField, storeRecord)\n            }\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, foreignKey, foreignKeyDescriptor)\n      } else if (type === hasManyType) {\n        const localKeys = def.localKeys\n        const foreignKeys = def.foreignKeys\n\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n\n        descriptor = {\n          get () {\n            const current = getter.call(this)\n            if (!current) {\n              this._set(path, [])\n            }\n            return getter.call(this)\n          },\n          // e.g. post.comments = someComments\n          // or user.groups = someGroups\n          // or group.users = someUsers\n          set (records) {\n            if (records && !utils.isArray(records)) {\n              records = [records]\n            }\n            const id = utils.get(this, idAttribute)\n            const relatedIdAttribute = def.getRelation().idAttribute\n            const inverseDef = def.getInverse(mapper)\n            const inverseLocalField = inverseDef.localField\n            const current = this._get(path) || []\n            const toLink = []\n            const toLinkIds = {}\n\n            if (records) {\n              records.forEach(record => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                const currentParent = utils.get(record, inverseLocalField)\n                if (currentParent && currentParent !== this) {\n                  const currentChildrenOfParent = utils.get(currentParent, localField)\n                  // e.g. somePost.comments.remove(comment)\n                  if (relatedId === undefined) {\n                    utils.remove(currentChildrenOfParent, child => child === record)\n                  } else {\n                    utils.remove(\n                      currentChildrenOfParent,\n                      child => child === record || relatedId === utils.get(child, relatedIdAttribute)\n                    )\n                  }\n                }\n                if (relatedId !== undefined) {\n                  if (this._get('$')) {\n                    // Prefer store record\n                    record = self.get(relation, relatedId) || record\n                  }\n                  // e.g. toLinkIds[comment.id] = comment\n                  toLinkIds[relatedId] = record\n                }\n                toLink.push(record)\n              })\n            }\n\n            // e.g. post.comments = someComments\n            if (foreignKey) {\n              current.forEach(record => {\n                // e.g. comment.id\n                const relatedId = utils.get(record, relatedIdAttribute)\n                if (\n                  (relatedId === undefined && toLink.indexOf(record) === -1) ||\n                  (relatedId !== undefined && !(relatedId in toLinkIds))\n                ) {\n                  // Update (unset) inverse relation\n                  if (records) {\n                    // e.g. comment.post_id = undefined\n                    safeSetProp(record, foreignKey, undefined)\n                    // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                    self.getCollection(relation).updateIndex(record, updateOpts)\n                  }\n                  // e.g. comment.post = undefined\n                  safeSetLink(record, inverseLocalField, undefined)\n                }\n              })\n              toLink.forEach(record => {\n                // Update (set) inverse relation\n                // e.g. comment.post_id = post.id\n                safeSetProp(record, foreignKey, id)\n                // e.g. CommentCollection.updateIndex(comment, { index: 'post_id' })\n                self.getCollection(relation).updateIndex(record, updateOpts)\n                // e.g. comment.post = post\n                safeSetLink(record, inverseLocalField, this)\n              })\n            } else if (localKeys) {\n              // Update locals\n              // e.g. group.users = someUsers\n              // Update (set) inverse relation\n              const ids = toLink.map(child => utils.get(child, relatedIdAttribute)).filter(id => id !== undefined)\n              // e.g. group.user_ids = [1,2,3,...]\n              utils.set(this, localKeys, ids)\n              // Update (unset) inverse relation\n              if (inverseDef.foreignKeys) {\n                current.forEach(child => {\n                  const relatedId = utils.get(child, relatedIdAttribute)\n                  if (\n                    (relatedId === undefined && toLink.indexOf(child) === -1) ||\n                    (relatedId !== undefined && !(relatedId in toLinkIds))\n                  ) {\n                    // Update inverse relation\n                    // safeSetLink(child, inverseLocalField, undefined)\n                    const parents = utils.get(child, inverseLocalField) || []\n                    // e.g. someUser.groups.remove(group)\n                    if (id === undefined) {\n                      utils.remove(parents, parent => parent === this)\n                    } else {\n                      utils.remove(parents, parent => parent === this || id === utils.get(parent, idAttribute))\n                    }\n                  }\n                })\n                toLink.forEach(child => {\n                  // Update (set) inverse relation\n                  const parents = utils.get(child, inverseLocalField)\n                  // e.g. someUser.groups.push(group)\n                  if (id === undefined) {\n                    utils.noDupeAdd(parents, this, parent => parent === this)\n                  } else {\n                    utils.noDupeAdd(parents, this, parent => parent === this || id === utils.get(parent, idAttribute))\n                  }\n                })\n              }\n            } else if (foreignKeys) {\n              // e.g. user.groups = someGroups\n              // Update (unset) inverse relation\n              current.forEach(parent => {\n                const ids = utils.get(parent, foreignKeys) || []\n                // e.g. someGroup.user_ids.remove(user.id)\n                utils.remove(ids, _key => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                // e.g. someGroup.users.remove(user)\n                if (id === undefined) {\n                  utils.remove(children, child => child === this)\n                } else {\n                  utils.remove(children, child => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n              // Update (set) inverse relation\n              toLink.forEach(parent => {\n                const ids = utils.get(parent, foreignKeys) || []\n                utils.noDupeAdd(ids, id, _key => id === _key)\n                const children = utils.get(parent, inverseLocalField)\n                if (id === undefined) {\n                  utils.noDupeAdd(children, this, child => child === this)\n                } else {\n                  utils.noDupeAdd(children, this, child => child === this || id === utils.get(child, idAttribute))\n                }\n              })\n            }\n\n            this._set(path, toLink)\n            return toLink\n          }\n        }\n      } else if (type === hasOneType) {\n        // TODO: Handle case when belongsTo relation isn't ever defined\n        if (self._collections[relation] && foreignKey && !self.getCollection(relation).indexes[foreignKey]) {\n          self.getCollection(relation).createIndex(foreignKey)\n        }\n        descriptor = {\n          get: getter,\n          // e.g. user.profile = someProfile\n          set (record) {\n            const current = this._get(path)\n            if (record === current) {\n              return current\n            }\n            const inverseLocalField = def.getInverse(mapper).localField\n            // Update (unset) inverse relation\n            if (current) {\n              safeSetProp(current, foreignKey, undefined)\n              self.getCollection(relation).updateIndex(current, updateOpts)\n              safeSetLink(current, inverseLocalField, undefined)\n            }\n            if (record) {\n              const relatedId = utils.get(record, def.getRelation().idAttribute)\n              // Prefer store record\n              if (relatedId !== undefined) {\n                record = self.get(relation, relatedId) || record\n              }\n\n              // Set locals\n              safeSetLink(this, localField, record)\n\n              // Update (set) inverse relation\n              safeSetProp(record, foreignKey, utils.get(this, idAttribute))\n              self.getCollection(relation).updateIndex(record, updateOpts)\n              safeSetLink(record, inverseLocalField, this)\n            } else {\n              // Unset locals\n              safeSetLink(this, localField, undefined)\n            }\n            return record\n          }\n        }\n      }\n\n      if (descriptor) {\n        descriptor.enumerable = def.enumerable === undefined ? false : def.enumerable\n        if (def.get) {\n          const origGet = descriptor.get\n          descriptor.get = function () {\n            return def.get(def, this, (...args) => origGet.apply(this, args))\n          }\n        }\n        if (def.set) {\n          const origSet = descriptor.set\n          descriptor.set = function (related) {\n            return def.set(def, this, related, value => origSet.call(this, value === undefined ? related : value))\n          }\n        }\n        Object.defineProperty(mapper.recordClass.prototype, localField, descriptor)\n      }\n    })\n\n    return mapper\n  }\n\n  destroy (name, id, opts: any = {}) {\n    return super.destroy(name, id, opts).then(result => {\n      let record\n      if (opts.raw) {\n        record = result.data\n      } else {\n        record = result\n      }\n\n      if (record && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, def => {\n          utils.set(record, def.localField, undefined)\n        })\n      }\n      return result\n    })\n  }\n\n  destroyAll (name, query, opts: any = {}) {\n    return super.destroyAll(name, query, opts).then(result => {\n      let records\n      if (opts.raw) {\n        records = result.data\n      } else {\n        records = result\n      }\n\n      if (records?.length && this.unlinkOnDestroy) {\n        const _opts = utils.plainCopy(opts)\n        _opts.withAll = true\n        utils.forEachRelation(this.getMapper(name), _opts, def => {\n          records.forEach(record => {\n            utils.set(record, def.localField, undefined)\n          })\n        })\n      }\n      return result\n    })\n  }\n}\n","/**\n * Registered as `js-data` in NPM.\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data\n * @example <caption>Install from NPM</caption>\n * yarn add js-data\n * @example <caption>Load into your app via CommonJS</caption>\n * var JSData = require('js-data');\n * @example <caption>Load into your app via ES2015 Modules</caption>\n * import * as JSData from 'js-data';\n */\n\n/**\n * JSData's utility methods.\n *\n * @example\n * import { utils } from 'js-data';\n * console.log(utils.isString('foo')); // true\n *\n * @name module:js-data.utils\n * @property {Function} Promise See {@link utils.Promise}.\n * @see utils\n * @since 3.0.0\n * @type {Object}\n */\nimport utils from './utils'\n\n/**\n * JSData's {@link Collection} class.\n *\n * @example\n * import { Collection } from 'js-data';\n * const collection = new Collection();\n *\n * @name module:js-data.Collection\n * @see Collection\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#collection\",\"Components of JSData: Collection\"]\n * @type {Constructor}\n */\nimport Collection from './Collection'\n\n/**\n * JSData's {@link Component} class. Most components in JSData extend this\n * class.\n *\n * @example\n * import { Component } from 'js-data';\n * // Make a custom component.\n * const MyComponent = Component.extend({\n *   myMethod (someArg) { ... }\n * });\n *\n * @name module:js-data.Component\n * @see Component\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Component from './Component'\n\n/**\n * JSData's {@link Container} class. Defines and manages {@link Mapper}s. Used\n * in Node.js and in the browser, though in the browser you may want to use\n * {@link DataStore} instead.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n *\n * @name module:js-data.Container\n * @see Container\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#container\",\"Components of JSData: Container\"]\n * @type {Constructor}\n */\nimport { Container } from './Container'\n\n/**\n * JSData's {@link DataStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { DataStore } from 'js-data';\n * const store = new DataStore();\n *\n * @name module:js-data.DataStore\n * @see DataStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#datastore\",\"Components of JSData: DataStore\"]\n * @type {Constructor}\n */\nimport DataStore from './DataStore'\n\n/**\n * JSData's {@link Index} class, based on [mindex]{@link https://github.com/internalfx/mindex}.\n *\n * @name module:js-data.Index\n * @see Index\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Index from './mindex'\n\n/**\n * JSData's {@link LinkedCollection} class. Used by the {@link DataStore}\n * component. If you need to create a collection manually, you should probably\n * use the {@link Collection} class.\n *\n * @name module:js-data.LinkedCollection\n * @see DataStore\n * @see LinkedCollection\n * @since 3.0.0\n * @type {Constructor}\n */\nimport LinkedCollection from './LinkedCollection'\n\n/**\n * JSData's {@link Mapper} class. The core of the ORM.\n *\n * @example <caption>Recommended use</caption>\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n *\n * @example <caption>Create Mapper manually</caption>\n * import { Mapper } from 'js-data';\n * const UserMapper = new Mapper({ name: 'user' });\n *\n * @name module:js-data.Mapper\n * @see Container\n * @see Mapper\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/modeling-your-data\",\"Modeling your data\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#mapper\",\"Components of JSData: Mapper\"]\n * @type {Constructor}\n */\nimport Mapper from './Mapper'\n\n/**\n * JSData's {@link Query} class. Used by the {@link Collection} component.\n *\n * @name module:js-data.Query\n * @see Query\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Query from './Query'\n\n/**\n * JSData's {@link Record} class.\n *\n * @example\n * import { Container } from 'js-data';\n * const store = new Container();\n * store.defineMapper('user');\n * const user = store.createRecord('user');\n *\n * @name module:js-data.Record\n * @see Record\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#record\",\"Components of JSData: Record\"]\n * @type {Constructor}\n */\nimport Record from './Record'\n\n/**\n * JSData's {@link Schema} class. Implements http://json-schema.org/draft-04.\n *\n * @example\n * import { Container, Schema } from 'js-data';\n * const userSchema = new Schema({\n *   properties: {\n *     id: { type: 'string' },\n *     name: { type: 'string' }\n *   }\n * });\n * const store = new Container();\n * store.defineMapper('user', {\n *   schema: userSchema\n * });\n *\n * @name module:js-data.Schema\n * @see Schema\n * @see http://json-schema.org/\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#schema\",\"Components of JSData: schema\"]\n * @tutorial [\"http://www.js-data.io/v3.0/docs/schemas\",\"JSData's Schema Syntax\"]\n * @type {Constructor}\n */\nimport Schema from './Schema'\n\n/**\n * JSData's {@link Settable} class.\n *\n * @example\n * import { Settable } from 'js-data';\n * const obj = new Settable();\n * obj.set('secret', 'value');\n * console.log(JSON.stringify(obj)); // {}\n *\n * @name module:js-data.Settable\n * @see Settable\n * @since 3.0.0\n * @type {Constructor}\n */\nimport Settable from './Settable'\n\n/**\n * JSData's {@link SimpleStore} class. Primarily for use in the browser. In\n * Node.js you probably want to use {@link Container} instead.\n *\n * @example\n * import { SimpleStore } from 'js-data';\n * const store = new SimpleStore();\n *\n * @name module:js-data.SimpleStore\n * @see SimpleStore\n * @since 3.0.0\n * @tutorial [\"http://www.js-data.io/v3.0/docs/components-of-jsdata#SimpleStore\",\"Components of JSData: SimpleStore\"]\n * @type {Constructor}\n */\nimport SimpleStore from './SimpleStore'\n\n/**\n * Describes the version of this `JSData` object.\n *\n * @example\n * console.log(JSData.version.full); // \"3.0.0-beta.1\"\n *\n * @name version\n * @memberof module:js-data\n * @property {string} full The full semver value.\n * @property {number} major The major version number.\n * @property {number} minor The minor version number.\n * @property {number} patch The patch version number.\n * @property {(string|boolean)} alpha The alpha version value, otherwise `false`\n * if the current version is not alpha.\n * @property {(string|boolean)} beta The beta version value, otherwise `false`\n * if the current version is not beta.\n * @since 2.0.0\n * @type {Object}\n */\nexport const version = '<%= version %>'\n\nexport * from './decorators'\n\nexport {\n  Collection,\n  Component,\n  Container,\n  DataStore,\n  Index,\n  LinkedCollection,\n  Mapper,\n  Query,\n  Record,\n  Schema,\n  Settable,\n  SimpleStore,\n  utils\n}\n"],"names":["DOMAIN","INFINITY","MAX_INTEGER","BOOL_TAG","DATE_TAG","FUNC_TAG","NUMBER_TAG","OBJECT_TAG","REGEXP_TAG","STRING_TAG","objToString","Object","prototype","toString","PATH","ERRORS","toInteger","value","sign","remainder","toStr","call","isPlainObject","constructor","mkdirP","object","path","parts","split","forEach","key","utils","_","dest","src","forOwn","undefined","isFunction","indexOf","_forRelation","opts","def","fn","thisArg","relationName","relation","containedName","index","_getIndex","localField","withAll","optsCopy","fillIn","getRelation","slice","_activeWith","splice","i","length","substr","list","_relation","isObject","addHiddenPropsToTarget","target","props","map","keys","propName","descriptor","getOwnPropertyDescriptor","enumerable","defineProperties","areDifferent","newObject","oldObject","diff","diffObjects","diffCount","added","removed","changed","copy","from","to","stackFrom","stackTo","blacklist","plain","isArray","isDate","Date","getTime","isRegExp","RegExp","source","match","lastIndex","create","getPrototypeOf","err","push","result","hasOwnProperty","isBlacklisted","deepFillIn","existing","deepMixIn","equalsFn","ignore","deepEqual","newKeys","filter","oldKeys","oldValue","newValue","equal","a","b","domain","code","prefix","args","message","apply","Error","eventify","getter","setter","_events","emit","events","type","shift","listeners","f","c","all","unshift","off","func","on","findIndex","array","record","forEachRelation","mapper","relationList","obj","len","fromJson","json","isString","JSON","parse","get","prop","last","pop","getSuper","instance","isCtor","ctor","__super__","__proto__","intersection","array1","array2","Array","item","matches","test","isBoolean","isInteger","isNull","isNumber","isSorN","isUndefined","logify","dbg","log","level","debug","toUpperCase","name","console","noDupeAdd","omit","_props","pick","reduce","plainCopy","reject","Promise","remove","resolve","set","_path","exec","_equal","toJson","stringify","unset","getDefaultLocale","safeSetProp","field","_set","safeSetLink","Settable","_get","_unset","Component","_listeners","INDEX_ERR","reserved","limit","offset","orderBy","skip","sort","where","locale","escapeRegExp","percentRegExp","underscoreRegExp","escape","pattern","replace","Query","collection","fields","ops","predicates","clause","expr","op","groups","_where","prev","parser","_applyWhereFromArray","_applyWhereFromObject","group","isOr","keep","first","charAt","evaluate","_testArrayGroup","_testObjectGroup","leftKeys","rightKeys","data","getIndex","between","compare","cA","cB","temp","n","predicate","like","query","getData","collator","Intl","Collator","numeric","forEachFn","keyList","concat","getAll","flags","num","Math","min","mapFn","funcName","isectEmpty","isectNotEmpty","notIn","contains","notContains","belongsToType","hasManyType","hasOneType","Relation","relatedMapper","options","TYPE_NAME","validateOptions","related","DOMAIN_ERR","foreignKey","localKey","defineProperty","relationFields","idAttribute","relatedRecord","_setForeignKey","relatedRecords","relatedData","inverse","findInverseRelation","isInversedTo","records","datastore","getLocalField","add","linkRecord","isEmptyLinks","canFindLinkFor","findExistingLinksFor","setLocalField","relatedId","unsaved","relatedCollection","canAutoAddLinks","setForeignKey","id","relationData","is","createRecord","createLinked","then","getCollection","superMethod","store","bind","creatingPath","noValidatePath","keepChangeHistoryPath","previousPath","Record","noValidate","keepChangeHistory","validateOnSet","toJSON","relations","_mapper","quickHasChanges","validate","currentParent","inverseDef","children","child","adapter","getAdapterName","tasks","task","raw","load","localKeys","foreignKeys","previous","preserve","commit","postProcess","changesOnly","changes","silent","hashCode","insertAt","removeAt","binarySearch","lo","hi","compared","mid","found","Index","fieldList","fieldGetter","isIndex","values","pos","dataLocation","newIndex","results","order","cb","visitAll","leftInclusive","rightInclusive","_between","leftKey","rightKey","currKey","peek","isUnique","removeRecord","j","insertRecord","COLLECTION_DEFAULTS","commitOnMerge","emitRecordEvents","onConflict","Collection","queryClass","recordId","beforeAdd","singular","existingNoValidate","updateIndexes","indexes","_onRecordEvent","afterAdd","run","queryOrFn","instances","removeAll","Ctor","initialValue","idOrRecord","beforeRemove","afterRemove","queryOrRecords","beforeRemoveAll","afterRemoveAll","mapCall","updateRecord","TsDataError","types","integer","number","string","segmentToString","segment","str","makePath","segments","makeError","actual","expected","addError","errors","maxLengthCommon","keyword","schema","max","minLengthCommon","validationKeywords","allOf","allErrors","_schema","anyOf","validated","dependencies","possibleValues","join","items","checkingTuple","maximum","exclusiveMaximum","maxItems","maxLength","maxProperties","minimum","exclusiveMinimum","minItems","minLength","minProperties","multipleOf","not","oneOf","properties","additionalProperties","patternProperties","toValidate","undef","origProp","required","existingOnly","prevProp","validType","_type","validator","typeGroupValidators","uniqueItems","runOps","ANY_OPS","ARRAY_OPS","NUMERIC_OPS","OBJECT_OPS","STRING_OPS","validateAny","ctx","shouldPop","changingPath","changedPath","changeHistoryPath","eventIdPath","silentPath","validationFailureMsg","Schema","definition","_definition","validationKeyword","unsetter","track","makeDescriptor","hasSet","orig","applyDefaults","configurable","keyPath","error","current","changing","clearTimeout","setTimeout","changeRecord","timestamp","changeHistory","originalGet","originalSet","_copy","BelongsToRelation","HasManyRelation","hasForeignKeys","ids","findExistingLinksByForeignKey","findExistingLinksByLocalKeys","findExistingLinksByForeignKeys","foreignIdField","createMany","HasOneRelation","RelationType","belongsTo","assignTo","hasMany","hasOne","applyDefaultsHooks","validatingHooks","makeNotify","getSchema","toProcess","originalExistingOnly","notify","notify2","LIFECYCLE_METHODS","count","defaults","destroy","destroyAll","find","findAll","sum","update","adapterArgs","beforeAssign","updateAll","updateMany","MAPPER_DEFAULTS","_adapters","applySchema","defaultAdapter","Mapper","recordClass","methods","isPrototypeOf","_data","wrap","crud","originalRecord","parentRelationMap","adapterResponse","_runHook","_createParentRecordIfRequired","relationMap","_invokeAdapterMethod","createdProps","_createOrAssignChildRecordIfRequired","originalProps","_commitChanges","_end","recordOrRecords","newValues","isRequiresParentId","createParentRecord","context","isRequiresChildId","createChildRecord","parent","originalRecords","belongsToRelationData","Boolean","createdRecordsData","belongsToData","createdRecordData","ensureLinkedDataHasProperType","RecordCtor","method","config","lifecycleMethods","upper","before","after","_value","getAdapter","_opts","assign","_result","getAdapters","hookName","hookArgs","defaultValueIndex","overridenResult","propsOrRecords","conversionOptions","pass","_record","some","_name","getMapperByName","getMapper","proxiedMapperMethods","Container","_mappers","mapperClass","writable","mapperDefaults","original","_onMapperEvent","defineRelations","warn","defineMapper","proxiedCollectionMethods","ownMethodsForScoping","cachedFn","hashOrId","cached","_completedQueries","SIMPLESTORE_DEFAULTS","usePendingFind","usePendingFindAll","SimpleStore","collectionClass","addToCache","hash","_collections","self","_pendingQueries","collectionOpts","_added","indexed","createIndex","_onCollectionEvent","hashQuery","pendingQuery","cachedFind","force","promise","cacheFind","cachedFindAll","cacheFindAll","removeRelated","getForeignKey","indexName","prune","LinkedCollection","event","addLinkedRecords","_addMeta","_clearMeta","removeLinkedRecords","DATASTORE_DEFAULTS","unlinkOnDestroy","DataStore","updateOpts","getInverse","removeInverseRelation","relatedIdAttribute","updateIndex","setupInverseRelation","foreignKeyDescriptor","currentParentId","storeRecord","inverseLocalField","toLink","toLinkIds","currentChildrenOfParent","parents","_key","origGet","origSet","version"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;;;;;;;;EAWA,IAAMA,MAAM,GAAG,OAAf;EAEA,IAAMC,QAAQ,GAAG,IAAI,CAArB;EACA,IAAMC,WAAW,GAAG,sBAApB;EACA,IAAMC,QAAQ,GAAG,kBAAjB;EACA,IAAMC,QAAQ,GAAG,eAAjB;EACA,IAAMC,QAAQ,GAAG,mBAAjB;EACA,IAAMC,UAAU,GAAG,iBAAnB;EACA,IAAMC,UAAU,GAAG,iBAAnB;EACA,IAAMC,UAAU,GAAG,iBAAnB;EACA,IAAMC,UAAU,GAAG,iBAAnB;EACA,IAAMC,WAAW,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAArC;EACA,IAAMC,IAAI,GAAG,cAAb;EAEA,IAAMC,MAAM,GAAG;EACb,OADa;EAEX,qGAAuC,iKAAvC;EACD,GAHY;EAIb,OAJa;EAKX;EACD;EANY,CAAf;;EASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;EACrB,MAAI,CAACA,KAAL,EAAY;EACV,WAAO,CAAP;EACD;;;EAEDA,EAAAA,KAAK,GAAG,CAACA,KAAT;;EACA,MAAIA,KAAK,KAAKhB,QAAV,IAAsBgB,KAAK,KAAK,CAAChB,QAArC,EAA+C;EAC7C,QAAMiB,IAAI,GAAGD,KAAK,GAAG,CAAR,GAAY,CAAC,CAAb,GAAiB,CAA9B;EACA,WAAOC,IAAI,GAAGhB,WAAd;EACD;;EACD,MAAMiB,SAAS,GAAGF,KAAK,GAAG,CAA1B;EACA,SAAOA,KAAK,KAAKA,KAAV,GAAmBE,SAAS,GAAGF,KAAK,GAAGE,SAAX,GAAuBF,KAAnD,GAA4D,CAAnE;EACD,CAZD;;EAcA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAAAH,KAAK;EAAA,SAAIP,WAAW,CAACW,IAAZ,CAAiBJ,KAAjB,CAAJ;EAAA,CAAnB;;EAEA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAL,KAAK;EAAA,SAAI,CAAC,CAACA,KAAF,IAAW,QAAOA,KAAP,MAAiB,QAA5B,IAAwCA,KAAK,CAACM,WAAN,KAAsBZ,MAAlE;EAAA,CAA3B;;EAEA,IAAMa,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAASC,IAAT;EACb,MAAI,CAACA,IAAL,EAAW;EACT,WAAOD,MAAP;EACD;;EACD,MAAME,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;EACAD,EAAAA,KAAK,CAACE,OAAN,CAAc,UAAAC,GAAG;EACf,QAAI,CAACL,MAAM,CAACK,GAAD,CAAX,EAAkB;EAChBL,MAAAA,MAAM,CAACK,GAAD,CAAN,GAAc,EAAd;EACD;;EACDL,IAAAA,MAAM,GAAGA,MAAM,CAACK,GAAD,CAAf;EACD,GALD;EAMA,SAAOL,MAAP;EACD,CAZD;;EAcA,IAAMM,KAAK,GAAG;EACZ;;;;;;;;;;;;;;EAcAC,EAAAA,CAfY,aAeTC,IAfS,EAeHC,GAfG;EAgBVH,IAAAA,KAAK,CAACI,MAAN,CAAaD,GAAb,EAAkB,UAACjB,KAAD,EAAQa,GAAR;EAChB,UAAIA,GAAG,IAAIG,IAAI,CAACH,GAAD,CAAJ,KAAcM,SAArB,IAAkC,CAACL,KAAK,CAACM,UAAN,CAAiBpB,KAAjB,CAAnC,IAA8Da,GAAG,CAACQ,OAAJ,CAAY,GAAZ,MAAqB,CAAvF,EAA0F;EACxFL,QAAAA,IAAI,CAACH,GAAD,CAAJ,GAAYb,KAAZ;EACD;EACF,KAJD;EAKD,GArBW;;EAuBZ;;;;;;;;;;;EAWAsB,EAAAA,YAlCY;UAkCEC,2EAAY;UAAIC;UAAKC;UAAIC;EACrC,QAAMC,YAAY,GAAGH,GAAG,CAACI,QAAzB;EACA,QAAIC,aAAa,GAAG,IAApB;EACA,QAAIC,KAAJ;EACAP,IAAAA,IAAI,QAAJ,GAAYA,IAAI,QAAJ,IAAa,EAAzB;;EAEA,QAAI,CAACO,KAAK,GAAGhB,KAAK,CAACiB,SAAN,CAAgBR,IAAI,QAApB,EAA2BI,YAA3B,CAAT,KAAsD,CAA1D,EAA6D;EAC3DE,MAAAA,aAAa,GAAGF,YAAhB;EACD,KAFD,MAEO,IAAI,CAACG,KAAK,GAAGhB,KAAK,CAACiB,SAAN,CAAgBR,IAAI,QAApB,EAA2BC,GAAG,CAACQ,UAA/B,CAAT,KAAwD,CAA5D,EAA+D;EACpEH,MAAAA,aAAa,GAAGL,GAAG,CAACQ,UAApB;EACD;;EAED,QAAIT,IAAI,CAACU,OAAT,EAAkB;EAChBR,MAAAA,EAAE,CAACrB,IAAH,CAAQsB,OAAR,EAAiBF,GAAjB,EAAsB,EAAtB;EACA;EACD,KAHD,MAGO,IAAI,CAACK,aAAL,EAAoB;EACzB;EACD;;EACD,QAAMK,QAAQ,GAAQ,EAAtB;EACApB,IAAAA,KAAK,CAACqB,MAAN,CAAaD,QAAb,EAAuBV,GAAG,CAACY,WAAJ,EAAvB;EACAtB,IAAAA,KAAK,CAACqB,MAAN,CAAaD,QAAb,EAAuBX,IAAvB;EACAW,IAAAA,QAAQ,QAAR,GAAgBX,IAAI,QAAJ,CAAUc,KAAV,EAAhB;EACAH,IAAAA,QAAQ,CAACI,WAAT,GAAuBJ,QAAQ,QAAR,CAAcK,MAAd,CAAqBT,KAArB,EAA4B,CAA5B,EAA+B,CAA/B,CAAvB;EACAI,IAAAA,QAAQ,QAAR,CAActB,OAAd,CAAsB,UAACgB,QAAD,EAAWY,CAAX;EACpB,UACEZ,QAAQ,IACRA,QAAQ,CAACP,OAAT,CAAiBQ,aAAjB,MAAoC,CADpC,IAEAD,QAAQ,CAACa,MAAT,IAAmBZ,aAAa,CAACY,MAFjC,IAGAb,QAAQ,CAACC,aAAa,CAACY,MAAf,CAAR,KAAmC,GAJrC,EAKE;EACAP,QAAAA,QAAQ,QAAR,CAAcM,CAAd,IAAmBZ,QAAQ,CAACc,MAAT,CAAgBb,aAAa,CAACY,MAAd,GAAuB,CAAvC,CAAnB;EACD,OAPD,MAOO;EACLP,QAAAA,QAAQ,QAAR,CAAcM,CAAd,IAAmB,EAAnB;EACD;EACF,KAXD;EAYAf,IAAAA,EAAE,CAACrB,IAAH,CAAQsB,OAAR,EAAiBF,GAAjB,EAAsBU,QAAtB;EACD,GAtEW;;EAwEZ;;;;;;;;;EASAH,EAAAA,SAjFY,qBAiFDY,IAjFC,EAiFKf,QAjFL;EAkFV,QAAIE,KAAK,GAAG,CAAC,CAAb;EACAa,IAAAA,IAAI,CAAC/B,OAAL,CAAa,UAACgC,SAAD,EAAYJ,CAAZ;EACX,UAAII,SAAS,KAAKhB,QAAlB,EAA4B;EAC1BE,QAAAA,KAAK,GAAGU,CAAR;EACA,eAAO,KAAP;EACD,OAHD,MAGO,IAAI1B,KAAK,CAAC+B,QAAN,CAAeD,SAAf,CAAJ,EAA+B;EACpC,YAAIA,SAAS,CAAChB,QAAV,KAAuBA,QAA3B,EAAqC;EACnCE,UAAAA,KAAK,GAAGU,CAAR;EACA,iBAAO,KAAP;EACD;EACF;EACF,KAVD;EAWA,WAAOV,KAAP;EACD,GA/FW;;EAiGZ;;;;;;;;;;;;;;;;;;;;EAoBAgB,EAAAA,sBArHY,kCAqHYC,MArHZ,EAqHoBC,KArHpB;EAsHV,QAAMC,GAAG,GAAG,EAAZ;EACAvD,IAAAA,MAAM,CAACwD,IAAP,CAAYF,KAAZ,EAAmBpC,OAAnB,CAA2B,UAAAuC,QAAQ;EACjC,UAAMC,UAAU,GAAG1D,MAAM,CAAC2D,wBAAP,CAAgCL,KAAhC,EAAuCG,QAAvC,CAAnB;EAEAC,MAAAA,UAAU,CAACE,UAAX,GAAwB,KAAxB;EACAL,MAAAA,GAAG,CAACE,QAAD,CAAH,GAAgBC,UAAhB;EACD,KALD;EAMA1D,IAAAA,MAAM,CAAC6D,gBAAP,CAAwBR,MAAxB,EAAgCE,GAAhC;EACD,GA9HW;;EAgIZ;;;;;;;;;;;;;;;;;;;EAmBAO,EAAAA,YAnJY,wBAmJEC,SAnJF,EAmJaC,SAnJb;UAmJwBnC,2EAAY;EAC9C,QAAMoC,IAAI,GAAG7C,KAAK,CAAC8C,WAAN,CAAkBH,SAAlB,EAA6BC,SAA7B,EAAwCnC,IAAxC,CAAb;EACA,QAAMsC,SAAS,GACbnE,MAAM,CAACwD,IAAP,CAAYS,IAAI,CAACG,KAAjB,EAAwBrB,MAAxB,GAAiC/C,MAAM,CAACwD,IAAP,CAAYS,IAAI,CAACI,OAAjB,EAA0BtB,MAA3D,GAAoE/C,MAAM,CAACwD,IAAP,CAAYS,IAAI,CAACK,OAAjB,EAA0BvB,MADhG;EAEA,WAAOoB,SAAS,GAAG,CAAnB;EACD,GAxJW;;EA0JZ;;;;;;;;;;;;;;;;;;;;;EAqBAI,EAAAA,IA/KY,gBA+KNC,IA/KM,EA+KAC,EA/KA,EA+KKC,SA/KL,EA+KiBC,OA/KjB,EA+K2BC,SA/K3B,EA+KuCC,KA/KvC;EAgLV,QAAI,CAACJ,EAAL,EAAS;EACPA,MAAAA,EAAE,GAAGD,IAAL;;EACA,UAAIA,IAAJ,EAAU;EACR,YAAIpD,KAAK,CAAC0D,OAAN,CAAcN,IAAd,CAAJ,EAAyB;EACvBC,UAAAA,EAAE,GAAGrD,KAAK,CAACmD,IAAN,CAAWC,IAAX,EAAiB,EAAjB,EAAqBE,SAArB,EAAgCC,OAAhC,EAAyCC,SAAzC,EAAoDC,KAApD,CAAL;EACD,SAFD,MAEO,IAAIzD,KAAK,CAAC2D,MAAN,CAAaP,IAAb,CAAJ,EAAwB;EAC7BC,UAAAA,EAAE,GAAG,IAAIO,IAAJ,CAASR,IAAI,CAACS,OAAL,EAAT,CAAL;EACD,SAFM,MAEA,IAAI7D,KAAK,CAAC8D,QAAN,CAAeV,IAAf,CAAJ,EAA0B;EAC/BC,UAAAA,EAAE,GAAG,IAAIU,MAAJ,CAAWX,IAAI,CAACY,MAAhB,EAAwBZ,IAAI,CAACtE,QAAL,GAAgBmF,KAAhB,CAAsB,QAAtB,EAAgC,CAAhC,CAAxB,CAAL;EACAZ,UAAAA,EAAE,CAACa,SAAH,GAAed,IAAI,CAACc,SAApB;EACD,SAHM,MAGA,IAAIlE,KAAK,CAAC+B,QAAN,CAAeqB,IAAf,CAAJ,EAA0B;EAC/B,cAAIK,KAAJ,EAAW;EACTJ,YAAAA,EAAE,GAAGrD,KAAK,CAACmD,IAAN,CAAWC,IAAX,EAAiB,EAAjB,EAAqBE,SAArB,EAAgCC,OAAhC,EAAyCC,SAAzC,EAAoDC,KAApD,CAAL;EACD,WAFD,MAEO;EACLJ,YAAAA,EAAE,GAAGrD,KAAK,CAACmD,IAAN,CAAWC,IAAX,EAAiBxE,MAAM,CAACuF,MAAP,CAAcvF,MAAM,CAACwF,cAAP,CAAsBhB,IAAtB,CAAd,CAAjB,EAA6DE,SAA7D,EAAwEC,OAAxE,EAAiFC,SAAjF,EAA4FC,KAA5F,CAAL;EACD;EACF;EACF;EACF,KAlBD,MAkBO;EACL,UAAIL,IAAI,KAAKC,EAAb,EAAiB;EACf,cAAMrD,KAAK,CAACqE,GAAN,WAAapG,MAAb,YAA4B,GAA5B,EAAiC,oDAAjC,CAAN;EACD;;EAEDqF,MAAAA,SAAS,GAAGA,SAAS,IAAI,EAAzB;EACAC,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;EAEA,UAAIvD,KAAK,CAAC+B,QAAN,CAAeqB,IAAf,CAAJ,EAA0B;EACxB,YAAMpC,KAAK,GAAGsC,SAAS,CAAC/C,OAAV,CAAkB6C,IAAlB,CAAd;;EACA,YAAIpC,KAAK,KAAK,CAAC,CAAf,EAAkB;EAChB,iBAAOuC,OAAO,CAACvC,KAAD,CAAd;EACD;;EAEDsC,QAAAA,SAAS,CAACgB,IAAV,CAAelB,IAAf;EACAG,QAAAA,OAAO,CAACe,IAAR,CAAajB,EAAb;EACD;;EAED,UAAIkB,MAAJ;;EACA,UAAIvE,KAAK,CAAC0D,OAAN,CAAcN,IAAd,CAAJ,EAAyB;EACvB,YAAI1B,CAAJ;EACA2B,QAAAA,EAAE,CAAC1B,MAAH,GAAY,CAAZ;;EACA,aAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0B,IAAI,CAACzB,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;EAChC6C,UAAAA,MAAM,GAAGvE,KAAK,CAACmD,IAAN,CAAWC,IAAI,CAAC1B,CAAD,CAAf,EAAoB,IAApB,EAA0B4B,SAA1B,EAAqCC,OAArC,EAA8CC,SAA9C,EAAyDC,KAAzD,CAAT;;EACA,cAAIzD,KAAK,CAAC+B,QAAN,CAAeqB,IAAI,CAAC1B,CAAD,CAAnB,CAAJ,EAA6B;EAC3B4B,YAAAA,SAAS,CAACgB,IAAV,CAAelB,IAAI,CAAC1B,CAAD,CAAnB;EACA6B,YAAAA,OAAO,CAACe,IAAR,CAAaC,MAAb;EACD;;EACDlB,UAAAA,EAAE,CAACiB,IAAH,CAAQC,MAAR;EACD;EACF,OAXD,MAWO;EACL,YAAIvE,KAAK,CAAC0D,OAAN,CAAcL,EAAd,CAAJ,EAAuB;EACrBA,UAAAA,EAAE,CAAC1B,MAAH,GAAY,CAAZ;EACD,SAFD,MAEO;EACL3B,UAAAA,KAAK,CAACI,MAAN,CAAaiD,EAAb,EAAiB,UAACnE,KAAD,EAAQa,GAAR;EACf,mBAAOsD,EAAE,CAACtD,GAAD,CAAT;EACD,WAFD;EAGD;;EACD,aAAK,IAAMA,GAAX,IAAkBqD,IAAlB,EAAwB;EACtB,cAAIA,IAAI,CAACoB,cAAL,CAAoBzE,GAApB,CAAJ,EAA8B;EAC5B,gBAAIC,KAAK,CAACyE,aAAN,CAAoB1E,GAApB,EAAyByD,SAAzB,CAAJ,EAAyC;EACvC;EACD;;EACDe,YAAAA,MAAM,GAAGvE,KAAK,CAACmD,IAAN,CAAWC,IAAI,CAACrD,GAAD,CAAf,EAAsB,IAAtB,EAA4BuD,SAA5B,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA2DC,KAA3D,CAAT;;EACA,gBAAIzD,KAAK,CAAC+B,QAAN,CAAeqB,IAAI,CAACrD,GAAD,CAAnB,CAAJ,EAA+B;EAC7BuD,cAAAA,SAAS,CAACgB,IAAV,CAAelB,IAAI,CAACrD,GAAD,CAAnB;EACAwD,cAAAA,OAAO,CAACe,IAAR,CAAaC,MAAb;EACD;;EACDlB,YAAAA,EAAE,CAACtD,GAAD,CAAF,GAAUwE,MAAV;EACD;EACF;EACF;EACF;;EACD,WAAOlB,EAAP;EACD,GAxPW;;EA0PZ;;;;;;;;;;;;;;;;;;EAkBAqB,EAAAA,UA5QY,sBA4QAxE,IA5QA,EA4QM8D,MA5QN;EA6QV,QAAIA,MAAJ,EAAY;EACVhE,MAAAA,KAAK,CAACI,MAAN,CAAa4D,MAAb,EAAqB,UAAC9E,KAAD,EAAQa,GAAR;EACnB,YAAM4E,QAAQ,GAAGzE,IAAI,CAACH,GAAD,CAArB;;EACA,YAAIR,aAAa,CAACL,KAAD,CAAb,IAAwBK,aAAa,CAACoF,QAAD,CAAzC,EAAqD;EACnD3E,UAAAA,KAAK,CAAC0E,UAAN,CAAiBC,QAAjB,EAA2BzF,KAA3B;EACD,SAFD,MAEO,IAAI,CAACgB,IAAI,CAACsE,cAAL,CAAoBzE,GAApB,CAAD,IAA6BG,IAAI,CAACH,GAAD,CAAJ,KAAcM,SAA/C,EAA0D;EAC/DH,UAAAA,IAAI,CAACH,GAAD,CAAJ,GAAYb,KAAZ;EACD;EACF,OAPD;EAQD;;EACD,WAAOgB,IAAP;EACD,GAxRW;;EA0RZ;;;;;;;;;;;;;;;;;EAiBA0E,EAAAA,SA3SY,qBA2SD1E,IA3SC,EA2SK8D,MA3SL;EA4SV,QAAIA,MAAJ,EAAY;EACV;EACA,WAAK,IAAMjE,GAAX,IAAkBiE,MAAlB,EAA0B;EACxB,YAAM9E,KAAK,GAAG8E,MAAM,CAACjE,GAAD,CAApB;EACA,YAAM4E,QAAQ,GAAGzE,IAAI,CAACH,GAAD,CAArB;;EACA,YAAIR,aAAa,CAACL,KAAD,CAAb,IAAwBK,aAAa,CAACoF,QAAD,CAAzC,EAAqD;EACnD3E,UAAAA,KAAK,CAAC4E,SAAN,CAAgBD,QAAhB,EAA0BzF,KAA1B;EACD,SAFD,MAEO;EACLgB,UAAAA,IAAI,CAACH,GAAD,CAAJ,GAAYb,KAAZ;EACD;EACF;EACF;;EACD,WAAOgB,IAAP;EACD,GAzTW;;EA2TZ;;;;;;;;;;;;;;;;;;;;;;EAsBA4C,EAAAA,WAjVY,uBAiVCH,SAjVD,EAiVYC,SAjVZ;UAiVuBnC,2EAAY;EAC7C,QAAIoE,QAAQ,GAAGpE,IAAI,CAACoE,QAApB;EACA,QAAMrB,SAAS,GAAG/C,IAAI,CAACqE,MAAvB;EACA,QAAMjC,IAAI,GAAG;EACXG,MAAAA,KAAK,EAAE,EADI;EAEXE,MAAAA,OAAO,EAAE,EAFE;EAGXD,MAAAA,OAAO,EAAE;EAHE,KAAb;;EAKA,QAAI,CAACjD,KAAK,CAACM,UAAN,CAAiBuE,QAAjB,CAAL,EAAiC;EAC/BA,MAAAA,QAAQ,GAAG7E,KAAK,CAAC+E,SAAjB;EACD;;EAED,QAAMC,OAAO,GAAGpG,MAAM,CAACwD,IAAP,CAAYO,SAAZ,EAAuBsC,MAAvB,CAA8B,UAAAlF,GAAG;EAAA,aAAI,CAACC,KAAK,CAACyE,aAAN,CAAoB1E,GAApB,EAAyByD,SAAzB,CAAL;EAAA,KAAjC,CAAhB;EACA,QAAM0B,OAAO,GAAGtG,MAAM,CAACwD,IAAP,CAAYQ,SAAZ,EAAuBqC,MAAvB,CAA8B,UAAAlF,GAAG;EAAA,aAAI,CAACC,KAAK,CAACyE,aAAN,CAAoB1E,GAApB,EAAyByD,SAAzB,CAAL;EAAA,KAAjC,CAAhB;;EAGAwB,IAAAA,OAAO,CAAClF,OAAR,CAAgB,UAAAC,GAAG;EACjB,UAAMoF,QAAQ,GAAGvC,SAAS,CAAC7C,GAAD,CAA1B;EACA,UAAMqF,QAAQ,GAAGzC,SAAS,CAAC5C,GAAD,CAA1B;;EACA,UAAI8E,QAAQ,CAACM,QAAD,EAAWC,QAAX,CAAZ,EAAkC;EAChC;EACD;;EACD,UAAID,QAAQ,KAAK9E,SAAjB,EAA4B;EAC1BwC,QAAAA,IAAI,CAACG,KAAL,CAAWjD,GAAX,IAAkBqF,QAAlB;EACD,OAFD,MAEO;EACLvC,QAAAA,IAAI,CAACK,OAAL,CAAanD,GAAb,IAAoBqF,QAApB;EACD;EACF,KAXD;;EAcAF,IAAAA,OAAO,CAACpF,OAAR,CAAgB,UAAAC,GAAG;EACjB,UAAMoF,QAAQ,GAAGvC,SAAS,CAAC7C,GAAD,CAA1B;EACA,UAAMqF,QAAQ,GAAGzC,SAAS,CAAC5C,GAAD,CAA1B;;EACA,UAAIqF,QAAQ,KAAK/E,SAAb,IAA0B8E,QAAQ,KAAK9E,SAA3C,EAAsD;EACpDwC,QAAAA,IAAI,CAACI,OAAL,CAAalD,GAAb,IAAoBM,SAApB;EACD;EACF,KAND;EAQA,WAAOwC,IAAP;EACD,GAxXW;;EA0XZ;;;;;;;;;;;;;;;EAeAwC,EAAAA,KAzYY,iBAyYLC,CAzYK,EAyYFC,CAzYE;EA0YV;EACA,WAAOD,CAAC,IAAIC,CAAZ;EACD,GA5YW;;EA8YZ;;;;;;;;;;;;;;;;EAgBAlB,EAAAA,GA9ZY,eA8ZPmB,MA9ZO,EA8ZCvD,MA9ZD;EA+ZV,WAAO,UAACwD,IAAD;EACL,UAAMC,MAAM,cAAOF,MAAP,cAAiBvD,MAAjB,OAAZ;;0CADe0D;EAAAA,QAAAA;;;EAEf,UAAIC,OAAO,GAAG5G,MAAM,CAACyG,IAAD,CAAN,CAAaI,KAAb,CAAmB,IAAnB,EAAyBF,IAAzB,CAAd;EACAC,MAAAA,OAAO,aAAMF,MAAN,SAAeE,OAAf,sDAC4BH,IAD5B,CAAP;EAEA,aAAO,IAAIK,KAAJ,CAAUF,OAAV,CAAP;EACD,KAND;EAOD,GAtaW;;EAwaZ;;;;;;;;;;;;;;;;;;EAkBAG,EAAAA,QA1bY,oBA0bF9D,MA1bE,EA0bM+D,MA1bN,EA0beC,MA1bf;EA2bVhE,IAAAA,MAAM,GAAGA,MAAM,IAAI,IAAnB;EACA,QAAIiE,OAAO,GAAG,EAAd;;EACA,QAAI,CAACF,MAAD,IAAW,CAACC,MAAhB,EAAwB;EACtBD,MAAAA,MAAM,GAAG;EAAA,eAAME,OAAN;EAAA,OAAT;;EACAD,MAAAA,MAAM,GAAG,gBAAA/G,KAAK;EAAA,eAAKgH,OAAO,GAAGhH,KAAf;EAAA,OAAd;EACD;;EACDN,IAAAA,MAAM,CAAC6D,gBAAP,CAAwBR,MAAxB,EAAgC;EAC9BkE,MAAAA,IAAI,EAAE;EACJjH,QAAAA,KADI;EAEF,cAAMkH,MAAM,GAAGJ,MAAM,CAAC1G,IAAP,CAAY,IAAZ,KAAqB,EAApC;;+CADQqG;EAAAA,YAAAA;;;EAER,cAAMU,IAAI,GAAGV,IAAI,CAACW,KAAL,EAAb;EACA,cAAIC,SAAS,GAAGH,MAAM,CAACC,IAAD,CAAN,IAAgB,EAAhC;EACA,cAAI3E,CAAJ;;EACA,eAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG6E,SAAS,CAAC5E,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;EACrC6E,YAAAA,SAAS,CAAC7E,CAAD,CAAT,CAAa8E,CAAb,CAAeX,KAAf,CAAqBU,SAAS,CAAC7E,CAAD,CAAT,CAAa+E,CAAlC,EAAqCd,IAArC;EACD;;EACDY,UAAAA,SAAS,GAAGH,MAAM,CAACM,GAAP,IAAc,EAA1B;EACAf,UAAAA,IAAI,CAACgB,OAAL,CAAaN,IAAb;;EACA,eAAK3E,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG6E,SAAS,CAAC5E,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;EACrC6E,YAAAA,SAAS,CAAC7E,CAAD,CAAT,CAAa8E,CAAb,CAAeX,KAAf,CAAqBU,SAAS,CAAC7E,CAAD,CAAT,CAAa+E,CAAlC,EAAqCd,IAArC;EACD;EACF;EAdG,OADwB;EAiB9BiB,MAAAA,GAAG,EAAE;EACH1H,QAAAA,KADG,iBACImH,IADJ,EACUQ,IADV;EAED,cAAMT,MAAM,GAAGJ,MAAM,CAAC1G,IAAP,CAAY,IAAZ,CAAf;EACA,cAAMiH,SAAS,GAAGH,MAAM,CAACC,IAAD,CAAxB;;EACA,cAAI,CAACE,SAAL,EAAgB;EACdN,YAAAA,MAAM,CAAC3G,IAAP,CAAY,IAAZ,EAAkB,EAAlB;EACD,WAFD,MAEO,IAAIuH,IAAJ,EAAU;EACf,iBAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6E,SAAS,CAAC5E,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;EACzC,kBAAI6E,SAAS,CAAC7E,CAAD,CAAT,CAAa8E,CAAb,KAAmBK,IAAvB,EAA6B;EAC3BN,gBAAAA,SAAS,CAAC9E,MAAV,CAAiBC,CAAjB,EAAoB,CAApB;EACA;EACD;EACF;EACF,WAPM,MAOA;EACL6E,YAAAA,SAAS,CAAC9E,MAAV,CAAiB,CAAjB,EAAoB8E,SAAS,CAAC5E,MAA9B;EACD;EACF;EAhBE,OAjByB;EAmC9BmF,MAAAA,EAAE,EAAE;EACF5H,QAAAA,KADE,iBACKmH,IADL,EACWQ,IADX,EACiBjG,OADjB;EAEA,cAAI,CAACoF,MAAM,CAAC1G,IAAP,CAAY,IAAZ,CAAL,EAAwB;EACtB2G,YAAAA,MAAM,CAAC3G,IAAP,CAAY,IAAZ,EAAkB,EAAlB;EACD;;EACD,cAAM8G,MAAM,GAAGJ,MAAM,CAAC1G,IAAP,CAAY,IAAZ,CAAf;EACA8G,UAAAA,MAAM,CAACC,IAAD,CAAN,GAAeD,MAAM,CAACC,IAAD,CAAN,IAAgB,EAA/B;EACAD,UAAAA,MAAM,CAACC,IAAD,CAAN,CAAa/B,IAAb,CAAkB;EAChBmC,YAAAA,CAAC,EAAE7F,OADa;EAEhB4F,YAAAA,CAAC,EAAEK;EAFa,WAAlB;EAID;EAXC;EAnC0B,KAAhC;EAiDD,GAlfW;;EAofZ;;;;;;;;;;;;;;;;;;EAkBAxF,EAAAA,MAtgBY,kBAsgBJnB,IAtgBI,EAsgBEC,GAtgBF;EAugBVH,IAAAA,KAAK,CAACI,MAAN,CAAaD,GAAb,EAAkB,UAACjB,KAAD,EAAQa,GAAR;EAChB,UAAI,CAACG,IAAI,CAACsE,cAAL,CAAoBzE,GAApB,CAAD,IAA6BG,IAAI,CAACH,GAAD,CAAJ,KAAcM,SAA/C,EAA0D;EACxDH,QAAAA,IAAI,CAACH,GAAD,CAAJ,GAAYb,KAAZ;EACD;EACF,KAJD;EAKD,GA5gBW;;EA8gBZ;;;;;;;;;;;;;;;;;;;;;;EAsBA6H,EAAAA,SApiBY,qBAoiBDC,KApiBC,EAoiBMrG,EApiBN;EAqiBV,QAAIK,KAAK,GAAG,CAAC,CAAb;;EACA,QAAI,CAACgG,KAAL,EAAY;EACV,aAAOhG,KAAP;EACD;;EACDgG,IAAAA,KAAK,CAAClH,OAAN,CAAc,UAACmH,MAAD,EAASvF,CAAT;EACZ,UAAIf,EAAE,CAACsG,MAAD,CAAN,EAAgB;EACdjG,QAAAA,KAAK,GAAGU,CAAR;EACA,eAAO,KAAP;EACD;EACF,KALD;EAMA,WAAOV,KAAP;EACD,GAhjBW;;EAkjBZ;;;;;;;;;;;EAWAkG,EAAAA,eA7jBY,2BA6jBKC,MA7jBL,EA6jBa1G,IA7jBb,EA6jBmBE,EA7jBnB,EA6jBuBC,OA7jBvB;EA8jBV,QAAMwG,YAAY,GAAGD,MAAM,CAACC,YAAP,IAAuB,EAA5C;;EACA,QAAI,CAACA,YAAY,CAACzF,MAAlB,EAA0B;EACxB;EACD;;EACDyF,IAAAA,YAAY,CAACtH,OAAb,CAAqB,UAAAY,GAAG;EACtBV,MAAAA,KAAK,CAACQ,YAAN,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,EAA9B,EAAkCC,OAAlC;EACD,KAFD;EAGD,GArkBW;;EAukBZ;;;;;;;;;;;;;;;;;;EAkBAR,EAAAA,MAzlBY,kBAylBJiH,GAzlBI,EAylBC1G,EAzlBD,EAylBKC,OAzlBL;EA0lBV,QAAMwB,IAAI,GAAGxD,MAAM,CAACwD,IAAP,CAAYiF,GAAZ,CAAb;EACA,QAAMC,GAAG,GAAGlF,IAAI,CAACT,MAAjB;EACA,QAAID,CAAJ;;EACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4F,GAAhB,EAAqB5F,CAAC,EAAtB,EAA0B;EACxB,UAAIf,EAAE,CAACrB,IAAH,CAAQsB,OAAR,EAAiByG,GAAG,CAACjF,IAAI,CAACV,CAAD,CAAL,CAApB,EAA+BU,IAAI,CAACV,CAAD,CAAnC,EAAwC2F,GAAxC,MAAiD,KAArD,EAA4D;EAC1D;EACD;EACF;EACF,GAlmBW;;EAomBZ;;;;;;;;;;;;;;;EAeAE,EAAAA,QAnnBY,oBAmnBFC,IAnnBE;EAonBV,WAAOxH,KAAK,CAACyH,QAAN,CAAeD,IAAf,IAAuBE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAvB,GAA0CA,IAAjD;EACD,GArnBW;;EAunBZ;;;;;;;;;;;;;;;;;EAiBAI,EAAAA,GAxoBY,eAwoBPlI,MAxoBO,EAwoBCmI,IAxoBD;EAyoBV,QAAI,CAACA,IAAL,EAAW;EACT;EACD;EACD;;;EACA,QAAI7H,KAAK,CAACM,UAAN,CAAiBuH,IAAjB,CAAJ,EAA4B;EAC1B,aAAOA,IAAI,CAACnI,MAAD,CAAX;EACD;;EACD,QAAME,KAAK,GAAGiI,IAAI,CAAChI,KAAL,CAAW,GAAX,CAAd;EACA,QAAMiI,IAAI,GAAGlI,KAAK,CAACmI,GAAN,EAAb;;EAEA,WAAQF,IAAI,GAAGjI,KAAK,CAAC0G,KAAN,EAAf,EAA+B;EAC7B;EACA5G,MAAAA,MAAM,GAAGA,MAAM,CAACmI,IAAD,CAAf;;EACA,UAAInI,MAAM,IAAI,IAAd,EAAoB;EAClB;EACA;EACD;EACF;;EAED,WAAOA,MAAM,CAACoI,IAAD,CAAb;EACD,GA7pBW;;EA+pBZ;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BAE,EAAAA,QA1rBY,oBA0rBFC,QA1rBE,EA0rBQC,MA1rBR;EA2rBV,QAAMC,IAAI,GAAGD,MAAM,GAAGD,QAAH,GAAcA,QAAQ,CAACzI,WAA1C;;EACA,QAAI2I,IAAI,CAAC3D,cAAL,CAAoB,WAApB,CAAJ,EAAsC;EACpC,aAAO2D,IAAI,CAACC,SAAZ;EACD;;EACD,WAAOxJ,MAAM,CAACwF,cAAP,CAAsB+D,IAAtB,KAA+BA,IAAI,CAACE,SAA3C;EACD,GAhsBW;;EAksBZ;;;;;;;;;;;;;;;;;EAiBAC,EAAAA,YAntBY,wBAmtBEC,MAntBF,EAmtBUC,MAntBV;EAotBV,QAAI,CAACD,MAAD,IAAW,CAACC,MAAhB,EAAwB;EACtB,aAAO,EAAP;EACD;;EACDD,IAAAA,MAAM,GAAGE,KAAK,CAAC/E,OAAN,CAAc6E,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA1C;EACAC,IAAAA,MAAM,GAAGC,KAAK,CAAC/E,OAAN,CAAc8E,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA1C;EACA,QAAMjE,MAAM,GAAG,EAAf;EACA,QAAImE,IAAJ;EACA,QAAIhH,CAAJ;EACA,QAAM4F,GAAG,GAAGiB,MAAM,CAAC5G,MAAnB;;EACA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4F,GAAhB,EAAqB5F,CAAC,EAAtB,EAA0B;EACxBgH,MAAAA,IAAI,GAAGH,MAAM,CAAC7G,CAAD,CAAb;;EACA,UAAI6C,MAAM,CAAChE,OAAP,CAAemI,IAAf,MAAyB,CAAC,CAA9B,EAAiC;EAC/B;EACD;;EACD,UAAIF,MAAM,CAACjI,OAAP,CAAemI,IAAf,MAAyB,CAAC,CAA9B,EAAiC;EAC/BnE,QAAAA,MAAM,CAACD,IAAP,CAAYoE,IAAZ;EACD;EACF;;EACD,WAAOnE,MAAP;EACD,GAvuBW;;EAyuBZ;;;;;;;;;;;;;;;EAeAb,EAAAA,OAAO,EAAE+E,KAAK,CAAC/E,OAxvBH;;EA0vBZ;;;;;;;;;;;;;;;;;;EAkBAe,EAAAA,aA5wBY,yBA4wBGoD,IA5wBH,EA4wBSrE,SA5wBT;EA6wBV,QAAI,CAACA,SAAD,IAAc,CAACA,SAAS,CAAC7B,MAA7B,EAAqC;EACnC,aAAO,KAAP;EACD;;EACD,QAAIgH,OAAJ;;;;;;EACA,2BAAmBnF,SAAnB,8HAA8B;EAAA,YAAnBkF,IAAmB;;EAC5B,YAAKrJ,KAAK,CAACqJ,IAAD,CAAL,KAAgBjK,UAAhB,IAA8BiK,IAAI,CAACE,IAAL,CAAUf,IAAV,CAA/B,IAAmDa,IAAI,KAAKb,IAAhE,EAAsE;EACpEc,UAAAA,OAAO,GAAGd,IAAV;EACA,iBAAO,CAAC,CAACc,OAAT;EACD;EACF;;;;;;;;;;;;;;;;EACD,WAAO,CAAC,CAACA,OAAT;EACD,GAxxBW;;EA0xBZ;;;;;;;;;;;;;;;EAeAE,EAAAA,SAzyBY,qBAyyBD3J,KAzyBC;EA0yBV,WAAOG,KAAK,CAACH,KAAD,CAAL,KAAiBd,QAAxB;EACD,GA3yBW;;EA6yBZ;;;;;;;;;;;;;;;EAeAuF,EAAAA,MA5zBY,kBA4zBJzE,KA5zBI;EA6zBV,WAAOA,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA1B,IAAsCG,KAAK,CAACH,KAAD,CAAL,KAAiBb,QAA9D;EACD,GA9zBW;;EAg0BZ;;;;;;;;;;;;;;;EAeAiC,EAAAA,UA/0BY,sBA+0BApB,KA/0BA;EAg1BV,WAAO,OAAOA,KAAP,KAAiB,UAAjB,IAAgCA,KAAK,IAAIG,KAAK,CAACH,KAAD,CAAL,KAAiBZ,QAAjE;EACD,GAj1BW;;EAm1BZ;;;;;;;;;;;;;;;;;EAiBAwK,EAAAA,SAp2BY,qBAo2BD5J,KAp2BC;EAq2BV;EACA,WAAOG,KAAK,CAACH,KAAD,CAAL,KAAiBX,UAAjB,IAA+BW,KAAK,IAAID,SAAS,CAACC,KAAD,CAAxD;EACD,GAv2BW;;EAy2BZ;;;;;;;;;;;;;;;EAeA6J,EAAAA,MAx3BY,kBAw3BJ7J,KAx3BI;EAy3BV,WAAOA,KAAK,KAAK,IAAjB;EACD,GA13BW;;EA43BZ;;;;;;;;;;;;;;;;;EAiBA8J,EAAAA,QA74BY,oBA64BF9J,KA74BE;EA84BV,QAAMmH,IAAI,WAAUnH,KAAV,CAAV;;EACA,WAAOmH,IAAI,KAAK,QAAT,IAAsBnH,KAAK,IAAImH,IAAI,KAAK,QAAlB,IAA8BhH,KAAK,CAACH,KAAD,CAAL,KAAiBX,UAA5E;EACD,GAh5BW;;EAk5BZ;;;;;;;;;;;;;;;EAeAwD,EAAAA,QAj6BY,oBAi6BF7C,KAj6BE;EAk6BV,WAAOG,KAAK,CAACH,KAAD,CAAL,KAAiBV,UAAxB;EACD,GAn6BW;;EAq6BZ;;;;;;;;;;;;;;;;;EAiBAsF,EAAAA,QAt7BY,oBAs7BF5E,KAt7BE;EAu7BV,WAAOG,KAAK,CAACH,KAAD,CAAL,KAAiBT,UAAxB;EACD,GAx7BW;;EA07BZ;;;;;;;;;;;;;;;;EAgBAwK,EAAAA,MA18BY,kBA08BJ/J,KA18BI;EA28BV,WAAOc,KAAK,CAACyH,QAAN,CAAevI,KAAf,KAAyBc,KAAK,CAACgJ,QAAN,CAAe9J,KAAf,CAAhC;EACD,GA58BW;;EA88BZ;;;;;;;;;;;;;;;EAeAuI,EAAAA,QA79BY,oBA69BFvI,KA79BE;EA89BV,WAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA8BA,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA1B,IAAsCG,KAAK,CAACH,KAAD,CAAL,KAAiBR,UAA5F;EACD,GA/9BW;;EAi+BZ;;;;;;;;;;;;;;;;;EAiBAwK,EAAAA,WAl/BY,uBAk/BChK,KAl/BD;EAm/BV,WAAOA,KAAK,KAAKmB,SAAjB;EACD,GAp/BW;;EAs/BZ;;;;;;;;;;;;;;;;;;;;EAoBA8I,EAAAA,MA1gCY,kBA0gCJlH,MA1gCI;EA2gCVjC,IAAAA,KAAK,CAACgC,sBAAN,CAA6BC,MAA7B,EAAqC;EACnCmH,MAAAA,GADmC;EAEjC,YAAIpJ,KAAK,CAACM,UAAN,CAAiB,KAAK+I,GAAtB,CAAJ,EAAgC;EAAA,6CAD1B1D,IAC0B;EAD1BA,YAAAA,IAC0B;EAAA;;EAC9B,eAAK0D,GAAL,cAAS,OAAT,SAAqB1D,IAArB;EACD;EACF,OALkC;EAMnC0D,MAAAA,GANmC,eAM9BC,KAN8B;6CAMpB3D;EAAAA,UAAAA;;;EACb,YAAI2D,KAAK,IAAI,CAAC3D,IAAI,CAAChE,MAAnB,EAA2B;EACzBgE,UAAAA,IAAI,CAACrB,IAAL,CAAUgF,KAAV;EACAA,UAAAA,KAAK,GAAG,OAAR;EACD;;EACD,YAAIA,KAAK,KAAK,OAAV,IAAqB,CAAC,KAAKC,KAA/B,EAAsC;EACpC;EACD;;EACD,YAAM7D,MAAM,aAAM4D,KAAK,CAACE,WAAN,EAAN,gBAA+B,KAAKC,IAAL,IAAa,KAAKjK,WAAL,CAAiBiK,IAA7D,MAAZ;;EACA,YAAIzJ,KAAK,CAACM,UAAN,CAAiBoJ,OAAO,CAACJ,KAAD,CAAxB,CAAJ,EAAsC;EAAA;;EACpC,sBAAAI,OAAO,EAACJ,KAAD,CAAP,kBAAe5D,MAAf,SAA0BC,IAA1B;EACD,SAFD,MAEO;EAAA;;EACL,uBAAA+D,OAAO,EAACL,GAAR,mBAAY3D,MAAZ,SAAuBC,IAAvB;EACD;EACF;EApBkC,KAArC;EAsBD,GAjiCW;;EAmiCZ;;;;;;;;;;;;;;;;;;;;;EAqBAgE,EAAAA,SAxjCY,qBAwjCD3C,KAxjCC,EAwjCMC,MAxjCN,EAwjCetG,EAxjCf;EAyjCV,QAAI,CAACqG,KAAL,EAAY;EACV;EACD;;EACD,QAAMhG,KAAK,GAAG,KAAK+F,SAAL,CAAeC,KAAf,EAAsBrG,EAAtB,CAAd;;EACA,QAAIK,KAAK,GAAG,CAAZ,EAAe;EACbgG,MAAAA,KAAK,CAAC1C,IAAN,CAAW2C,MAAX;EACD;EACF,GAhkCW;;EAkkCZ;;;;;;;;;;;;;;;;;EAiBA2C,EAAAA,IAnlCY,gBAmlCN1H,KAnlCM,EAmlCCE,IAnlCD;EAolCV,QAAMyH,MAAM,GAAG,EAAf;EACA7J,IAAAA,KAAK,CAACI,MAAN,CAAa8B,KAAb,EAAoB,UAAChD,KAAD,EAAQa,GAAR;EAClB,UAAIqC,IAAI,CAAC7B,OAAL,CAAaR,GAAb,MAAsB,CAAC,CAA3B,EAA8B;EAC5B8J,QAAAA,MAAM,CAAC9J,GAAD,CAAN,GAAcb,KAAd;EACD;EACF,KAJD;EAKA,WAAO2K,MAAP;EACD,GA3lCW;;EA6lCZ;;;;;;;;;;;;;;;;;EAiBAC,EAAAA,IA9mCY,gBA8mCN5H,KA9mCM,EA8mCCE,IA9mCD;EA+mCV,WAAOA,IAAI,CAAC2H,MAAL,CAAY,UAAC5H,GAAD,EAAMpC,GAAN;EACjBoC,MAAAA,GAAG,CAACpC,GAAD,CAAH,GAAWmC,KAAK,CAACnC,GAAD,CAAhB;EACA,aAAOoC,GAAP;EACD,KAHM,EAGJ,EAHI,CAAP;EAID,GAnnCW;;EAqnCZ;;;;;;;;;;;;;;;EAeA6H,EAAAA,SApoCY,qBAooCD9K,KApoCC;EAqoCV,WAAOc,KAAK,CAACmD,IAAN,CAAWjE,KAAX,EAAkBmB,SAAlB,EAA6BA,SAA7B,EAAwCA,SAAxC,EAAmDA,SAAnD,EAA8D,IAA9D,CAAP;EACD,GAtoCW;;EAwoCZ;;;;;;;;;;;;;;;;EAgBA4J,EAAAA,MAxpCY,kBAwpCJ/K,KAxpCI;EAypCV,WAAOgL,OAAO,CAACD,MAAR,CAAe/K,KAAf,CAAP;EACD,GA1pCW;;EA4pCZ;;;;;;;;;;;;;;EAcAiL,EAAAA,MA1qCY,kBA0qCJnD,KA1qCI,EA0qCGrG,EA1qCH;EA2qCV,QAAI,CAACqG,KAAD,IAAU,CAACA,KAAK,CAACrF,MAArB,EAA6B;EAC3B;EACD;;EACD,QAAMX,KAAK,GAAG,KAAK+F,SAAL,CAAeC,KAAf,EAAsBrG,EAAtB,CAAd;;EACA,QAAIK,KAAK,IAAI,CAAb,EAAgB;EACdgG,MAAAA,KAAK,CAACvF,MAAN,CAAaT,KAAb,EAAoB,CAApB,EADc;EAEf;EACF,GAlrCW;;EAorCZ;;;;;;;;;;;;;;;EAeAoJ,EAAAA,OAnsCY,mBAmsCHlL,KAnsCG;EAosCV,WAAOgL,OAAO,CAACE,OAAR,CAAgBlL,KAAhB,CAAP;EACD,GArsCW;;EAusCZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuCAmL,EAAAA,GA9uCY,eA8uCP3K,MA9uCO,EA8uCCC,IA9uCD,EA8uCOT,KA9uCP,EA8uCeuB,IA9uCf;EA+uCV,QAAIT,KAAK,CAAC+B,QAAN,CAAepC,IAAf,CAAJ,EAA0B;EACxBK,MAAAA,KAAK,CAACI,MAAN,CAAaT,IAAb,EAAmB,UAACT,KAAD,EAAQoL,KAAR;EACjBtK,QAAAA,KAAK,CAACqK,GAAN,CAAU3K,MAAV,EAAkB4K,KAAlB,EAAyBpL,KAAzB;EACD,OAFD;EAGD,KAJD,MAIO;EACL,UAAMU,KAAK,GAAGb,IAAI,CAACwL,IAAL,CAAU5K,IAAV,CAAd;;EACA,UAAIC,KAAJ,EAAW;EACTH,QAAAA,MAAM,CAACC,MAAD,EAASE,KAAK,CAAC,CAAD,CAAd,CAAN,CAAyBA,KAAK,CAAC,CAAD,CAA9B,IAAqCV,KAArC;EACD,OAFD,MAEO;EACLQ,QAAAA,MAAM,CAACC,IAAD,CAAN,GAAeT,KAAf;EACD;EACF;EACF,GA3vCW;;EA6vCZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCA6F,EAAAA,SAhyCY,qBAgyCDO,CAhyCC,EAgyCEC,CAhyCF;EAiyCV,QAAID,CAAC,KAAKC,CAAV,EAAa;EACX,aAAO,IAAP;EACD;;EACD,QAAIiF,MAAM,GAAG,IAAb;;EACA,QAAIxK,KAAK,CAAC0D,OAAN,CAAc4B,CAAd,KAAoBtF,KAAK,CAAC0D,OAAN,CAAc6B,CAAd,CAAxB,EAA0C;EACxC,UAAID,CAAC,CAAC3D,MAAF,KAAa4D,CAAC,CAAC5D,MAAnB,EAA2B;EACzB,eAAO,KAAP;EACD;;EACD,WAAK,IAAID,CAAC,GAAG4D,CAAC,CAAC3D,MAAf,EAAuBD,CAAC,EAAxB,GAA6B;EAC3B,YAAI,CAAC1B,KAAK,CAAC+E,SAAN,CAAgBO,CAAC,CAAC5D,CAAD,CAAjB,EAAsB6D,CAAC,CAAC7D,CAAD,CAAvB,CAAL,EAAkC;EAChC;EACA,iBAAO,KAAP;EACD;EACF;EACF,KAVD,MAUO,IAAI1B,KAAK,CAAC+B,QAAN,CAAeuD,CAAf,KAAqBtF,KAAK,CAAC+B,QAAN,CAAewD,CAAf,CAAzB,EAA4C;EACjDvF,MAAAA,KAAK,CAACI,MAAN,CAAakF,CAAb,EAAgB,UAACpG,KAAD,EAAQa,GAAR;EACd,YAAI,EAAEyK,MAAM,GAAGxK,KAAK,CAAC+E,SAAN,CAAgB7F,KAAhB,EAAuBqG,CAAC,CAACxF,GAAD,CAAxB,CAAX,CAAJ,EAAgD;EAC9C;EACA,iBAAO,KAAP;EACD;EACF,OALD;;EAMA,UAAIyK,MAAJ,EAAY;EACVxK,QAAAA,KAAK,CAACI,MAAN,CAAamF,CAAb,EAAgB,UAACrG,KAAD,EAAQa,GAAR;EACd,cAAI,EAAEyK,MAAM,GAAGxK,KAAK,CAAC+E,SAAN,CAAgB7F,KAAhB,EAAuBoG,CAAC,CAACvF,GAAD,CAAxB,CAAX,CAAJ,EAAgD;EAC9C;EACA,mBAAO,KAAP;EACD;EACF,SALD;EAMD;EACF,KAfM,MAeA;EACL,aAAO,KAAP;EACD;;EACD,WAAOyK,MAAP;EACD,GAl0CW;;EAo0CZ;;;;;;;;;;;;;;;;EAgBAC,EAAAA,MAAM,EAAE/C,IAAI,CAACgD,SAp1CD;;EAs1CZ;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2BAC,EAAAA,KAj3CY,iBAi3CLjL,MAj3CK,EAi3CGC,IAj3CH;EAk3CV,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;EACA,QAAMiI,IAAI,GAAGlI,KAAK,CAACmI,GAAN,EAAb;;EAEA,WAAQpI,IAAI,GAAGC,KAAK,CAAC0G,KAAN,EAAf,EAA+B;EAC7B;EACA5G,MAAAA,MAAM,GAAGA,MAAM,CAACC,IAAD,CAAf;;EACA,UAAID,MAAM,IAAI,IAAd,EAAoB;EAClB;EACA;EACD;EACF;;EAEDA,IAAAA,MAAM,CAACoI,IAAD,CAAN,GAAezH,SAAf;EACD,GA/3CW;;EAg4CZ;;;;;;;;;;;;EAYAuK,EAAAA,gBA54CY;EA64CV,WAAO,IAAP;EACD;EA94CW,CAAd;EAi5CO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAC5D,MAAD,EAAS6D,KAAT,EAAgB5L,KAAhB;;;EACzB,YAAI+H,gDAAQ8D,IAAZ,EAAkB;EAChB9D,IAAAA,MAAM,CAAC8D,IAAP,iBAAqBD,KAArB,GAA8B5L,KAA9B;EACD,GAFD,MAEO;EACLc,IAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkB6D,KAAlB,EAAyB5L,KAAzB;EACD;EACF,CANM;EAQA,IAAM8L,WAAW,GAAG,SAAdA,WAAc,CAAC/D,MAAD,EAAS6D,KAAT,EAAgB5L,KAAhB;;;EACzB,YAAI+H,gDAAQ8D,IAAZ,EAAkB;EAChB9D,IAAAA,MAAM,CAAC8D,IAAP,iBAAqBD,KAArB,GAA8B5L,KAA9B;EACD,GAFD,MAEO;EACLc,IAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkB6D,KAAlB,EAAyB5L,KAAzB;EACD;EACF,CANM;;ECz9CP;;;;;;;;;;;;;;;;;;;;;MAoBqB+L,WAuCnB;;;EACE,MAAMpB,MAAM,GAAG,EAAf;EAEAjL,EAAAA,MAAM,CAAC6D,gBAAP,CAAwB,IAAxB,EAA8B;EAC5ByI,IAAAA,IAAI,EAAE;EACJhM,MAAAA,KADI,iBACGa,GADH;EAEF,eAAOC,KAAK,CAAC4H,GAAN,CAAUiC,MAAV,EAAkB9J,GAAlB,CAAP;EACD;EAHG,KADsB;EAM5BgL,IAAAA,IAAI,EAAE;EACJ7L,MAAAA,KADI,iBACGa,GADH,EACQb,MADR;EAEF,eAAOc,KAAK,CAACqK,GAAN,CAAUR,MAAV,EAAkB9J,GAAlB,EAAuBb,MAAvB,CAAP;EACD;EAHG,KANsB;EAW5BiM,IAAAA,MAAM,EAAE;EACNjM,MAAAA,KADM,iBACCa,GADD;EAEJ,eAAOC,KAAK,CAAC2K,KAAN,CAAYd,MAAZ,EAAoB9J,GAApB,CAAP;EACD;EAHK;EAXoB,GAA9B;EAiBD;;EC1EH;;;;;;;;;;;;;;;;;;;;;;;;;MAwBqBqL;;;;;EAmJnB;;;UAAa3K,2EAA4B;;;;;;EACvC;EA5HF;;;;;;;;;;;EAUA,oBAAA,GAAa,EAAb;EAmHE,UAAK8I,KAAL,SAAa9I,IAAI,CAAC8I,2CAAS,KAA3B;;EACD;;;IAtJoC0B;EAyJvCjL,KAAK,CAACmJ,MAAN,CAAaiC,SAAS,CAACvM,SAAvB;EAEAmB,KAAK,CAAC+F,QAAN,CACEqF,SAAS,CAACvM,SADZ,EAEE;EACE,SAAO,KAAKwM,UAAZ;EACD,CAJH,EAKE,UAAUnM,KAAV;EACE,OAAKmM,UAAL,GAAkBnM,KAAlB;EACD,CAPH;;ECvLA,IAAMjB,QAAM,GAAG,OAAf;EACA,IAAMqN,SAAS,GAAG,0CAAlB;;EAGA,IAAMC,QAAQ,GAAG;EACfC,EAAAA,KAAK,EAAE,EADQ;EAEfC,EAAAA,MAAM,EAAE,EAFO;EAGfC,EAAAA,OAAO,EAAE,EAHM;EAIfC,EAAAA,IAAI,EAAE,EAJS;EAKfC,EAAAA,IAAI,EAAE,EALS;EAMfC,EAAAA,KAAK,EAAE,EANQ;EAOfC,EAAAA,MAAM,EAAE;EAPO,CAAjB;;EAWA,IAAMC,YAAY,GAAG,2BAArB;EACA,IAAMC,aAAa,GAAG,IAAtB;EACA,IAAMC,gBAAgB,GAAG,IAAzB;;EAEA,SAASC,MAAT,CAAiBC,OAAjB;EACE,SAAOA,OAAO,CAACC,OAAR,CAAgBL,YAAhB,EAA8B,MAA9B,CAAP;EACD;EAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCqBM;;;;;EAUnB,iBAAoBC,UAApB;;;;;EACE;EADkB,oBAAA,GAAAA,UAAA;EATpB;;;;;;;;EAOQ,cAAA,GAAO,IAAP;;EAIP;;;;4CAEsBT;EACrB,UAAMU,MAAM,GAAG,EAAf;EACA,UAAMC,GAAG,GAAG,EAAZ;EACA,UAAMC,UAAU,GAAG,EAAnB;EACAzM,MAAAA,KAAK,CAACI,MAAN,CAAayL,KAAb,EAAoB,UAACa,MAAD,EAAS5B,KAAT;EAClB,YAAI,CAAC9K,KAAK,CAAC+B,QAAN,CAAe2K,MAAf,CAAL,EAA6B;EAC3BA,UAAAA,MAAM,GAAG;EACP,kBAAMA;EADC,WAAT;EAGD;;EACD1M,QAAAA,KAAK,CAACI,MAAN,CAAasM,MAAb,EAAqB,UAACC,IAAD,EAAOC,EAAP;EACnBL,UAAAA,MAAM,CAACjI,IAAP,CAAYwG,KAAZ;EACA0B,UAAAA,GAAG,CAAClI,IAAJ,CAASsI,EAAT;EACAH,UAAAA,UAAU,CAACnI,IAAX,CAAgBqI,IAAhB;EACD,SAJD;EAKD,OAXD;EAYA,aAAO;EACLJ,QAAAA,MAAM,EAANA,MADK;EAELC,QAAAA,GAAG,EAAHA,GAFK;EAGLC,QAAAA,UAAU,EAAVA;EAHK,OAAP;EAKD;;;2CAEqBZ;;;EACpB,UAAMgB,MAAM,GAAQ,EAApB;EACAhB,MAAAA,KAAK,CAAC/L,OAAN,CAAc,UAACgN,MAAD,EAASpL,CAAT;EACZ,YAAI1B,KAAK,CAACyH,QAAN,CAAeqF,MAAf,CAAJ,EAA4B;EAC1B;EACD;;EACD,YAAMC,IAAI,GAAGlB,KAAK,CAACnK,CAAC,GAAG,CAAL,CAAlB;EACA,YAAMsL,MAAM,GAAGhN,KAAK,CAAC0D,OAAN,CAAcoJ,MAAd,IAAwB,MAAI,CAACG,oBAA7B,GAAoD,MAAI,CAACC,qBAAxE;EACA,YAAMC,KAAK,GAAGH,MAAM,CAAC1N,IAAP,CAAY,MAAZ,EAAkBwN,MAAlB,CAAd;;EACA,YAAIC,IAAI,KAAK,IAAb,EAAmB;EACjBI,UAAAA,KAAK,CAACC,IAAN,GAAa,IAAb;EACD;;EACDP,QAAAA,MAAM,CAACvI,IAAP,CAAY6I,KAAZ;EACD,OAXD;EAYAN,MAAAA,MAAM,CAACnJ,OAAP,GAAiB,IAAjB;EACA,aAAOmJ,MAAP;EACD;;;uCAEiBQ,MAAMC,OAAOH,OAAOzE;EACpC,UAAIhH,CAAJ;EACA,UAAM6K,MAAM,GAAGY,KAAK,CAACZ,MAArB;EACA,UAAMC,GAAG,GAAGW,KAAK,CAACX,GAAlB;EACA,UAAMC,UAAU,GAAGU,KAAK,CAACV,UAAzB;EACA,UAAMnF,GAAG,GAAGkF,GAAG,CAAC7K,MAAhB;;EACA,WAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4F,GAAhB,EAAqB5F,CAAC,EAAtB,EAA0B;EACxB,YAAIkL,EAAE,GAAGJ,GAAG,CAAC9K,CAAD,CAAZ;EACA,YAAM0L,IAAI,GAAGR,EAAE,CAACW,MAAH,CAAU,CAAV,MAAiB,GAA9B;EACAX,QAAAA,EAAE,GAAGQ,IAAI,GAAGR,EAAE,CAAChL,MAAH,CAAU,CAAV,CAAH,GAAkBgL,EAA3B;EACA,YAAMD,IAAI,GAAG,KAAKa,QAAL,CAAcxN,KAAK,CAAC4H,GAAN,CAAUc,IAAV,EAAgB6D,MAAM,CAAC7K,CAAD,CAAtB,CAAd,EAA0CkL,EAA1C,EAA8CH,UAAU,CAAC/K,CAAD,CAAxD,CAAb;;EACA,YAAIiL,IAAI,KAAKtM,SAAb,EAAwB;EACtBgN,UAAAA,IAAI,GAAGC,KAAK,GAAGX,IAAH,GAAUS,IAAI,GAAGC,IAAI,IAAIV,IAAX,GAAkBU,IAAI,IAAIV,IAApD;EACD;;EACDW,QAAAA,KAAK,GAAG,KAAR;EACD;;EACD,aAAO;EAAED,QAAAA,IAAI,EAAJA,IAAF;EAAQC,QAAAA,KAAK,EAALA;EAAR,OAAP;EACD;;;sCAEgBD,MAAMC,OAAOT,QAAQnE;EACpC,UAAIhH,CAAJ;EACA,UAAM4F,GAAG,GAAGuF,MAAM,CAAClL,MAAnB;;EACA,WAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG4F,GAAhB,EAAqB5F,CAAC,EAAtB,EAA0B;EACxB,YAAMyL,KAAK,GAAGN,MAAM,CAACnL,CAAD,CAApB;EACA,YAAMsL,MAAM,GAAGG,KAAK,CAACzJ,OAAN,GAAgB,KAAK+J,eAArB,GAAuC,KAAKC,gBAA3D;EACA,YAAMnJ,MAAM,GAAGyI,MAAM,CAAC1N,IAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,EAA8B6N,KAA9B,EAAqCzE,IAArC,CAAf;;EACA,YAAImE,MAAM,CAACnL,CAAC,GAAG,CAAL,CAAV,EAAmB;EACjB,cAAIyL,KAAK,CAACC,IAAV,EAAgB;EACdC,YAAAA,IAAI,GAAGA,IAAI,IAAI9I,MAAM,CAAC8I,IAAtB;EACD,WAFD,MAEO;EACLA,YAAAA,IAAI,GAAGA,IAAI,IAAI9I,MAAM,CAAC8I,IAAtB;EACD;EACF,SAND,MAMO;EACLA,UAAAA,IAAI,GAAG9I,MAAM,CAAC8I,IAAd;EACD;;EACDC,QAAAA,KAAK,GAAG/I,MAAM,CAAC+I,KAAf;EACD;;EACD,aAAO;EAAED,QAAAA,IAAI,EAAJA,IAAF;EAAQC,QAAAA,KAAK,EAALA;EAAR,OAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA4DSK,UAAWC;YAAYnN,2EAAY;;EAC1C,UAAI,KAAKoN,IAAT,EAAe;EACb,cAAM7N,KAAK,CAACqE,GAAN,WAAapG,QAAb,eAA+B,GAA/B,EAAoC,qBAApC,CAAN;EACD;;EACD,WAAK4P,IAAL,GAAY,KAAKvB,UAAL,CAAgBwB,QAAhB,CAAyBrN,IAAI,CAACO,KAA9B,EAAqC+M,OAArC,CAA6CJ,QAA7C,EAAuDC,SAAvD,EAAkEnN,IAAlE,CAAZ;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;8BAYSiL,SAAS1K,OAAOsE,GAAGC,GAAGyI;EAC7B,UAAMtN,GAAG,GAAGgL,OAAO,CAAC1K,KAAD,CAAnB;EACA,UAAIiN,EAAE,GAAGjO,KAAK,CAAC4H,GAAN,CAAUtC,CAAV,EAAa5E,GAAG,CAAC,CAAD,CAAhB,CAAT;EACA,UAAIwN,EAAE,GAAGlO,KAAK,CAAC4H,GAAN,CAAUrC,CAAV,EAAa7E,GAAG,CAAC,CAAD,CAAhB,CAAT;;EACA,UAAIuN,EAAE,IAAIjO,KAAK,CAACyH,QAAN,CAAewG,EAAf,CAAV,EAA8B;EAC5BA,QAAAA,EAAE,GAAGA,EAAE,CAACzE,WAAH,EAAL;EACD;;EACD,UAAI0E,EAAE,IAAIlO,KAAK,CAACyH,QAAN,CAAeyG,EAAf,CAAV,EAA8B;EAC5BA,QAAAA,EAAE,GAAGA,EAAE,CAAC1E,WAAH,EAAL;EACD;;EACD,UAAIlE,CAAC,KAAKjF,SAAV,EAAqB;EACnBiF,QAAAA,CAAC,GAAG,IAAJ;EACD;;EACD,UAAIC,CAAC,KAAKlF,SAAV,EAAqB;EACnBkF,QAAAA,CAAC,GAAG,IAAJ;EACD;;EACD,UAAI7E,GAAG,CAAC,CAAD,CAAH,CAAO8I,WAAP,OAAyB,MAA7B,EAAqC;EACnC,YAAM2E,IAAI,GAAGD,EAAb;EACAA,QAAAA,EAAE,GAAGD,EAAL;EACAA,QAAAA,EAAE,GAAGE,IAAL;EACD;EACD;EACA;EACA;EACA;EACA;;;EACA,UAAMC,CAAC,GAAGJ,QAAO,CAACC,EAAD,EAAKC,EAAL,CAAjB;;EACA,UAAIE,CAAC,KAAK,CAAC,CAAP,IAAYA,CAAC,KAAK,CAAtB,EAAyB;EACvB,eAAOA,CAAP;EACD,OAFD,MAEO;EACL,YAAIpN,KAAK,GAAG0K,OAAO,CAAC/J,MAAR,GAAiB,CAA7B,EAAgC;EAC9B,iBAAO,KAAKqM,OAAL,CAAatC,OAAb,EAAsB1K,KAAK,GAAG,CAA9B,EAAiCsE,CAAjC,EAAoCC,CAApC,EAAuCyI,QAAvC,CAAP;EACD,SAFD,MAEO;EACL,iBAAO,CAAP;EACD;EACF;EACF;EAED;;;;;;;;;;;;;+BAUU9O,OAAO0N,IAAIyB;EACnB,UAAM7B,GAAG,GAAGH,KAAK,CAACG,GAAlB;;EACA,UAAIA,GAAG,CAACI,EAAD,CAAP,EAAa;EACX,eAAOJ,GAAG,CAACI,EAAD,CAAH,CAAQ1N,KAAR,EAAemP,SAAf,CAAP;EACD;;EACD,UAAIzB,EAAE,CAACrM,OAAH,CAAW,MAAX,MAAuB,CAA3B,EAA8B;EAC5B,eAAO,KAAK+N,IAAL,CAAUD,SAAV,EAAqBzB,EAAE,CAAChL,MAAH,CAAU,CAAV,CAArB,EAAmC2I,IAAnC,CAAwCrL,KAAxC,MAAmD,IAA1D;EACD,OAFD,MAEO,IAAI0N,EAAE,CAACrM,OAAH,CAAW,SAAX,MAA0B,CAA9B,EAAiC;EACtC,eAAO,KAAK+N,IAAL,CAAUD,SAAV,EAAqBzB,EAAE,CAAChL,MAAH,CAAU,CAAV,CAArB,EAAmC2I,IAAnC,CAAwCrL,KAAxC,MAAmD,IAA1D;EACD;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsDQqP,4EAAyB;YAAI3N;;EACnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwFA,WAAK4N,OAAL;;EACA,UAAIxO,KAAK,CAAC+B,QAAN,CAAewM,KAAf,CAAJ,EAA2B;EACzB,YAAI1C,KAAK,GAAG,EAAZ;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCA,YAAI7L,KAAK,CAAC+B,QAAN,CAAewM,KAAK,CAAC1C,KAArB,KAA+B7L,KAAK,CAAC0D,OAAN,CAAc6K,KAAK,CAAC1C,KAApB,CAAnC,EAA+D;EAC7DA,UAAAA,KAAK,GAAG0C,KAAK,CAAC1C,KAAd;EACD;;EACD7L,QAAAA,KAAK,CAACI,MAAN,CAAamO,KAAb,EAAoB,UAACrP,KAAD,EAAQa,GAAR;EAClB,cAAI,EAAEA,GAAG,IAAIwL,QAAT,KAAsB,EAAExL,GAAG,IAAI8L,KAAT,CAA1B,EAA2C;EACzCA,YAAAA,KAAK,CAAC9L,GAAD,CAAL,GAAa;EACX,oBAAMb;EADK,aAAb;EAGD;EACF,SAND;EAOA,YAAI2N,MAAJ,CA9CyB;;EAiDzB,YAAI7M,KAAK,CAAC+B,QAAN,CAAe8J,KAAf,KAAyBjN,MAAM,CAACwD,IAAP,CAAYyJ,KAAZ,EAAmBlK,MAAnB,KAA8B,CAA3D,EAA8D;EAC5DkL,UAAAA,MAAM,GAAG,KAAKI,oBAAL,CAA0B,CAACpB,KAAD,CAA1B,CAAT;EACD,SAFD,MAEO,IAAI7L,KAAK,CAAC0D,OAAN,CAAcmI,KAAd,CAAJ,EAA0B;EAC/BgB,UAAAA,MAAM,GAAG,KAAKI,oBAAL,CAA0BpB,KAA1B,CAAT;EACD;;EAED,YAAIgB,MAAJ,EAAY;EACV,eAAKgB,IAAL,GAAY,KAAKA,IAAL,CAAU5I,MAAV,CAAiB,UAAAyD,IAAI;EAAA,mBAAI,MAAI,CAAC+E,eAAL,CAAqB,IAArB,EAA2B,IAA3B,EAAiCZ,MAAjC,EAAyCnE,IAAzC,EAA+C2E,IAAnD;EAAA,WAArB,CAAZ;EACD,SAzDwB;;;EA4DzB,YAAI3B,OAAO,GAAG6C,KAAK,CAAC7C,OAAN,IAAiB6C,KAAK,CAAC3C,IAArC;;EAEA,YAAI5L,KAAK,CAACyH,QAAN,CAAeiE,OAAf,CAAJ,EAA6B;EAC3BA,UAAAA,OAAO,GAAG,CAAC,CAACA,OAAD,EAAU,KAAV,CAAD,CAAV;EACD;;EACD,YAAI,CAAC1L,KAAK,CAAC0D,OAAN,CAAcgI,OAAd,CAAL,EAA6B;EAC3BA,UAAAA,OAAO,GAAG,IAAV;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BA,YAAIA,OAAJ,EAAa;EACX,cAAM1K,KAAK,GAAG,CAAd;EACA0K,UAAAA,OAAO,CAAC5L,OAAR,CAAgB,UAACY,GAAD,EAAMgB,CAAN;EACd,gBAAI1B,KAAK,CAACyH,QAAN,CAAe/G,GAAf,CAAJ,EAAyB;EACvBgL,cAAAA,OAAO,CAAChK,CAAD,CAAP,GAAa,CAAChB,GAAD,EAAM,KAAN,CAAb;EACD;EACF,WAJD;EAKA,cAAIoL,MAAM,GAAW9L,KAAK,CAAC4K,gBAAN,EAArB;;EACA,cAAI5K,KAAK,CAACyH,QAAN,CAAe8G,KAAK,CAACzC,MAArB,CAAJ,EAAkC;EAChCA,YAAAA,MAAM,GAAGyC,KAAK,CAACzC,MAAf;EACD;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BA,cAAM2C,QAAQ,GAAG,IAAIC,IAAI,CAACC,QAAT,CAAkB7C,MAAlB,EAA0B;EACzC8C,YAAAA,OAAO,EAAE;EADgC,WAA1B,CAAjB;EAIA,eAAKf,IAAL,CAAUjC,IAAV,CAAe,UAACtG,CAAD,EAAIC,CAAJ;EAAA,mBAAU,MAAI,CAACyI,OAAL,CAAatC,OAAb,EAAsB1K,KAAtB,EAA6BsE,CAA7B,EAAgCC,CAAhC,EAAmCkJ,QAAQ,CAACT,OAA5C,CAAV;EAAA,WAAf;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmDA,YAAIhO,KAAK,CAACgJ,QAAN,CAAeuF,KAAK,CAAC5C,IAArB,CAAJ,EAAgC;EAC9B,eAAKA,IAAL,CAAU4C,KAAK,CAAC5C,IAAhB;EACD,SAFD,MAEO,IAAI3L,KAAK,CAACgJ,QAAN,CAAeuF,KAAK,CAAC9C,MAArB,CAAJ,EAAkC;EACvC,eAAKE,IAAL,CAAU4C,KAAK,CAAC9C,MAAhB;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoDA,YAAIzL,KAAK,CAACgJ,QAAN,CAAeuF,KAAK,CAAC/C,KAArB,CAAJ,EAAiC;EAC/B,eAAKA,KAAL,CAAW+C,KAAK,CAAC/C,KAAjB;EACD;EACF,OA/PD,MA+PO,IAAIxL,KAAK,CAACM,UAAN,CAAiBiO,KAAjB,CAAJ,EAA6B;EAClC,aAAKV,IAAL,GAAY,KAAKA,IAAL,CAAU5I,MAAV,CAAiBsJ,KAAjB,EAAwB3N,OAAxB,CAAZ;EACD;;EACD,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;8BASSiO,WAAqBjO;EAC5B,WAAK4N,OAAL,GAAe1O,OAAf,CAAuB+O,SAAvB,EAAkCjO,OAAlC;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA6BKkO,8EAAU;YAAIrO,2EAAY;;EAC7B,UAAI,KAAKoN,IAAT,EAAe;EACb,cAAM7N,KAAK,CAACqE,GAAN,WAAapG,QAAb,WAA2B,GAA3B,EAAgCqN,SAAhC,CAAN;EACD;;EACD,UAAIwD,OAAO,IAAI,CAAC9O,KAAK,CAAC0D,OAAN,CAAcoL,OAAd,CAAhB,EAAwC;EACtCA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EACD,UAAI,CAACA,OAAO,CAACnN,MAAb,EAAqB;EACnB,aAAK6M,OAAL;EACA,eAAO,IAAP;EACD;;EACD,WAAKX,IAAL,GAAY,KAAKvB,UAAL,CAAgBwB,QAAhB,CAAyBrN,IAAI,CAACO,KAA9B,EAAqC4G,GAArC,CAAyCkH,OAAzC,CAAZ;EACA,aAAO,IAAP;EACD;;;;;;EAuBC,UAAIrO,IAAI,GAAQ,EAAhB;;EACA,UAAI,KAAKoN,IAAT,EAAe;EACb,cAAM7N,KAAK,CAACqE,GAAN,WAAapG,QAAb,cAA8B,GAA9B,EAAmCqN,SAAnC,CAAN;EACD;;0CAJQ3F;EAAAA,QAAAA;;;EAKT,UAAI,CAACA,IAAI,CAAChE,MAAN,IAAiBgE,IAAI,CAAChE,MAAL,KAAgB,CAAhB,IAAqB3B,KAAK,CAAC+B,QAAN,CAAe4D,IAAI,CAAC,CAAD,CAAnB,CAA1C,EAAoE;EAClE,aAAK6I,OAAL;EACA,eAAO,IAAP;EACD,OAHD,MAGO,IAAI7I,IAAI,CAAChE,MAAL,IAAe3B,KAAK,CAAC+B,QAAN,CAAe4D,IAAI,CAACA,IAAI,CAAChE,MAAL,GAAc,CAAf,CAAnB,CAAnB,EAA0D;EAC/DlB,QAAAA,IAAI,GAAGkF,IAAI,CAACA,IAAI,CAAChE,MAAL,GAAc,CAAf,CAAX;EACAgE,QAAAA,IAAI,CAACoC,GAAL;EACD;;EACD,UAAM/G,KAAK,GAAG,KAAKsL,UAAL,CAAgBwB,QAAhB,CAAyBrN,IAAI,CAACO,KAA9B,CAAd;EACA,WAAK6M,IAAL,GAAY,EAAZ;EACAlI,MAAAA,IAAI,CAAC7F,OAAL,CAAa,UAAAgP,OAAO;EAClB,QAAA,MAAI,CAACjB,IAAL,GAAY,MAAI,CAACA,IAAL,CAAUkB,MAAV,CAAiB/N,KAAK,CAAC4G,GAAN,CAAUkH,OAAV,CAAjB,CAAZ;EACD,OAFD;EAGA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;EAQE,UAAI,CAAC,KAAKjB,IAAV,EAAgB;EACd,aAAKA,IAAL,GAAY,KAAKvB,UAAL,CAAgBtL,KAAhB,CAAsBgO,MAAtB,EAAZ;EACD;;EACD,aAAO,KAAKnB,IAAZ;EACD;EAED;;;;;;;;;;;;;2BAUM1B,SAAS8C;EACb,aAAO,IAAIlL,MAAJ,YACDmI,MAAM,CAACC,OAAD,CAAN,CACDC,OADC,CACOJ,aADP,EACsB,IADtB,EAEDI,OAFC,CAEOH,gBAFP,EAEyB,GAFzB,CADC,QAILgD,KAJK,CAAP;EAMD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;4BAsBOC;EACL,UAAI,CAAClP,KAAK,CAACgJ,QAAN,CAAekG,GAAf,CAAL,EAA0B;EACxB,cAAMlP,KAAK,CAACqE,GAAN,WAAapG,QAAb,aAA6B,KAA7B,EAAoC,GAApC,EAAyC,QAAzC,EAAmDiR,GAAnD,CAAN;EACD;;EACD,UAAMrB,IAAI,GAAG,KAAKW,OAAL,EAAb;EACA,WAAKX,IAAL,GAAYA,IAAI,CAACtM,KAAL,CAAW,CAAX,EAAc4N,IAAI,CAACC,GAAL,CAASvB,IAAI,CAAClM,MAAd,EAAsBuN,GAAtB,CAAd,CAAZ;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAgCKG,OAAOzO;EACV,WAAKiN,IAAL,GAAY,KAAKW,OAAL,GAAerM,GAAf,CAAmBkN,KAAnB,EAA0BzO,OAA1B,CAAZ;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;;8BAaS0O;2CAAa3J;EAAAA,QAAAA;;;EACpB,WAAKkI,IAAL,GAAY,KAAKW,OAAL,GAAerM,GAAf,CAAmB,UAAAuG,IAAI;EAAA,eAAIA,IAAI,CAAC4G,QAAD,CAAJ,OAAA5G,IAAI,EAAc/C,IAAd,CAAR;EAAA,OAAvB,CAAZ;EACA,aAAO,IAAP;EACD;EAED;;;;;;;;;;;EAQE,UAAMkI,IAAI,GAAG,KAAKA,IAAlB;EACA,WAAKA,IAAL,GAAY,IAAZ;EACA,aAAOA,IAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BA0BMqB;EACJ,UAAI,CAAClP,KAAK,CAACgJ,QAAN,CAAekG,GAAf,CAAL,EAA0B;EACxB,cAAMlP,KAAK,CAACqE,GAAN,WAAapG,QAAb,YAA4B,KAA5B,EAAmC,GAAnC,EAAwC,QAAxC,EAAkDiR,GAAlD,CAAN;EACD;;EACD,UAAMrB,IAAI,GAAG,KAAKW,OAAL,EAAb;;EACA,UAAIU,GAAG,GAAGrB,IAAI,CAAClM,MAAf,EAAuB;EACrB,aAAKkM,IAAL,GAAYA,IAAI,CAACtM,KAAL,CAAW2N,GAAX,CAAZ;EACD,OAFD,MAEO;EACL,aAAKrB,IAAL,GAAY,EAAZ;EACD;;EACD,aAAO,IAAP;EACD;;;;IA34BgCzC;AA64BjC,EAwJOiB,SAAA,GAAM;EACX,KADW,aACNnN,KADM,EACCmP,SADD;EAET;EACA,WAAOnP,KAAK,IAAImP,SAAhB;EACD,GAJU;EAKX,MALW,aAKLnP,KALK,EAKEmP,SALF;EAMT;EACA,WAAOnP,KAAK,IAAImP,SAAhB;EACD,GARU;EASX,OATW,aASJnP,KATI,EASGmP,SATH;EAUT,WAAOnP,KAAK,KAAKmP,SAAjB;EACD,GAXU;EAYX,MAZW,aAYLnP,KAZK,EAYEmP,SAZF;EAaT;EACA,WAAOnP,KAAK,IAAImP,SAAhB;EACD,GAfU;EAgBX,OAhBW,aAgBJnP,KAhBI,EAgBGmP,SAhBH;EAiBT,WAAOnP,KAAK,KAAKmP,SAAjB;EACD,GAlBU;EAmBX,KAnBW,aAmBNnP,KAnBM,EAmBCmP,SAnBD;EAoBT,WAAOnP,KAAK,GAAGmP,SAAf;EACD,GArBU;EAsBX,MAtBW,aAsBLnP,KAtBK,EAsBEmP,SAtBF;EAuBT,WAAOnP,KAAK,IAAImP,SAAhB;EACD,GAxBU;EAyBX,KAzBW,aAyBNnP,KAzBM,EAyBCmP,SAzBD;EA0BT,WAAOnP,KAAK,GAAGmP,SAAf;EACD,GA3BU;EA4BX,MA5BW,aA4BLnP,KA5BK,EA4BEmP,SA5BF;EA6BT,WAAOnP,KAAK,IAAImP,SAAhB;EACD,GA9BU;EA+BXkB,EAAAA,UA/BW,sBA+BCrQ,KA/BD,EA+BQmP,SA/BR;EAgCT,WAAO,CAACrO,KAAK,CAACsI,YAAN,CAAmBpJ,KAAK,IAAI,EAA5B,EAAgCmP,SAAS,IAAI,EAA7C,EAAiD1M,MAAzD;EACD,GAjCU;EAkCX6N,EAAAA,aAlCW,yBAkCItQ,KAlCJ,EAkCWmP,SAlCX;EAmCT,WAAOrO,KAAK,CAACsI,YAAN,CAAmBpJ,KAAK,IAAI,EAA5B,EAAgCmP,SAAS,IAAI,EAA7C,EAAiD1M,MAAxD;EACD,GApCU;EAAA,qBAqCPzC,KArCO,EAqCAmP,SArCA;EAsCT,WAAOA,SAAS,CAAC9N,OAAV,CAAkBrB,KAAlB,MAA6B,CAAC,CAArC;EACD,GAvCU;EAwCXuQ,EAAAA,KAxCW,iBAwCJvQ,KAxCI,EAwCGmP,SAxCH;EAyCT,WAAOA,SAAS,CAAC9N,OAAV,CAAkBrB,KAAlB,MAA6B,CAAC,CAArC;EACD,GA1CU;EA2CXwQ,EAAAA,QA3CW,oBA2CDxQ,KA3CC,EA2CMmP,SA3CN;EA4CT,WAAO,CAACnP,KAAK,IAAI,EAAV,EAAcqB,OAAd,CAAsB8N,SAAtB,MAAqC,CAAC,CAA7C;EACD,GA7CU;EA8CXsB,EAAAA,WA9CW,uBA8CEzQ,KA9CF,EA8CSmP,SA9CT;EA+CT,WAAO,CAACnP,KAAK,IAAI,EAAV,EAAcqB,OAAd,CAAsB8N,SAAtB,MAAqC,CAAC,CAA7C;EACD;EAhDU,CAAN;;MCvmCIuB,aAAa,GAAG,WAAtB;AACP,MAAaC,WAAW,GAAG,SAApB;AACP,MAAaC,UAAU,GAAG,QAAnB;EAEP,IAAM7R,QAAM,GAAG,UAAf;AAMA,MAAsB8R,QAAtB;EAAA;EAAA;EAYE,oBAAaC,aAAb;UAA4BC,8EAAwB;;;;EAX1C,kBAAA,GAAYhS,QAAZ;EAYRgS,IAAAA,OAAO,CAAC5J,IAAR,GAAgB,KAAK7G,WAAL,CAAyB0Q,SAAzC;EACA,SAAKC,eAAL,CAAqBH,aAArB,EAAoCC,OAApC;;EAEA,QAAI,QAAOD,aAAP,MAAyB,QAA7B,EAAuC;EACrC,WAAKA,aAAL,GAAqBA,aAArB;EACD;;EAEDhQ,IAAAA,KAAK,CAACqB,MAAN,CAAa,IAAb,EAAmB4O,OAAnB;EACD;;EArBH;EAAA;EAAA,oCA+BmBG,OA/BnB,EA+B4B3P,IA/B5B;EAgCI,UAAM4P,UAAU,iBAAUpS,QAAV,CAAhB;EAEA,UAAMiD,UAAU,GAAGT,IAAI,CAACS,UAAxB;;EACA,UAAI,CAACA,UAAL,EAAiB;EACf,cAAMlB,KAAK,CAACqE,GAAN,CAAUgM,UAAV,EAAsB,iBAAtB,EAAyC,GAAzC,EAA8C,QAA9C,EAAwDnP,UAAxD,CAAN;EACD;;EAED,UAAMoP,UAAU,GAAI7P,IAAI,CAAC6P,UAAL,GAAkB7P,IAAI,CAAC6P,UAAL,IAAmB7P,IAAI,CAAC8P,QAA9D;;EACA,UAAI,CAACD,UAAD,KAAgB7P,IAAI,CAAC4F,IAAL,KAAcuJ,aAAd,IAA+BnP,IAAI,CAAC4F,IAAL,KAAcyJ,UAA7D,CAAJ,EAA8E;EAC5E,cAAM9P,KAAK,CAACqE,GAAN,CAAUgM,UAAV,EAAsB,iBAAtB,EAAyC,GAAzC,EAA8C,QAA9C,EAAwDC,UAAxD,CAAN;EACD;;EAED,UAAItQ,KAAK,CAACyH,QAAN,CAAe2I,OAAf,CAAJ,EAA6B;EAC3B3P,QAAAA,IAAI,CAACK,QAAL,GAAgBsP,OAAhB;;EACA,YAAI,CAACpQ,KAAK,CAACM,UAAN,CAAiBG,IAAI,CAACa,WAAtB,CAAL,EAAyC;EACvC,gBAAMtB,KAAK,CAACqE,GAAN,CAAUgM,UAAV,EAAsB,kBAAtB,EAA0C,GAA1C,EAA+C,UAA/C,EAA2D5P,IAAI,CAACa,WAAhE,CAAN;EACD;EACF,OALD,MAKO,IAAI8O,OAAJ,EAAa;EAClB3P,QAAAA,IAAI,CAACK,QAAL,GAAgBsP,OAAO,CAAC3G,IAAxB;EACD,OAFM,MAEA;EACL,cAAMzJ,KAAK,CAACqE,GAAN,CAAUgM,UAAV,EAAsB,SAAtB,EAAiC,GAAjC,EAAsC,kBAAtC,EAA0DD,OAA1D,CAAN;EACD;EACF;EAtDH;EAAA;EAAA,6BAwDYjJ,MAxDZ;EAyDI,WAAKsC,IAAL,GAAYtC,MAAM,CAACsC,IAAnB;EACA7K,MAAAA,MAAM,CAAC4R,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;EAAEtR,QAAAA,KAAK,EAAEiI;EAAT,OAAtC;EAEA,UAAI,CAACA,MAAM,CAACC,YAAZ,EAA0BxI,MAAM,CAAC4R,cAAP,CAAsBrJ,MAAtB,EAA8B,cAA9B,EAA8C;EAAEjI,QAAAA,KAAK,EAAE;EAAT,OAA9C;EAC1B,UAAI,CAACiI,MAAM,CAACsJ,cAAZ,EAA4B7R,MAAM,CAAC4R,cAAP,CAAsBrJ,MAAtB,EAA8B,gBAA9B,EAAgD;EAAEjI,QAAAA,KAAK,EAAE;EAAT,OAAhD;EAC5BiI,MAAAA,MAAM,CAACC,YAAP,CAAoB9C,IAApB,CAAyB,IAAzB;EACA6C,MAAAA,MAAM,CAACsJ,cAAP,CAAsBnM,IAAtB,CAA2B,KAAKpD,UAAhC;EACD;EAhEH;EAAA;EAAA,mCAkEkB+F,MAlElB;EAmEI,aAAO,CAAC,EAAE,KAAKqJ,UAAL,IAAmB,KAAKC,QAA1B,CAAR;EACD;EApEH;EAAA;EAAA;EAuEI,aAAO,KAAKP,aAAZ;EACD;EAxEH;EAAA;EAAA,kCA0EiB/I,MA1EjB;EA2EI,aAAOjH,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKE,MAAL,CAAYuJ,WAA9B,CAAP;EACD;EA5EH;EAAA;EAAA,kCA8EiBzJ,MA9EjB,EA8EyB0J,aA9EzB;EA+EI,UAAI,CAAC1J,MAAD,IAAW,CAAC0J,aAAhB,EAA+B;EAC7B;EACD;;EAED,WAAKC,cAAL,CAAoB3J,MAApB,EAA4B0J,aAA5B;EACD;EApFH;EAAA;EAAA,mCAsFkB1J,MAtFlB,EAsF0B4J,cAtF1B;;;EAuFI,UAAMH,WAAW,GAAG,KAAKvJ,MAAL,CAAYuJ,WAAhC;;EAEA,UAAI,CAAC1Q,KAAK,CAAC0D,OAAN,CAAcmN,cAAd,CAAL,EAAoC;EAClCA,QAAAA,cAAc,GAAG,CAACA,cAAD,CAAjB;EACD;;EAEDA,MAAAA,cAAc,CAAC/Q,OAAf,CAAuB,UAAA6Q,aAAa;EAClC3Q,QAAAA,KAAK,CAACqK,GAAN,CAAUsG,aAAV,EAAyB,KAAI,CAACL,UAA9B,EAA0CtQ,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkByJ,WAAlB,CAA1C;EACD,OAFD;EAGD;EAhGH;EAAA;EAAA,kCAkGiBzJ,MAlGjB;EAmGI,aAAOjH,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAK/F,UAAvB,CAAP;EACD;EApGH;EAAA;EAAA,kCAsGiB+F,MAtGjB,EAsGyB6J,WAtGzB;EAuGI,aAAO9Q,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkB,KAAK/F,UAAvB,EAAmC4P,WAAnC,CAAP;EACD;EAxGH;EAAA;EAAA,+BA0Gc3J,MA1Gd;EA2GI,UAAI,CAAC,KAAK4J,OAAV,EAAmB;EACjB,aAAKC,mBAAL,CAAyB7J,MAAzB;EACD;;EAED,aAAO,KAAK4J,OAAZ;EACD;EAhHH;EAAA;EAAA,wCAkHuB5J,MAlHvB;;;EAmHI,WAAK7F,WAAL,GAAmB8F,YAAnB,CAAgCtH,OAAhC,CAAwC,UAAAY,GAAG;EACzC,YAAIA,GAAG,CAACY,WAAJ,OAAsB6F,MAAtB,IAAgC,MAAI,CAAC8J,YAAL,CAAkBvQ,GAAlB,CAAhC,IAA0D,MAAI,KAAKA,GAAvE,EAA4E;EAC1E,UAAA,MAAI,CAACqQ,OAAL,GAAerQ,GAAf;EACA,iBAAO,IAAP;EACD;EACF,OALD;EAMD;EAzHH;EAAA;EAAA,iCA2HgBA,GA3HhB;EA4HI,aAAO,CAACA,GAAG,CAAC4P,UAAL,IAAmB5P,GAAG,CAAC4P,UAAJ,KAAmB,KAAKA,UAAlD;EACD;EA7HH;EAAA;EAAA,qCA+HoBY,OA/HpB;;;EAgII,UAAMC,SAAS,GAAG,KAAKhK,MAAL,CAAYgK,SAA9B;EAEAD,MAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EACpB,YAAI6J,WAAW,GAAG,MAAI,CAACM,aAAL,CAAmBnK,MAAnB,CAAlB;;EAEA,YAAIjH,KAAK,CAACM,UAAN,CAAiB,MAAI,CAAC+Q,GAAtB,CAAJ,EAAgC;EAC9BP,UAAAA,WAAW,GAAG,MAAI,CAACO,GAAL,CAASF,SAAT,EAAoB,MAApB,EAA0BlK,MAA1B,CAAd;EACD,SAFD,MAEO,IAAI6J,WAAJ,EAAiB;EACtBA,UAAAA,WAAW,GAAG,MAAI,CAACQ,UAAL,CAAgBrK,MAAhB,EAAwB6J,WAAxB,CAAd;EACD;;EAED,YAAMS,YAAY,GAAG,CAACT,WAAD,IAAiB9Q,KAAK,CAAC0D,OAAN,CAAcoN,WAAd,KAA8B,CAACA,WAAW,CAACnP,MAAjF;;EAEA,YAAI4P,YAAY,IAAI,MAAI,CAACC,cAAL,CAAoBvK,MAApB,CAApB,EAAiD;EAC/C6J,UAAAA,WAAW,GAAG,MAAI,CAACW,oBAAL,CAA0BxK,MAA1B,CAAd;EACD;;EAED,YAAI6J,WAAJ,EAAiB;EACf,UAAA,MAAI,CAACY,aAAL,CAAmBzK,MAAnB,EAA2B6J,WAA3B;EACD;EACF,OAlBD;EAmBD;EArJH;EAAA;EAAA,wCAuJuBd,aAvJvB,EAuJsCkB,OAvJtC;EAwJI,UAAMhQ,UAAU,GAAG,KAAKA,UAAxB;EACAgQ,MAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EACpBjH,QAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkB/F,UAAlB,EAA8Bb,SAA9B;EACD,OAFD;EAGD;EA5JH;EAAA;EAAA,+BA8Jc4G,MA9Jd,EA8JsB0J,aA9JtB;EA+JI,UAAMgB,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAU+I,aAAV,EAAyB,KAAKxJ,MAAL,CAAYuJ,WAArC,CAAlB;;EAEA,UAAIiB,SAAS,KAAKtR,SAAlB,EAA6B;EAC3B,YAAMuR,OAAO,GAAG,KAAKC,iBAAL,CAAuBD,OAAvB,EAAhB;;EACA,YAAIA,OAAO,CAACrR,OAAR,CAAgBoQ,aAAhB,MAAmC,CAAC,CAAxC,EAA2C;EACzC,cAAI,KAAKmB,eAAT,EAA0B;EACxBnB,YAAAA,aAAa,GAAG,KAAKkB,iBAAL,CAAuBR,GAAvB,CAA2BV,aAA3B,CAAhB;EACD;EACF;EACF,OAPD,MAOO;EACL,YAAIA,aAAa,KAAK,KAAKkB,iBAAL,CAAuBjK,GAAvB,CAA2B+J,SAA3B,CAAtB,EAA6D;EAC3D,eAAKI,aAAL,CAAmB9K,MAAnB,EAA2B0J,aAA3B;;EAEA,cAAI,KAAKmB,eAAT,EAA0B;EACxBnB,YAAAA,aAAa,GAAG,KAAKkB,iBAAL,CAAuBR,GAAvB,CAA2BV,aAA3B,CAAhB;EACD;EACF;EACF;;EAED,aAAOA,aAAP;EACD,KAnLH;;EAAA;EAAA;EAAA,kDAsLiCqB,EAtLjC;EAuLI,UAAIA,EAAE,KAAK3R,SAAP,IAAoB2R,EAAE,KAAK,IAA/B,EAAqC;EACnC;EACD;;EACD,aAAO,KAAKH,iBAAL,CAAuB5M,MAAvB,qBACJ,KAAKqL,UADD,EACc0B,EADd,EAAP;EAGD;EA7LH;EAAA;EAAA,kDA+LiC9P,KA/LjC,EA+LwCzB,IA/LxC;EAgMI,UAAMuP,aAAa,GAAG,KAAK1O,WAAL,EAAtB;EACA,UAAM2Q,YAAY,GAAG,KAAKb,aAAL,CAAmBlP,KAAnB,CAArB;;EAEA,UAAIlC,KAAK,CAAC0D,OAAN,CAAcuO,YAAd,MAAgC,CAACA,YAAY,CAACtQ,MAAd,IAAwBqO,aAAa,CAACkC,EAAd,CAAiBD,YAAY,CAAC,CAAD,CAA7B,CAAxD,CAAJ,EAAgG;EAC9F;EACD;;EAED,UAAIA,YAAY,IAAI,CAACjC,aAAa,CAACkC,EAAd,CAAiBD,YAAjB,CAArB,EAAqD;EACnDjS,QAAAA,KAAK,CAACqK,GAAN,CAAUnI,KAAV,EAAiB,KAAKhB,UAAtB,EAAkC8O,aAAa,CAACmC,YAAd,CAA2BF,YAA3B,EAAyCxR,IAAzC,CAAlC;EACD;EACF;EA1MH;EAAA;EAAA;EA6MI,aAAO,KAAP;EACD;EA9MH;EAAA;EAAA;EAiNI,aAAO,KAAP;EACD;EAlNH;EAAA;EAAA,sCAoNqByB,KApNrB,EAoN4B+P,YApN5B,EAoN0CxR,IApN1C;;;EAqNI,WAAKsR,aAAL,CAAmB7P,KAAnB,EAA0B+P,YAA1B;EAEA,aAAO,KAAKG,YAAL,CAAkBH,YAAlB,EAAgCxR,IAAhC,EAAsC4R,IAAtC,CAA2C,UAAA9N,MAAM;EACtD,QAAA,MAAI,CAACmN,aAAL,CAAmBxP,KAAnB,EAA0BqC,MAA1B;EACD,OAFM,CAAP;EAGD;EA1NH;EAAA;EAAA,iCA4NgBrC,KA5NhB,EA4NuBzB,IA5NvB;EA6NI,UAAM0D,MAAM,GAAGnE,KAAK,CAAC0D,OAAN,CAAcxB,KAAd,IAAuB,YAAvB,GAAsC,QAArD;EAEA,aAAO,KAAKZ,WAAL,GAAmB6C,MAAnB,EAA2BjC,KAA3B,EAAkCzB,IAAlC,CAAP;EACD;EAhOH;EAAA;EAAA;EAwBI,aAAO,KAAK4Q,GAAL,KAAahR,SAAb,IAA0B,CAAC,CAAC,KAAKgR,GAAxC;EACD;EAzBH;EAAA;EAAA;EA4BI,aAAO,KAAKlK,MAAL,CAAYgK,SAAZ,CAAsBmB,aAAtB,CAAoC,KAAKxR,QAAzC,CAAP;EACD;EA7BH;;EAAA;EAAA;;ECRA,IAAM7C,QAAM,GAAG,QAAf;;EAEA,SAASsU,WAAT,CAAsBpL,MAAtB,EAA8BsC,IAA9B;;;EACE,MAAM+I,KAAK,GAAGrL,MAAM,CAACgK,SAArB;;EACA,YAAIqB,+CAAQ/I,KAAZ,EAAmB;EACjB,WAAO;EAAA,wCAAI9D,IAAJ;EAAIA,QAAAA,IAAJ;EAAA;;EAAA,aAAa6M,KAAK,CAAC/I,IAAD,CAAL,OAAA+I,KAAK,GAAOrL,MAAM,CAACsC,IAAd,SAAuB9D,IAAvB,EAAlB;EAAA,KAAP;EACD;;EACD,SAAOwB,MAAM,CAACsC,IAAD,CAAN,CAAagJ,IAAb,CAAkBtL,MAAlB,CAAP;EACD;;;EAGD,IAAMuL,YAAY,GAAG,UAArB;EACA,IAAMC,cAAc,GAAG,YAAvB;EACA,IAAMC,qBAAqB,GAAG,mBAA9B;EACA,IAAMC,YAAY,GAAG,UAArB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+FqBC;;;;;EAGnB;;;UAAa5Q,4EAAa;UAAIzB,2EAAY;;;;;;EACxC;EACA,QAAMsK,IAAI,GAAG,MAAKA,IAAlB;EACA,QAAM5D,MAAM,GAAI,MAAK3H,WAAL,CAAyB2H,MAAzC;;EAEA4D,IAAAA,IAAI,CAAC2H,YAAD,EAAe,IAAf,CAAJ;;EACA3H,IAAAA,IAAI,CAAC4H,cAAD,EAAiB,CAAC,CAAClS,IAAI,CAACsS,UAAxB,CAAJ;;EACAhI,IAAAA,IAAI,CACF6H,qBADE,EAEFnS,IAAI,CAACuS,iBAAL,KAA2B3S,SAA3B,GAAwC8G,MAAM,GAAGA,MAAM,CAAC6L,iBAAV,GAA8B,IAA5E,GAAoFvS,IAAI,CAACuS,iBAFvF,CAAJ;;;EAMA,QAAMhB,EAAE,GAAG7K,MAAM,GAAGnH,KAAK,CAAC4H,GAAN,CAAU1F,KAAV,EAAiBiF,MAAM,CAACuJ,WAAxB,CAAH,GAA0CrQ,SAA3D;;EACA,QAAI2R,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,MAAAA,KAAK,CAACqK,GAAN,gCAAgBlD,MAAM,CAACuJ,WAAvB,EAAoCsB,EAApC;EACD;;EAEDhS,IAAAA,KAAK,CAACqB,MAAN,gCAAmBa,KAAnB;;EACA6I,IAAAA,IAAI,CAAC2H,YAAD,EAAe,KAAf,CAAJ;;EACA,QAAIjS,IAAI,CAACwS,aAAL,KAAuB5S,SAA3B,EAAsC;EACpC0K,MAAAA,IAAI,CAAC4H,cAAD,EAAiB,CAAClS,IAAI,CAACwS,aAAvB,CAAJ;EACD,KAFD,MAEO,IAAI,OAAA9L,gDAAQ8L,aAAR,MAA0B5S,SAA9B,EAAyC;EAC9C0K,MAAAA,IAAI,CAAC4H,cAAD,EAAiB,CAACxL,MAAM,CAAC8L,aAAzB,CAAJ;EACD,KAFM,MAEA;EACLlI,MAAAA,IAAI,CAAC4H,cAAD,EAAiB,KAAjB,CAAJ;EACD;;EACD5H,IAAAA,IAAI,CAAC8H,YAAD,EAAe1L,MAAM,GAAGA,MAAM,CAAC+L,MAAP,CAAchR,KAAd,CAAH,GAA0BlC,KAAK,CAACgK,SAAN,CAAgB9H,KAAhB,CAA/C,CAAJ;;;EACD;EAED;;;;;;;;;;;;EAQE,UAAMiF,MAAM,GAAI,KAAK3H,WAAL,CAAyB2H,MAAzC;;EACA,UAAI,CAACA,MAAL,EAAa;EACX,cAAMnH,KAAK,CAACqE,GAAN,WAAapG,QAAb,eAA+B,EAA/B,EAAmC,GAAnC,EAAwC,QAAxC,CAAN;EACD;;EACD,aAAOkJ,MAAP;EACD;EAED;;;;;;;;;;;yCAQoBgM,WAAqB1S;EAEzC;;;;;;;;;;;0CAQqB0S,WAAqB1S;EAE1C;;;;;;;;;;;EAQE,aAAO,CAAC,KAAKyK,IAAL,CAAU,SAAV,KAAwB,EAAzB,EAA6B3J,KAA7B,EAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwBSd,2EAAY;EACnB,aAAOT,KAAK,CAAC8C,WAAN,CAAkB,OAAO,KAAKoQ,MAAZ,KAAuB,UAAvB,GAAoC,KAAKA,MAAL,CAAYzS,IAAZ,CAApC,GAAwD,IAA1E,EAAgF,KAAKyK,IAAL,CAAU,UAAV,CAAhF,EAAuGzK,IAAvG,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;6BAsBQA;EACN,WAAKsK,IAAL,CAAU,SAAV;;;EACA,WAAKA,IAAL,CAAU,UAAV,EAAsB,KAAtB;;EACA,WAAKA,IAAL,CAAU,SAAV,EAAqB,EAArB;;;EACA,WAAKA,IAAL,CAAU,UAAV,EAAsB,KAAKmI,MAAL,CAAYzS,IAAZ,CAAtB;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;YAuBSA,2EAAY;;EACnB,UAAM0G,MAAM,GAAG,KAAKiM,OAAL,EAAf;;EACA,aAAOb,WAAW,CAACpL,MAAD,EAAS,SAAT,CAAX,CAA+BnH,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgBT,MAAM,CAACuJ,WAAvB,CAA/B,EAAoEjQ,IAApE,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;0BAkBKV;EACH,aAAOC,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB7H,GAAhB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAyBYU;EACV,UAAM4S,eAAe,GAAG,CAAC,CAAC,CAAC,KAAKnI,IAAL,CAAU,SAAV,KAAwB,EAAzB,EAA6BvJ,MAAvD;EACA,aACE0R,eAAe,IACfrT,KAAK,CAAC0C,YAAN,CAAmB,OAAO,KAAKwQ,MAAZ,KAAuB,UAAvB,GAAoC,KAAKA,MAAL,CAAYzS,IAAZ,CAApC,GAAwD,IAA3E,EAAiF,KAAKyK,IAAL,CAAU,UAAV,CAAjF,EAAwGzK,IAAxG,CAFF;EAID;EAED;;;;;;;;;;;;;;;;;;;;;;;;4BAqBOA;EACL,aAAOT,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB,KAAKwL,OAAL,GAAe1C,WAA/B,MAAgDrQ,SAAvD;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA8BSI;EACP,aAAO,CAAC,KAAK2S,OAAL,GAAeE,QAAf,CAAwB,IAAxB,EAA8B7S,IAA9B,CAAR;EACD;;;4CAEsB8S,eAAevB,IAAIwB,YAAY9C;;;EACpD,UAAI8C,UAAU,CAACnN,IAAX,KAAoByJ,UAAxB,EAAoC;EAClC9E,QAAAA,WAAW,CAACuI,aAAD,EAAgBC,UAAU,CAACtS,UAA3B,EAAuCb,SAAvC,CAAX;EACD,OAFD,MAEO,IAAImT,UAAU,CAACnN,IAAX,KAAoBwJ,WAAxB,EAAqC;EAC1C;EACA,YAAM4D,QAAQ,GAAGzT,KAAK,CAAC4H,GAAN,CAAU2L,aAAV,EAAyBC,UAAU,CAACtS,UAApC,CAAjB;;EACA,YAAI8Q,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,UAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,mBAAIA,KAAK,KAAK,MAAd;EAAA,WAA5B;EACD,SAFD,MAEO;EACL1T,UAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,mBAAIA,KAAK,KAAK,MAAV,IAAkB1B,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBhD,WAAjB,CAA7B;EAAA,WAA5B;EACD;EACF;EACF;;;2CAEqBzJ,QAAQ+K,IAAIwB,YAAY9C;;;EAC5C;EACA,UAAI8C,UAAU,CAACnN,IAAX,KAAoByJ,UAAxB,EAAoC;EAClC;EACA9E,QAAAA,WAAW,CAAC/D,MAAD,EAASuM,UAAU,CAACtS,UAApB,EAAgC,IAAhC,CAAX;EACD,OAHD,MAGO,IAAIsS,UAAU,CAACnN,IAAX,KAAoBwJ,WAAxB,EAAqC;EAC1C;EACA,YAAM4D,QAAQ,GAAGzT,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBuM,UAAU,CAACtS,UAA7B,CAAjB;;EACA,YAAI8Q,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,UAAAA,KAAK,CAAC2J,SAAN,CAAgB8J,QAAhB,EAA0B,IAA1B,EAAgC,UAAAC,KAAK;EAAA,mBAAIA,KAAK,KAAK,MAAd;EAAA,WAArC;EACD,SAFD,MAEO;EACL1T,UAAAA,KAAK,CAAC2J,SAAN,CAAgB8J,QAAhB,EAA0B,IAA1B,EAAgC,UAAAC,KAAK;EAAA,mBAAIA,KAAK,KAAK,MAAV,IAAkB1B,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBhD,WAAjB,CAA7B;EAAA,WAArC;EACD;EACF;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA+CeyC,gFAAqC;YAAI1S,2EAAY;EAClE,UAAImM,EAAJ;;EACA,UAAMzF,MAAM,GAAG,KAAKiM,OAAL,EAAf;;EAEA,UAAIpT,KAAK,CAACyH,QAAN,CAAe0L,SAAf,CAAJ,EAA+B;EAC7BA,QAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;EACD;;EACD1S,MAAAA,IAAI,QAAJ,GAAY0S,SAAZ;;EAGAnT,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc0G,MAAd;;EACA1G,MAAAA,IAAI,CAACkT,OAAL,GAAexM,MAAM,CAACyM,cAAP,CAAsBnT,IAAtB,CAAf;;EAGAmM,MAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAU,qBAAf;EACA,aAAO5M,KAAK,CACToK,OADI,CACI,KAAKwC,EAAL,EAASuG,SAAT,EAAoB1S,IAApB,CADJ,EAEJ4R,IAFI,CAEC;EACJ;EACAzF,QAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAU,eAAf;EACAzF,QAAAA,MAAM,CAACiC,GAAP,CAAWwD,EAAX,EAAe,MAAf,EAAqBuG,SAArB,EAAgC1S,IAAhC;EACA,YAAMoT,KAAK,GAAG,EAAd;EACA,YAAIC,IAAJ;EACA9T,QAAAA,KAAK,CAACkH,eAAN,CAAsBC,MAAtB,EAA8B1G,IAA9B,EAAoC,UAACC,GAAD,EAAMU,QAAN;EAClC,cAAM4O,aAAa,GAAGtP,GAAG,CAACY,WAAJ,EAAtB;EACAF,UAAAA,QAAQ,CAAC2S,GAAT,GAAe,KAAf;;EACA,cAAI/T,KAAK,CAACM,UAAN,CAAiBI,GAAG,CAACsT,IAArB,CAAJ,EAAgC;EAC9BF,YAAAA,IAAI,GAAGpT,GAAG,CAACsT,IAAJ,CAAS7M,MAAT,EAAiBzG,GAAjB,EAAsB,MAAtB,EAA4BD,IAA5B,CAAP;EACD,WAFD,MAEO,IAAIC,GAAG,CAAC2F,IAAJ,KAAa,SAAb,IAA0B3F,GAAG,CAAC2F,IAAJ,KAAa,QAA3C,EAAqD;EAC1D,gBAAI3F,GAAG,CAAC4P,UAAR,EAAoB;EAClBwD,cAAAA,IAAI,GAAGvB,WAAW,CAACvC,aAAD,EAAgB,SAAhB,CAAX,qBAEFtP,GAAG,CAAC4P,UAFF,EAEetQ,KAAK,CAAC4H,GAAN,CAAU,MAAV,EAAgBT,MAAM,CAACuJ,WAAvB,CAFf,GAILtP,QAJK,EAKLiR,IALK,CAKA,UAAAvB,WAAW;EAAA,uBAChBpQ,GAAG,CAAC2F,IAAJ,KAAa,QAAb,GAAyByK,WAAW,CAACnP,MAAZ,GAAqBmP,WAAW,CAAC,CAAD,CAAhC,GAAsCzQ,SAA/D,GAA4EyQ,WAD5D;EAAA,eALX,CAAP;EAQD,aATD,MASO,IAAIpQ,GAAG,CAACuT,SAAR,EAAmB;EACxBH,cAAAA,IAAI,GAAGvB,WAAW,CAChBvC,aADgB,EAEhB,SAFgB,CAAX,CAGL;EACAnE,gBAAAA,KAAK,sBACFmE,aAAa,CAACU,WADZ,EAC0B;EAC3B,wBAAI1Q,KAAK,CAAC4H,GAAN,CAAU,MAAV,EAAgBlH,GAAG,CAACuT,SAApB;EADuB,iBAD1B;EADL,eAHK,CAAP;EAUD,aAXM,MAWA,IAAIvT,GAAG,CAACwT,WAAR,EAAqB;EAC1BJ,cAAAA,IAAI,GAAGvB,WAAW,CAACvC,aAAD,EAAgB,SAAhB,CAAX,CACL;EACEnE,gBAAAA,KAAK,sBACFnL,GAAG,CAACwT,WADF,EACgB;EACjBxE,kBAAAA,QAAQ,EAAE1P,KAAK,CAAC4H,GAAN,CAAU,MAAV,EAAgBT,MAAM,CAACuJ,WAAvB;EADO,iBADhB;EADP,eADK,EAQLjQ,IARK,CAAP;EAUD;EACF,WAjCM,MAiCA,IAAIC,GAAG,CAAC2F,IAAJ,KAAa,WAAjB,EAA8B;EACnC,gBAAMtG,GAAG,GAAGC,KAAK,CAAC4H,GAAN,CAAU,MAAV,EAAgBlH,GAAG,CAAC4P,UAApB,CAAZ;;EACA,gBAAItQ,KAAK,CAACiJ,MAAN,CAAalJ,GAAb,CAAJ,EAAuB;EACrB+T,cAAAA,IAAI,GAAGvB,WAAW,CAACvC,aAAD,EAAgB,MAAhB,CAAX,CAAmCjQ,GAAnC,EAAwCqB,QAAxC,CAAP;EACD;EACF;;EACD,cAAI0S,IAAJ,EAAU;EACRA,YAAAA,IAAI,GAAGA,IAAI,CAACzB,IAAL,CAAU,UAAAvB,WAAW;EAC1BpQ,cAAAA,GAAG,CAACgR,aAAJ,CAAkB,MAAlB,EAAwBZ,WAAxB;EACD,aAFM,CAAP;EAGA+C,YAAAA,KAAK,CAACvP,IAAN,CAAWwP,IAAX;EACD;EACF,SAlDD;EAmDA,eAAO5J,OAAO,CAACxD,GAAR,CAAYmN,KAAZ,CAAP;EACD,OA5DI,EA6DJxB,IA7DI,CA6DC;EACJ;EACAzF,QAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAU,oBAAf;EACA,eAAO5M,KAAK,CAACoK,OAAN,CAAc,MAAI,CAACwC,EAAD,CAAJ,CAASuG,SAAT,EAAoB1S,IAApB,CAAd,EAAyC4R,IAAzC,CAA8C;EAAA,iBAAM,MAAN;EAAA,SAA9C,CAAP;EACD,OAjEI,CAAP;EAkED;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAwBUtS;EACR,UAAIA,GAAJ,EAAS;EACP,eAAO,KAAKmL,IAAL,oBAAsBnL,GAAtB,EAAP;EACD;;EACD,aAAO,KAAKmL,IAAL,CAAU,UAAV,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAyBQzK,2EAAY;;EAClB,UAAM0T,QAAQ,GAAG,KAAKjJ,IAAL,CAAU,UAAV,CAAjB;;EACAzK,MAAAA,IAAI,CAAC2T,QAAL,GAAgB3T,IAAI,CAAC2T,QAAL,IAAiB,EAAjC;EACApU,MAAAA,KAAK,CAACI,MAAN,CAAa,IAAb,EAAmB,UAAClB,KAAD,EAAQa,GAAR;EACjB,YACEA,GAAG,KAAK,MAAI,CAACqT,OAAL,GAAe1C,WAAvB,IACA,CAACyD,QAAQ,CAAC3P,cAAT,CAAwBzE,GAAxB,CADD,IAEA,MAAI,CAACyE,cAAL,CAAoBzE,GAApB,CAFA,IAGAU,IAAI,CAAC2T,QAAL,CAAc7T,OAAd,CAAsBR,GAAtB,MAA+B,CAAC,CAJlC,EAKE;EACA,iBAAO,MAAI,CAACA,GAAD,CAAX;EACD;EACF,OATD;EAUAC,MAAAA,KAAK,CAACI,MAAN,CAAa+T,QAAb,EAAuB,UAACjV,KAAD,EAAQa,GAAR;EACrB,YAAIU,IAAI,CAAC2T,QAAL,CAAc7T,OAAd,CAAsBR,GAAtB,MAA+B,CAAC,CAApC,EAAuC;EACrC,UAAA,MAAI,CAACA,GAAD,CAAJ,GAAYb,KAAZ;EACD;EACF,OAJD;EAKA,WAAKmV,MAAL;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAkCM5T,2EAAY;;EAChB,UAAM0G,MAAM,GAAG,KAAKiM,OAAL,EAAf;;EACA,UAAMpB,EAAE,GAAGhS,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgBT,MAAM,CAACuJ,WAAvB,CAAX;EACA,UAAIxO,KAAK,GAAQ,IAAjB;;EAEA,UAAMoS,WAAW,GAAG,SAAdA,WAAc,CAAA/P,MAAM;EACxB,YAAM0C,MAAM,GAAGxG,IAAI,CAACsT,GAAL,GAAWxP,MAAM,CAACsJ,IAAlB,GAAyBtJ,MAAxC;;EACA,YAAI0C,MAAJ,EAAY;EACVjH,UAAAA,KAAK,CAAC4E,SAAN,CAAgB,MAAhB,EAAsBqC,MAAtB;;EACA,UAAA,MAAI,CAACoN,MAAL;EACD;;EACD,eAAO9P,MAAP;EACD,OAPD;;EASA,UAAIyN,EAAE,KAAK3R,SAAX,EAAsB;EACpB,eAAOkS,WAAW,CAACpL,MAAD,EAAS,QAAT,CAAX,CAA8BjF,KAA9B,EAAqCzB,IAArC,EAA2C4R,IAA3C,CAAgDiC,WAAhD,CAAP;EACD;;EACD,UAAI7T,IAAI,CAAC8T,WAAT,EAAsB;EACpB,YAAMC,OAAO,GAAG,KAAKA,OAAL,CAAa/T,IAAb,CAAhB;EACAyB,QAAAA,KAAK,GAAG,EAAR;EACAlC,QAAAA,KAAK,CAACqB,MAAN,CAAaa,KAAb,EAAoBsS,OAAO,CAACxR,KAA5B;EACAhD,QAAAA,KAAK,CAACqB,MAAN,CAAaa,KAAb,EAAoBsS,OAAO,CAACtR,OAA5B;EACD;;EACD,aAAOqP,WAAW,CAACpL,MAAD,EAAS,QAAT,CAAX,CAA8B6K,EAA9B,EAAkC9P,KAAlC,EAAyCzB,IAAzC,EAA+C4R,IAA/C,CAAoDiC,WAApD,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA6BKvU,KAAmBb,OAAQuB;EAC9B,UAAIT,KAAK,CAAC+B,QAAN,CAAehC,GAAf,CAAJ,EAAyB;EACvBU,QAAAA,IAAI,GAAGvB,KAAP;EACD;;EACDuB,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;EACA,UAAIA,IAAI,CAACgU,MAAT,EAAiB;EACf,aAAK1J,IAAL,CAAU,QAAV,EAAoB,IAApB;EACD;;EACD/K,MAAAA,KAAK,CAACqK,GAAN,CAAU,IAAV,EAAgBtK,GAAhB,EAAqBb,KAArB;;EACA,UAAI,CAAC,KAAKgM,IAAL,CAAU,SAAV,CAAL,EAA2B;EACzB,aAAKH,IAAL,CAAU,QAAV,EADyB;;EAE1B;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiCQtK;EACN,UAAM0G,MAAM,GAAI,KAAK3H,WAAL,CAAmC2H,MAAnD;;EACA,UAAIA,MAAJ,EAAY;EACV,eAAOA,MAAM,CAAC+L,MAAP,CAAc,IAAd,EAAoBzS,IAApB,CAAP;EACD,OAFD,MAEO;EACL,YAAM+G,IAAI,GAAG,EAAb;EACAxH,QAAAA,KAAK,CAACI,MAAN,CAAa,IAAb,EAAmB,UAACyH,IAAD,EAAO9H,GAAP;EACjByH,UAAAA,IAAI,CAACzH,GAAD,CAAJ,GAAYC,KAAK,CAACgK,SAAN,CAAgBnC,IAAhB,CAAZ;EACD,SAFD;EAGA,eAAOL,IAAP;EACD;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAyBOzH,KAAaU;EAClB,WAAK4J,GAAL,CAAStK,GAAT,EAAcM,SAAd,EAAyBI,IAAzB;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA6BUA;EACR,aAAO,KAAK2S,OAAL,GAAeE,QAAf,CAAwB,IAAxB,EAA8B7S,IAA9B,CAAP;EACD;;;;IAptBiCwK;EAstB3B6H,mBAAA,GAAeJ,YAAf;EACAI,qBAAA,GAAiBH,cAAjB;EACAG,4BAAA,GAAwBF,qBAAxB;EACAE,mBAAA,GAAeD,YAAf;EAGT;;;;;;EAKA7S,KAAK,CAAC+F,QAAN,CACE+M,MAAM,CAACjU,SADT,EAEE;EACE,SAAO,KAAKqM,IAAL,CAAU,QAAV,CAAP;EACD,CAJH,EAKE,UAAUhM,KAAV;EACE,OAAK6L,IAAL,CAAU,QAAV,EAAoB7L,KAApB;EACD,CAPH;EAUA;;;;;;;;EAQA;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WCv3BgB0M,KAAMtG,GAAGC,GAAGmP;EAC1B;EACA;EACA;EACA,MAAIpP,CAAC,KAAKC,CAAV,EAAa;EACX,WAAO,CAAP;EACD,GAFD,MAEO,IAAImP,QAAJ,EAAc;EACnBpP,IAAAA,CAAC,GAAGoP,QAAQ,CAACpP,CAAD,CAAZ;EACAC,IAAAA,CAAC,GAAGmP,QAAQ,CAACnP,CAAD,CAAZ;EACD;;EACD,SAAQD,CAAC,KAAK,IAAN,IAAcC,CAAC,KAAK,IAArB,IAA+BD,CAAC,KAAKjF,SAAN,IAAmBkF,CAAC,KAAKlF,SAAxD,GACH,CAAC,CADE,GAEHiF,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKjF,SAApB,GACE,CAAC,CADH,GAEEkF,CAAC,KAAK,IAAN,IAAcA,CAAC,KAAKlF,SAApB,GACE,CADF,GAEEiF,CAAC,GAAGC,CAAJ,GACE,CAAC,CADH,GAEED,CAAC,GAAGC,CAAJ,GACE,CADF,GAEE,CAVZ;EAWD;AAED,WAAgBoP,SAAU3N,OAAOhG,OAAO9B;EACtC8H,EAAAA,KAAK,CAACvF,MAAN,CAAaT,KAAb,EAAoB,CAApB,EAAuB9B,KAAvB;EACA,SAAO8H,KAAP;EACD;AAED,WAAgB4N,SAAU5N,OAAOhG;EAC/BgG,EAAAA,KAAK,CAACvF,MAAN,CAAaT,KAAb,EAAoB,CAApB;EACA,SAAOgG,KAAP;EACD;AAED,WAAgB6N,aAAc7N,OAAO9H,OAAO4L;EAC1C,MAAIgK,EAAE,GAAG,CAAT;EACA,MAAIC,EAAE,GAAG/N,KAAK,CAACrF,MAAf;EACA,MAAIqT,QAAJ;EACA,MAAIC,GAAJ;;EAEA,SAAOH,EAAE,GAAGC,EAAZ,EAAgB;EACd;EACAE,IAAAA,GAAG,GAAI,CAACH,EAAE,GAAGC,EAAN,IAAY,CAAb,GAAkB,CAAxB;EACAC,IAAAA,QAAQ,GAAGpJ,IAAI,CAAC1M,KAAD,EAAQ8H,KAAK,CAACiO,GAAD,CAAb,EAAoBnK,KAApB,CAAf;;EACA,QAAIkK,QAAQ,KAAK,CAAjB,EAAoB;EAClB,aAAO;EACLE,QAAAA,KAAK,EAAE,IADF;EAELlU,QAAAA,KAAK,EAAEiU;EAFF,OAAP;EAID,KALD,MAKO,IAAID,QAAQ,GAAG,CAAf,EAAkB;EACvBD,MAAAA,EAAE,GAAGE,GAAL;EACD,KAFM,MAEA;EACLH,MAAAA,EAAE,GAAGG,GAAG,GAAG,CAAX;EACD;EACF;;EAED,SAAO;EACLC,IAAAA,KAAK,EAAE,KADF;EAELlU,IAAAA,KAAK,EAAE+T;EAFF,GAAP;EAID;;MChCoBI;;;EAQnB;UAAaC,gFAAY;UAAI3U,2EAAkB;;;;EAC7C,QAAI,CAACT,KAAK,CAAC0D,OAAN,CAAc0R,SAAd,CAAL,EAA+B;EAC7B,YAAM,IAAItP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,SAAKsP,SAAL,GAAiBA,SAAjB;EACA,SAAKC,WAAL,GAAmB5U,IAAI,CAAC4U,WAAxB;EACA,SAAKX,QAAL,GAAgBjU,IAAI,CAACiU,QAArB;EACA,SAAKY,OAAL,GAAe,IAAf;EACA,SAAKlT,IAAL,GAAY,EAAZ;EACA,SAAKmT,MAAL,GAAc,EAAd;EACD;;;;0BAEIzG,SAAS5P;EACZ,UAAI,CAACc,KAAK,CAAC0D,OAAN,CAAcoL,OAAd,CAAL,EAA6B;EAC3BA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EAED,UAAM/O,GAAG,GAAG+O,OAAO,CAACxI,KAAR,MAAmBjG,SAA/B;EACA,UAAMmV,GAAG,GAAGX,YAAY,CAAC,KAAKzS,IAAN,EAAYrC,GAAZ,CAAxB;;EAEA,UAAI+O,OAAO,CAACnN,MAAR,KAAmB,CAAvB,EAA0B;EACxB,YAAI6T,GAAG,CAACN,KAAR,EAAe;EACb,cAAMO,YAAY,GAAGZ,YAAY,CAAC,KAAKU,MAAL,CAAYC,GAAG,CAACxU,KAAhB,CAAD,EAAyB9B,KAAzB,EAAgC,KAAKwV,QAArC,CAAjC;;EACA,cAAI,CAACe,YAAY,CAACP,KAAlB,EAAyB;EACvBP,YAAAA,QAAQ,CAAC,KAAKY,MAAL,CAAYC,GAAG,CAACxU,KAAhB,CAAD,EAAyByU,YAAY,CAACzU,KAAtC,EAA6C9B,KAA7C,CAAR;EACD;EACF,SALD,MAKO;EACLyV,UAAAA,QAAQ,CAAC,KAAKvS,IAAN,EAAYoT,GAAG,CAACxU,KAAhB,EAAuBjB,GAAvB,CAAR;EACA4U,UAAAA,QAAQ,CAAC,KAAKY,MAAN,EAAcC,GAAG,CAACxU,KAAlB,EAAyB,CAAC9B,KAAD,CAAzB,CAAR;EACD;EACF,OAVD,MAUO;EACL,YAAIsW,GAAG,CAACN,KAAR,EAAe;EACb,eAAKK,MAAL,CAAYC,GAAG,CAACxU,KAAhB,EAAuBqJ,GAAvB,CAA2ByE,OAA3B,EAAoC5P,KAApC;EACD,SAFD,MAEO;EACLyV,UAAAA,QAAQ,CAAC,KAAKvS,IAAN,EAAYoT,GAAG,CAACxU,KAAhB,EAAuBjB,GAAvB,CAAR;EACA,cAAM2V,QAAQ,GAAG,IAAIP,KAAJ,CAAU,EAAV,EAAc;EAAET,YAAAA,QAAQ,EAAE,KAAKA;EAAjB,WAAd,CAAjB;EACAgB,UAAAA,QAAQ,CAACrL,GAAT,CAAayE,OAAb,EAAsB5P,KAAtB;EACAyV,UAAAA,QAAQ,CAAC,KAAKY,MAAN,EAAcC,GAAG,CAACxU,KAAlB,EAAyB0U,QAAzB,CAAR;EACD;EACF;EACF;;;0BAEI5G;EACH,UAAI,CAAC9O,KAAK,CAAC0D,OAAN,CAAcoL,OAAd,CAAL,EAA6B;EAC3BA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EAED,UAAM/O,GAAG,GAAG+O,OAAO,CAACxI,KAAR,MAAmBjG,SAA/B;EACA,UAAMmV,GAAG,GAAGX,YAAY,CAAC,KAAKzS,IAAN,EAAYrC,GAAZ,CAAxB;;EAEA,UAAI+O,OAAO,CAACnN,MAAR,KAAmB,CAAvB,EAA0B;EACxB,YAAI6T,GAAG,CAACN,KAAR,EAAe;EACb,cAAI,KAAKK,MAAL,CAAYC,GAAG,CAACxU,KAAhB,EAAuBsU,OAA3B,EAAoC;EAClC,mBAAO,KAAKC,MAAL,CAAYC,GAAG,CAACxU,KAAhB,EAAuBgO,MAAvB,EAAP;EACD,WAFD,MAEO;EACL,mBAAO,KAAKuG,MAAL,CAAYC,GAAG,CAACxU,KAAhB,EAAuBO,KAAvB,EAAP;EACD;EACF,SAND,MAMO;EACL,iBAAO,EAAP;EACD;EACF,OAVD,MAUO;EACL,YAAIiU,GAAG,CAACN,KAAR,EAAe;EACb,iBAAO,KAAKK,MAAL,CAAYC,GAAG,CAACxU,KAAhB,EAAuB4G,GAAvB,CAA2BkH,OAA3B,CAAP;EACD,SAFD,MAEO;EACL,iBAAO,EAAP;EACD;EACF;EACF;;;;YAEOrO,2EAAY;EAClB,UAAIkV,OAAO,GAAG,EAAd;EACA,UAAMJ,MAAM,GAAG,KAAKA,MAApB;;EACA,UAAI9U,IAAI,CAACmV,KAAL,KAAe,MAAnB,EAA2B;EACzB,aAAK,IAAIlU,CAAC,GAAG6T,MAAM,CAAC5T,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;EAC3C,cAAMxC,KAAK,GAAGqW,MAAM,CAAC7T,CAAD,CAApB;;EACA,cAAIxC,KAAK,CAACoW,OAAV,EAAmB;EACjBK,YAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe7P,KAAK,CAAC8P,MAAN,CAAavO,IAAb,CAAf,CAAV;EACD,WAFD,MAEO;EACLkV,YAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe7P,KAAf,CAAV;EACD;EACF;EACF,OATD,MASO;EAAA;EAAA;EAAA;;EAAA;EACL,+BAAoBqW,MAApB,8HAA4B;EAAA,gBAAjBrW,MAAiB;;EAC1B,gBAAIA,MAAK,CAACoW,OAAV,EAAmB;EACjBK,cAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe7P,MAAK,CAAC8P,MAAN,CAAavO,IAAb,CAAf,CAAV;EACD,aAFD,MAEO;EACLkV,cAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe7P,MAAf,CAAV;EACD;EACF;EAPI;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQN;;EACD,aAAOyW,OAAP;EACD;;;+BAESE,IAAIjV;EACZ,WAAK2U,MAAL,CAAYzV,OAAZ,CAAoB,UAAAZ,KAAK;EACvB,YAAIA,KAAK,CAACoW,OAAV,EAAmB;EACjBpW,UAAAA,KAAK,CAAC4W,QAAN,CAAeD,EAAf,EAAmBjV,OAAnB;EACD,SAFD,MAEO;EACL1B,UAAAA,KAAK,CAACY,OAAN,CAAc+V,EAAd,EAAkBjV,OAAlB;EACD;EACF,OAND;EAOD;;;8BAEQ+M,UAAUC;YAAWnN,2EAAY;;EACxC,UAAI,CAACT,KAAK,CAAC0D,OAAN,CAAciK,QAAd,CAAL,EAA8B;EAC5BA,QAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;EACD;;EACD,UAAI,CAAC3N,KAAK,CAAC0D,OAAN,CAAckK,SAAd,CAAL,EAA+B;EAC7BA,QAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;EACD;;EACD5N,MAAAA,KAAK,CAACqB,MAAN,CAAaZ,IAAb,EAAmB;EACjBsV,QAAAA,aAAa,EAAE,IADE;EAEjBC,QAAAA,cAAc,EAAE,KAFC;EAGjBxK,QAAAA,KAAK,EAAEnL,SAHU;EAIjBoL,QAAAA,MAAM,EAAE;EAJS,OAAnB;;EAOA,UAAMkK,OAAO,GAAG,KAAKM,QAAL,CAActI,QAAd,EAAwBC,SAAxB,EAAmCnN,IAAnC,CAAhB;;EAEA,UAAIA,IAAI,CAAC+K,KAAT,EAAgB;EACd,eAAOmK,OAAO,CAACpU,KAAR,CAAcd,IAAI,CAACgL,MAAnB,EAA2BhL,IAAI,CAAC+K,KAAL,GAAa/K,IAAI,CAACgL,MAA7C,CAAP;EACD,OAFD,MAEO;EACL,eAAOkK,OAAO,CAACpU,KAAR,CAAcd,IAAI,CAACgL,MAAnB,CAAP;EACD;EACF;;;+BAESkC,UAAUC,WAAWnN;EAC7B,UAAIkV,OAAO,GAAG,EAAd;EAEA,UAAMO,OAAO,GAAGvI,QAAQ,CAACrH,KAAT,EAAhB;EACA,UAAM6P,QAAQ,GAAGvI,SAAS,CAACtH,KAAV,EAAjB;EAEA,UAAIkP,GAAJ;;EAEA,UAAIU,OAAO,KAAK7V,SAAhB,EAA2B;EACzBmV,QAAAA,GAAG,GAAGX,YAAY,CAAC,KAAKzS,IAAN,EAAY8T,OAAZ,CAAlB;EACD,OAFD,MAEO;EACLV,QAAAA,GAAG,GAAG;EACJN,UAAAA,KAAK,EAAE,KADH;EAEJlU,UAAAA,KAAK,EAAE;EAFH,SAAN;EAID;;EAED,UAAI2M,QAAQ,CAAChM,MAAT,KAAoB,CAAxB,EAA2B;EACzB,YAAI6T,GAAG,CAACN,KAAJ,IAAazU,IAAI,CAACsV,aAAL,KAAuB,KAAxC,EAA+C;EAC7CP,UAAAA,GAAG,CAACxU,KAAJ,IAAa,CAAb;EACD;;EAED,aAAK,IAAIU,CAAC,GAAG8T,GAAG,CAACxU,KAAjB,EAAwBU,CAAC,GAAG,KAAKU,IAAL,CAAUT,MAAtC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;EACpD,cAAIyU,QAAQ,KAAK9V,SAAjB,EAA4B;EAC1B,gBAAII,IAAI,CAACuV,cAAT,EAAyB;EACvB,kBAAI,KAAK5T,IAAL,CAAUV,CAAV,IAAeyU,QAAnB,EAA6B;EAC3B;EACD;EACF,aAJD,MAIO;EACL,kBAAI,KAAK/T,IAAL,CAAUV,CAAV,KAAgByU,QAApB,EAA8B;EAC5B;EACD;EACF;EACF;;EAED,cAAI,KAAKZ,MAAL,CAAY7T,CAAZ,EAAe4T,OAAnB,EAA4B;EAC1BK,YAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe,KAAKwG,MAAL,CAAY7T,CAAZ,EAAesN,MAAf,EAAf,CAAV;EACD,WAFD,MAEO;EACL2G,YAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe,KAAKwG,MAAL,CAAY7T,CAAZ,CAAf,CAAV;EACD;;EAED,cAAIjB,IAAI,CAAC+K,KAAT,EAAgB;EACd,gBAAImK,OAAO,CAAChU,MAAR,IAAkBlB,IAAI,CAAC+K,KAAL,GAAa/K,IAAI,CAACgL,MAAxC,EAAgD;EAC9C;EACD;EACF;EACF;EACF,OA9BD,MA8BO;EACL,aAAK,IAAI/J,EAAC,GAAG8T,GAAG,CAACxU,KAAjB,EAAwBU,EAAC,GAAG,KAAKU,IAAL,CAAUT,MAAtC,EAA8CD,EAAC,IAAI,CAAnD,EAAsD;EACpD,cAAM0U,OAAO,GAAG,KAAKhU,IAAL,CAAUV,EAAV,CAAhB;;EACA,cAAI0U,OAAO,GAAGD,QAAd,EAAwB;EACtB;EACD;;EAED,cAAI,KAAKZ,MAAL,CAAY7T,EAAZ,EAAe4T,OAAnB,EAA4B;EAC1B,gBAAIc,OAAO,KAAKF,OAAhB,EAAyB;EACvBP,cAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CACR,KAAKwG,MAAL,CAAY7T,EAAZ,EAAeuU,QAAf,CACEjW,KAAK,CAACmD,IAAN,CAAWwK,QAAX,CADF,EAEEC,SAAS,CAACzL,GAAV,CAAc;EAAA,uBAAM9B,SAAN;EAAA,eAAd,CAFF,EAGEI,IAHF,CADQ,CAAV;EAOD,aARD,MAQO,IAAI2V,OAAO,KAAKD,QAAhB,EAA0B;EAC/BR,cAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CACR,KAAKwG,MAAL,CAAY7T,EAAZ,EAAeuU,QAAf,CACEtI,QAAQ,CAACxL,GAAT,CAAa;EAAA,uBAAM9B,SAAN;EAAA,eAAb,CADF,EAEEL,KAAK,CAACmD,IAAN,CAAWyK,SAAX,CAFF,EAGEnN,IAHF,CADQ,CAAV;EAOD,aARM,MAQA;EACLkV,cAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe,KAAKwG,MAAL,CAAY7T,EAAZ,EAAesN,MAAf,EAAf,CAAV;EACD;EACF,WApBD,MAoBO;EACL2G,YAAAA,OAAO,GAAGA,OAAO,CAAC5G,MAAR,CAAe,KAAKwG,MAAL,CAAY7T,EAAZ,CAAf,CAAV;EACD;;EAED,cAAIjB,IAAI,CAAC+K,KAAT,EAAgB;EACd,gBAAImK,OAAO,CAAChU,MAAR,IAAkBlB,IAAI,CAAC+K,KAAL,GAAa/K,IAAI,CAACgL,MAAxC,EAAgD;EAC9C;EACD;EACF;EACF;EACF;;EAED,UAAIhL,IAAI,CAAC+K,KAAT,EAAgB;EACd,eAAOmK,OAAO,CAACpU,KAAR,CAAc,CAAd,EAAiBd,IAAI,CAAC+K,KAAL,GAAa/K,IAAI,CAACgL,MAAnC,CAAP;EACD,OAFD,MAEO;EACL,eAAOkK,OAAP;EACD;EACF;;;;EAGC,aAAO,KAAKJ,MAAL,CAAY5T,MAAZ,GAAsB,KAAK4T,MAAL,CAAY,CAAZ,EAAeD,OAAf,GAAyB,KAAKC,MAAL,CAAY,CAAZ,EAAec,IAAf,EAAzB,GAAiD,KAAKd,MAAL,CAAY,CAAZ,CAAvE,GAAyF,EAAhG;EACD;;;;EAGC,WAAKnT,IAAL,GAAY,EAAZ;EACA,WAAKmT,MAAL,GAAc,EAAd;EACD;;;mCAEa1H;EACZ,UAAMiB,OAAO,GAAG,KAAKsG,SAAL,CAAejT,GAAf,CAAmB,UAAA2I,KAAK;EAAA,eACtC9K,KAAK,CAACM,UAAN,CAAiBwK,KAAjB,IAA0BA,KAAK,CAAC+C,IAAD,CAAL,IAAexN,SAAzC,GAAqDwN,IAAI,CAAC/C,KAAD,CAAJ,IAAezK,SAD9B;EAAA,OAAxB,CAAhB;EAGA,WAAKgK,GAAL,CAASyE,OAAT,EAAkBjB,IAAlB;EACD;;;mCAEaA;;;EACZ,UAAI5K,OAAJ;EACA,UAAMqT,QAAQ,GAAG,KAAK5B,QAAL,CAAc7G,IAAd,MAAwBxN,SAAzC;EACA,WAAKkV,MAAL,CAAYzV,OAAZ,CAAoB,UAACZ,KAAD,EAAQwC,CAAR;EAClB,YAAIxC,KAAK,CAACoW,OAAV,EAAmB;EACjB,cAAIpW,KAAK,CAACqX,YAAN,CAAmB1I,IAAnB,CAAJ,EAA8B;EAC5B,gBAAI3O,KAAK,CAACkD,IAAN,CAAWT,MAAX,KAAsB,CAA1B,EAA6B;EAC3BiT,cAAAA,QAAQ,CAAC,KAAI,CAACxS,IAAN,EAAYV,CAAZ,CAAR;EACAkT,cAAAA,QAAQ,CAAC,KAAI,CAACW,MAAN,EAAc7T,CAAd,CAAR;EACD;;EACDuB,YAAAA,OAAO,GAAG,IAAV;EACA,mBAAO,KAAP;EACD;EACF,SATD,MASO;EACL,cAAIwS,YAAY,GAAQ,EAAxB;;EACA,cAAI,KAAI,CAACrT,IAAL,CAAUV,CAAV,MAAiBrB,SAAjB,IAA8B,CAACiW,QAAnC,EAA6C;EAC3C,iBAAK,IAAIE,CAAC,GAAGtX,KAAK,CAACyC,MAAN,GAAe,CAA5B,EAA+B6U,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;EAC1C,kBAAItX,KAAK,CAACsX,CAAD,CAAL,KAAa3I,IAAjB,EAAuB;EACrB4H,gBAAAA,YAAY,GAAG;EACbP,kBAAAA,KAAK,EAAE,IADM;EAEblU,kBAAAA,KAAK,EAAEwV;EAFM,iBAAf;EAIA;EACD;EACF;EACF,WAVD,MAUO,IAAIF,QAAJ,EAAc;EACnBb,YAAAA,YAAY,GAAGZ,YAAY,CAAC3V,KAAD,EAAQ2O,IAAR,EAAc,KAAI,CAAC6G,QAAnB,CAA3B;EACD;;EACD,cAAIe,YAAY,CAACP,KAAjB,EAAwB;EACtBN,YAAAA,QAAQ,CAAC1V,KAAD,EAAQuW,YAAY,CAACzU,KAArB,CAAR;;EACA,gBAAI9B,KAAK,CAACyC,MAAN,KAAiB,CAArB,EAAwB;EACtBiT,cAAAA,QAAQ,CAAC,KAAI,CAACxS,IAAN,EAAYV,CAAZ,CAAR;EACAkT,cAAAA,QAAQ,CAAC,KAAI,CAACW,MAAN,EAAc7T,CAAd,CAAR;EACD;;EACDuB,YAAAA,OAAO,GAAG,IAAV;EACA,mBAAO,KAAP;EACD;EACF;EACF,OAnCD;EAoCA,aAAOA,OAAO,GAAG4K,IAAH,GAAUxN,SAAxB;EACD;;;mCAEawN;EACZ,UAAM5K,OAAO,GAAG,KAAKsT,YAAL,CAAkB1I,IAAlB,CAAhB;;EACA,UAAI5K,OAAO,KAAK5C,SAAhB,EAA2B;EACzB,aAAKoW,YAAL,CAAkB5I,IAAlB;EACD;EACF;;;;;;MCxTK8E,mBAAmBG,OAAnBH;EAER,IAAM1U,QAAM,GAAG,YAAf;EA8DA,IAAMyY,mBAAmB,GAAmB;EAC1CC,EAAAA,aAAa,EAAE,IAD2B;EAE1CC,EAAAA,gBAAgB,EAAE,IAFwB;EAG1ClG,EAAAA,WAAW,EAAE,IAH6B;EAI1CmG,EAAAA,UAAU,EAAE;EAJ8B,CAA5C;EAOA;;;;;;;;;;;;;;;;;;;;;;;;;;MAyBqBC;;;;;EA4CnB;;;UAAa5F,8EAAe;UAAIzQ,2EAAsC;;;;EACpE,oFAAMA,IAAN;EAZF;;;;;;;EAMA,iBAAA,GAAoC,EAApC;EAEA,gBAAA,GAAS,EAAT;;EAME,QAAIyQ,OAAO,IAAI,CAAClR,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAAhB,EAAwC;EACtCzQ,MAAAA,IAAI,GAAGyQ,OAAP;EACAA,MAAAA,OAAO,GAAG,EAAV;EACD;;EACD,QAAIlR,KAAK,CAACyH,QAAN,CAAehH,IAAf,CAAJ,EAA0B;EACxBA,MAAAA,IAAI,GAAG;EAAEiQ,QAAAA,WAAW,EAAEjQ;EAAf,OAAP;EACD;;;EAGDT,IAAAA,KAAK,CAACqB,MAAN,gCAAmBZ,IAAnB;;EAEAT,IAAAA,KAAK,CAACqB,MAAN,gCAAmBrB,KAAK,CAACmD,IAAN,CAAWuT,mBAAX,CAAnB;;EAEA,QAAI,CAAC,MAAKK,UAAV,EAAsB;EACpB,YAAKA,UAAL,GAAkB1K,KAAlB;EACD;;EAED,QAAMqE,WAAW,GAAG,MAAKsG,QAAL,EAApB;;EAEA,UAAKhW,KAAL,GAAa,IAAImU,KAAJ,CAAU,CAACzE,WAAD,CAAV,EAAyB;EACpCgE,MAAAA,QADoC,oBAC1BrN,GAD0B;EAElC,eAAOrH,KAAK,CAAC4H,GAAN,CAAUP,GAAV,EAAeqJ,WAAf,CAAP;EACD;EAHmC,KAAzB,CAAb;;EAOA,QAAI1Q,KAAK,CAAC+B,QAAN,CAAemP,OAAf,KAA4BlR,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,KAA0BA,OAAO,CAACvP,MAAlE,EAA2E;EACzE,YAAK0P,GAAL,CAASH,OAAT;EACD;;;EACF;EAED;;;;;;;;;;;;;EASE,UAAI,KAAK0F,gBAAT,EAA2B;EACzB,aAAKzQ,IAAL;EACD;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;0BAmBK+K;;;YAASzQ,2EAAY;;EACxB;EACAT,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc,IAAd;;EACAyQ,MAAAA,OAAO,GAAG,KAAK+F,SAAL,CAAe/F,OAAf,EAAwBzQ,IAAxB,KAAiCyQ,OAA3C;;EAGA,UAAIgG,QAAQ,GAAG,KAAf;EACA,UAAMxG,WAAW,GAAG,KAAKsG,QAAL,EAApB;;EACA,UAAI,CAAChX,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAAL,EAA6B;EAC3B,YAAIlR,KAAK,CAAC+B,QAAN,CAAemP,OAAf,CAAJ,EAA6B;EAC3BA,UAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACAgG,UAAAA,QAAQ,GAAG,IAAX;EACD,SAHD,MAGO;EACL,gBAAMlX,KAAK,CAACqE,GAAN,WAAapG,QAAb,WAA2B,SAA3B,EACJ,GADI,EAEJ,iBAFI,EAGJiT,OAHI,CAAN;EAKD;EACF;EAGD;EACA;EACA;;;EACAA,MAAAA,OAAO,GAAGA,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAC1B,YAAM+K,EAAE,GAAG,MAAI,CAACgF,QAAL,CAAc/P,MAAd,CAAX;;;EAEA,YAAMtC,QAAQ,GAAGqN,EAAE,KAAK3R,SAAP,GAAmB2R,EAAnB,GAAwB,MAAI,CAACpK,GAAL,CAASoK,EAAT,CAAzC;EAEA;;EACA,YAAI/K,MAAM,KAAKtC,QAAf,EAAyB;EACvB,iBAAOA,QAAP;EACD;;EAED,YAAIA,QAAJ,EAAc;EACZ;EACA;EACA,cAAMkS,UAAU,GAAGpW,IAAI,CAACoW,UAAL,IAAmB,MAAI,CAACA,UAA3C;;EACA,cACEA,UAAU,KAAK,OAAf,IACAA,UAAU,KAAK,SADf,IAEAA,UAAU,KAAK,MAHjB,EAIE;EACA,kBAAM7W,KAAK,CAACqE,GAAN,WAAapG,QAAb,WAA2B,iBAA3B,EACJ,GADI,EAEJ,+BAFI,EAGJ4Y,UAHI,EAIJ,IAJI,CAAN;EAMD;;EACD,cAAMM,kBAAkB,GAAGxS,QAAQ,CAACuG,IAAT,CAAcyH,gBAAd,CAA3B;;EACA,cAAIlS,IAAI,CAACsS,UAAT,EAAqB;EACnB;EACApO,YAAAA,QAAQ,CAACoG,IAAT,CAAc4H,gBAAd,EAA8B,IAA9B;EACD;;EACD,cAAIkE,UAAU,KAAK,OAAnB,EAA4B;EAC1B7W,YAAAA,KAAK,CAAC4E,SAAN,CAAgBD,QAAhB,EAA0BsC,MAA1B;EACD,WAFD,MAEO,IAAI4P,UAAU,KAAK,SAAnB,EAA8B;EACnC7W,YAAAA,KAAK,CAACI,MAAN,CAAauE,QAAb,EAAuB,UAACzF,KAAD,EAAQa,GAAR;EACrB,kBAAIA,GAAG,KAAK2Q,WAAR,IAAuBzJ,MAAM,CAAClH,GAAD,CAAN,KAAgBM,SAA3C,EAAsD;EACpDsE,gBAAAA,QAAQ,CAAC5E,GAAD,CAAR,GAAgBM,SAAhB;EACD;EACF,aAJD;EAKAsE,YAAAA,QAAQ,CAAC0F,GAAT,CAAapD,MAAb;EACD,WA9BW;;;EAgCZ,cAAIxG,IAAI,CAACsS,UAAT,EAAqB;EACnB;EACApO,YAAAA,QAAQ,CAACoG,IAAT,CAAc4H,gBAAd,EAA8BwE,kBAA9B;EACD;;EACDlQ,UAAAA,MAAM,GAAGtC,QAAT;;EACA,cAAIlE,IAAI,CAACkW,aAAL,IAAsB3W,KAAK,CAACM,UAAN,CAAiB2G,MAAM,CAACoN,MAAxB,CAA1B,EAA2D;EACzDpN,YAAAA,MAAM,CAACoN,MAAP;EACD,WAvCW;;;EAyCZ,UAAA,MAAI,CAAC+C,aAAL,CAAmBnQ,MAAnB;EACD,SA1CD,MA0CO;EACL;EACA;EACA;EACAA,UAAAA,MAAM,GAAG,MAAI,CAACE,MAAL,GAAc,MAAI,CAACA,MAAL,CAAYgL,YAAZ,CAAyBlL,MAAzB,EAAiCxG,IAAjC,CAAd,GAAuDwG,MAAhE;;EACA,UAAA,MAAI,CAACjG,KAAL,CAAWyV,YAAX,CAAwBxP,MAAxB;;EACAjH,UAAAA,KAAK,CAACI,MAAN,CAAa,MAAI,CAACiX,OAAlB,EAA2B,UAACrW,KAAD,EAAQyI,IAAR;EACzBzI,YAAAA,KAAK,CAACyV,YAAN,CAAmBxP,MAAnB;EACD,WAFD;;EAGA,cAAIA,MAAM,IAAIjH,KAAK,CAACM,UAAN,CAAiB2G,MAAM,CAACH,EAAxB,CAAd,EAA2C;EACzCG,YAAAA,MAAM,CAACH,EAAP,CAAU,KAAV,EAAiB,MAAI,CAACwQ,cAAtB,EAAsC,MAAtC;EACD;EACF;;EACD,eAAOrQ,MAAP;EACD,OAlES,CAAV;;EAoEA,UAAM1C,MAAM,GAAG2S,QAAQ,GAAGhG,OAAO,CAAC,CAAD,CAAV,GAAgBA,OAAvC;;EACA,UAAI,CAACzQ,IAAI,CAACgU,MAAV,EAAkB;EAChB,aAAKtO,IAAL,CAAU,KAAV,EAAiB5B,MAAjB;EACD;;EACD,aAAO,KAAKgT,QAAL,CAAcrG,OAAd,EAAuBzQ,IAAvB,EAA6B8D,MAA7B,KAAwCA,MAA/C;EACD;EAED;;;;;;;;;;;;;;+BAWU0C,QAAQxG,MAAM8D;EACtB,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;kCAUayN,IAAIvR,MAAMwG;EACrB,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;qCAWgBsH,OAAO9N,MAAMyQ;EAC3B,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;gCAUWA,SAASzQ;EAClB,aAAO,IAAP;EACD;EAED;;;;;;;;;;;mCAQcuR,IAAIvR;EAChB,aAAO,IAAP;EACD;EAED;;;;;;;;;;;sCAQiB8N,OAAO9N;EACtB,aAAO,IAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BA4BSkN,UAAUC,WAAWnN;EAC5B,aAAO,KAAK8N,KAAL,GACJR,OADI,CACIJ,QADJ,EACcC,SADd,EACyBnN,IADzB,EAEJ+W,GAFI,EAAP;EAGD;EAED;;;;;;;;;;;;;;;;;;;;;;kCAmBa/N,MAAM2L;;;YAAY3U,2EAAY;;EACzC,UAAIT,KAAK,CAACyH,QAAN,CAAegC,IAAf,KAAwB2L,SAAS,KAAK/U,SAA1C,EAAqD;EACnD+U,QAAAA,SAAS,GAAG,CAAC3L,IAAD,CAAZ;EACD;;EACDhJ,MAAAA,IAAI,CAACiU,QAAL,GAAgBjU,IAAI,CAACiU,QAAL,IAAkB,UAAArN,GAAG;EAAA,eAAI,MAAI,CAAC2P,QAAL,CAAc3P,GAAd,CAAJ;EAAA,OAArC;;EACA,UAAMrG,KAAK,GAAI,KAAKqW,OAAL,CAAa5N,IAAb,IAAqB,IAAI0L,KAAJ,CAAUC,SAAV,EAAqB3U,IAArB,CAApC;EACA,WAAKO,KAAL,CAAW8U,QAAX,CAAoB9U,KAAK,CAACyV,YAA1B,EAAwCzV,KAAxC;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAwCQyW,WAAW7W;EACjB,aAAO,KAAK2N,KAAL,GACJtJ,MADI,CACGwS,SADH,EACc7W,OADd,EAEJ4W,GAFI,EAAP;EAGD;EAED;;;;;;;;;;;;;;;;;8BAcS3I,WAAWjO;EAClB,WAAKI,KAAL,CAAW8U,QAAX,CAAoBjH,SAApB,EAA+BjO,OAA/B;EACD;EAED;;;;;;;;;;;0BAQKoR;EACH,UAAM0F,SAAS,GACb1F,EAAE,KAAK3R,SAAP,GACI,EADJ,GAEI,KAAKkO,KAAL,GACC3G,GADD,CACKoK,EADL,EAECwF,GAFD,EAHN;EAMA,aAAOE,SAAS,CAAC/V,MAAV,GAAmB+V,SAAS,CAAC,CAAD,CAA5B,GAAkCrX,SAAzC;EACD;;;;;;EA4BC,aAAO,oBAAKkO,KAAL,IACJS,MADI,+BAEJwI,GAFI,EAAP;EAGD;EAED;;;;;;;;;;;+BAQU/N;EACR,UAAMzI,KAAK,GAAGyI,IAAI,GAAG,KAAK4N,OAAL,CAAa5N,IAAb,CAAH,GAAwB,KAAKzI,KAA/C;;EACA,UAAI,CAACA,KAAL,EAAY;EACV,cAAMhB,KAAK,CAACqE,GAAN,WAAapG,QAAb,gBAAgCwL,IAAhC,EAAsC,GAAtC,EAA2C,OAA3C,CAAN;EACD;;EACD,aAAOzI,KAAP;EACD;EAED;;;;;;;;;;;;;;;;4BAaOkO;EACL,aAAO,KAAKX,KAAL,GACJ/C,KADI,CACE0D,GADF,EAEJsI,GAFI,EAAP;EAGD;EAED;;;;;;;;;;;;;;;0BAYK3B,IAAIjV;EACP,UAAMiN,IAAI,GAAG,EAAb;EACA,WAAK7M,KAAL,CAAW8U,QAAX,CAAoB,UAAA5W,KAAK;EACvB2O,QAAAA,IAAI,CAACvJ,IAAL,CAAUuR,EAAE,CAACvW,IAAH,CAAQsB,OAAR,EAAiB1B,KAAjB,CAAV;EACD,OAFD;EAGA,aAAO2O,IAAP;EACD;EAED;;;;;;;;;;;;;8BAUSyB;0CAAa3J;EAAAA,QAAAA;;;EACpB,UAAMkI,IAAI,GAAG,EAAb;EACA,WAAK7M,KAAL,CAAW8U,QAAX,CAAoB,UAAA7O,MAAM;EACxB4G,QAAAA,IAAI,CAACvJ,IAAL,CAAU2C,MAAM,CAACqI,QAAD,CAAN,OAAArI,MAAM,EAActB,IAAd,CAAhB;EACD,OAFD;EAGA,aAAOkI,IAAP;EACD;EAED;;;;;;;;;;;4BAQOpN;EACL,aAAO,KAAKkX,SAAL,CAAe,KAAK/F,OAAL,EAAf,EAA+BnR,IAA/B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;EAiBE,UAAMmX,IAAI,GAAG,KAAKb,UAAlB;EACA,aAAO,IAAIa,IAAJ,CAAS,IAAT,CAAP;EACD;EAED;;;;;;;;;;;;;;+BAWU3Q;EACR,UAAIA,MAAJ,EAAY;EACV,eAAOjH,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAK+P,QAAL,EAAlB,CAAP;EACD;;EACD,aAAO,KAAK7P,MAAL,GAAc,KAAKA,MAAL,CAAYuJ,WAA1B,GAAwC,KAAKA,WAApD;EACD;EAED;;;;;;;;;;;;;;;;;6BAcQmF,IAAIgC;EACV,UAAMhK,IAAI,GAAG,KAAKmB,MAAL,EAAb;EACA,aAAOnB,IAAI,CAAC9D,MAAL,CAAY8L,EAAZ,EAAgBgC,YAAhB,CAAP;EACD;EAED;;;;;;;;;;;;;6BAUQC;YAAYrX,2EAAY;EAC9B,WAAKsX,YAAL,CAAkBD,UAAlB,EAA8BrX,IAA9B;EACA,UAAIwG,MAAM,GAAGjH,KAAK,CAACiJ,MAAN,CAAa6O,UAAb,IAA2B,KAAKlQ,GAAL,CAASkQ,UAAT,CAA3B,GAAkDA,UAA/D;;EAGA,UAAI9X,KAAK,CAAC+B,QAAN,CAAekF,MAAf,CAAJ,EAA4B;EAC1BA,QAAAA,MAAM,GAAG,KAAKjG,KAAL,CAAWuV,YAAX,CAAwBtP,MAAxB,CAAT;;EACA,YAAIA,MAAJ,EAAY;EACVjH,UAAAA,KAAK,CAACI,MAAN,CAAa,KAAKiX,OAAlB,EAA2B,UAACrW,KAAD,EAAQyI,IAAR;EACzBzI,YAAAA,KAAK,CAACuV,YAAN,CAAmBtP,MAAnB;EACD,WAFD;;EAGA,cAAIjH,KAAK,CAACM,UAAN,CAAiB2G,MAAM,CAACL,GAAxB,CAAJ,EAAkC;EAChCK,YAAAA,MAAM,CAACL,GAAP,CAAW,KAAX,EAAkB,KAAK0Q,cAAvB,EAAuC,IAAvC;EACD;;EACD,cAAI,CAAC7W,IAAI,CAACgU,MAAV,EAAkB;EAChB,iBAAKtO,IAAL,CAAU,QAAV,EAAoBc,MAApB;EACD;EACF;EACF;;EACD,aAAO,KAAK+Q,WAAL,CAAiBF,UAAjB,EAA6BrX,IAA7B,EAAmCwG,MAAnC,KAA8CA,MAArD;EACD;EAED;;;;;;;;;;;;;;;;;gCAcWgR;;;YAAgBxX,2EAAY;EACrC,WAAKyX,eAAL,CAAqBD,cAArB,EAAqCxX,IAArC;EACA,UAAIyQ,OAAO,GAAGlR,KAAK,CAAC0D,OAAN,CAAcuU,cAAd,IACVA,cAAc,CAAC1W,KAAf,EADU,GAEV,KAAK0D,MAAL,CAAYgT,cAAZ,CAFJ;;EAKA,UAAM7W,QAAQ,GAAGpB,KAAK,CAACgK,SAAN,CAAgBvJ,IAAhB,CAAjB;EACAW,MAAAA,QAAQ,CAACqT,MAAT,GAAkB,IAAlB;EACAvD,MAAAA,OAAO,GAAGA,OAAO,CACd/O,GADO,CACH,UAAA8E,MAAM;EAAA,eAAI,MAAI,CAACkD,MAAL,CAAYlD,MAAZ,EAAoB7F,QAApB,CAAJ;EAAA,OADH,EAEP6D,MAFO,CAEA,UAAAgC,MAAM;EAAA,eAAIA,MAAJ;EAAA,OAFN,CAAV;;EAGA,UAAI,CAACxG,IAAI,CAACgU,MAAV,EAAkB;EAChB,aAAKtO,IAAL,CAAU,QAAV,EAAoB+K,OAApB;EACD;;EACD,aAAO,KAAKiH,cAAL,CAAoBF,cAApB,EAAoCxX,IAApC,EAA0CyQ,OAA1C,KAAsDA,OAA7D;EACD;EAED;;;;;;;;;;;;;;;;2BAaMhC;EACJ,aAAO,KAAKX,KAAL,GACJ5C,IADI,CACCuD,GADD,EAEJsI,GAFI,EAAP;EAGD;EAED;;;;;;;;;;;;;;6BAWQ/W;EACN,aAAO,KAAK2X,OAAL,CAAa,QAAb,EAAuB3X,IAAvB,CAAP;EACD;EAED;;;;;;;;;;8BAOSA;EACP,aAAO,KAAKO,KAAL,CAAW4G,GAAX,EAAP;EACD;EAED;;;;;;;;;;;;;;;;kCAaaX;YAAQxG,2EAA2B;EAC9C,WAAKqN,QAAL,CAAcrN,IAAI,CAACO,KAAnB,EAA0BqX,YAA1B,CAAuCpR,MAAvC;EACD;EAED;;;;;;;;;;;oCAQeA;EACb,WAAKjG,KAAL,CAAWqX,YAAX,CAAwBpR,MAAxB;EACAjH,MAAAA,KAAK,CAACI,MAAN,CAAa,KAAKiX,OAAlB,EAA2B,UAAArW,KAAK;EAAA,eAAIA,KAAK,CAACqX,YAAN,CAAmBpR,MAAnB,CAAJ;EAAA,OAAhC;EACD;;;;IA5uBqCmE;;MCtG3BkN,WAAb;EAAA;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA,mBAAiCxS,KAAjC;;ECIA,IAAM7H,QAAM,GAAG,QAAf;EAEA;;;;;;;;;;;;EAWA,IAAMsa,KAAK,GAAG;EACZvR,EAAAA,KAAK,EAAEhH,KAAK,CAAC0D,OADD;EAEZ,aAAS1D,KAAK,CAAC6I,SAFH;EAGZ2P,EAAAA,OAAO,EAAExY,KAAK,CAAC8I,SAHH;EAIZ,UAAM9I,KAAK,CAAC+I,MAJA;EAKZ0P,EAAAA,MAAM,EAAEzY,KAAK,CAACgJ,QALF;EAMZtJ,EAAAA,MAAM,EAAEM,KAAK,CAAC+B,QANF;EAOZ2W,EAAAA,MAAM,EAAE1Y,KAAK,CAACyH;EAPF,CAAd;EAUA;;;;EAGA,SAASkR,eAAT,CAA0BC,OAA1B,EAAmC7L,IAAnC;EACE,MAAI8L,GAAG,GAAG,EAAV;;EACA,MAAID,OAAJ,EAAa;EACX,QAAI5Y,KAAK,CAACgJ,QAAN,CAAe4P,OAAf,CAAJ,EAA6B;EAC3BC,MAAAA,GAAG,eAAQD,OAAR,MAAH;EACD,KAFD,MAEO,IAAI7L,IAAJ,EAAU;EACf8L,MAAAA,GAAG,eAAQD,OAAR,CAAH;EACD,KAFM,MAEA;EACLC,MAAAA,GAAG,cAAOD,OAAP,CAAH;EACD;EACF;;EACD,SAAOC,GAAP;EACD;EAED;;;;;EAGA,SAASC,QAAT;QAAmBrY,2EAAY;EAC7B,MAAId,IAAI,GAAG,EAAX;EACA,MAAMoZ,QAAQ,GAAGtY,IAAI,CAACd,IAAL,IAAa,EAA9B;EACAoZ,EAAAA,QAAQ,CAACjZ,OAAT,CAAiB,UAAA8Y,OAAO;EACtBjZ,IAAAA,IAAI,IAAIgZ,eAAe,CAACC,OAAD,EAAUjZ,IAAV,CAAvB;EACD,GAFD;EAGAA,EAAAA,IAAI,IAAIgZ,eAAe,CAAClY,IAAI,CAACoH,IAAN,EAAYlI,IAAZ,CAAvB;EACA,SAAOA,IAAP;EACD;EAED;;;;;EAGA,SAASqZ,SAAT,CAAoBC,MAApB,EAA4BC,QAA5B,EAAsCzY,IAAtC;EACE,SAAO;EACLyY,IAAAA,QAAQ,EAARA,QADK;EAELD,IAAAA,MAAM,EAAE,KAAKA,MAFR;EAGLtZ,IAAAA,IAAI,EAAEmZ,QAAQ,CAACrY,IAAD;EAHT,GAAP;EAKD;EAED;;;;;EAGA,SAAS0Y,QAAT,CAAmBF,MAAnB,EAA2BC,QAA3B,EAAqCzY,IAArC,EAA2C2Y,MAA3C;EACEA,EAAAA,MAAM,CAAC9U,IAAP,CAAY0U,SAAS,CAACC,MAAD,EAASC,QAAT,EAAmBzY,IAAnB,CAArB;EACD;EAED;;;;;EAGA,SAAS4Y,eAAT,CAA0BC,OAA1B,EAAmCpa,KAAnC,EAA0Cqa,MAA1C,EAAkD9Y,IAAlD;EACE,MAAM+Y,GAAG,GAAGD,MAAM,CAACD,OAAD,CAAlB;;EACA,MAAIpa,KAAK,CAACyC,MAAN,GAAe6X,GAAnB,EAAwB;EACtB,WAAOR,SAAS,CAAC9Z,KAAK,CAACyC,MAAP,gCAAsC6X,GAAtC,GAA6C/Y,IAA7C,CAAhB;EACD;EACF;EAED;;;;;EAGA,SAASgZ,eAAT,CAA0BH,OAA1B,EAAmCpa,KAAnC,EAA0Cqa,MAA1C,EAAkD9Y,IAAlD;EACE,MAAM2O,GAAG,GAAGmK,MAAM,CAACD,OAAD,CAAlB;;EACA,MAAIpa,KAAK,CAACyC,MAAN,GAAeyN,GAAnB,EAAwB;EACtB,WAAO4J,SAAS,CAAC9Z,KAAK,CAACyC,MAAP,gCAAsCyN,GAAtC,GAA6C3O,IAA7C,CAAhB;EACD;EACF;EAED;;;;;;;EAKA,IAAMiZ,kBAAkB,GAAG;EACzB;;;;;;;;;;;;;;;;EAgBAC,EAAAA,KAjByB,iBAiBlBza,KAjBkB,EAiBXqa,MAjBW,EAiBH9Y,IAjBG;EAkBvB,QAAImZ,SAAS,GAAG,EAAhB;EACAL,IAAAA,MAAM,CAACI,KAAP,CAAa7Z,OAAb,CAAqB,UAAA+Z,OAAO;EAC1BD,MAAAA,SAAS,GAAGA,SAAS,CAAC7K,MAAV,CAAiBuE,SAAQ,CAACpU,KAAD,EAAQ2a,OAAR,EAAiBpZ,IAAjB,CAAR,IAAkC,EAAnD,CAAZ;EACD,KAFD;EAGA,WAAOmZ,SAAS,CAACjY,MAAV,GAAmBiY,SAAnB,GAA+BvZ,SAAtC;EACD,GAvBwB;;EAyBzB;;;;;;;;;;;;;;;;EAgBAyZ,EAAAA,KAzCyB,iBAyClB5a,KAzCkB,EAyCXqa,MAzCW,EAyCH9Y,IAzCG;EA0CvB,QAAIsZ,SAAS,GAAG,KAAhB;EACA,QAAIH,SAAS,GAAG,EAAhB;EACAL,IAAAA,MAAM,CAACO,KAAP,CAAaha,OAAb,CAAqB,UAAA+Z,OAAO;EAC1B,UAAMT,MAAM,GAAG9F,SAAQ,CAACpU,KAAD,EAAQ2a,OAAR,EAAiBpZ,IAAjB,CAAvB;;EACA,UAAI2Y,MAAJ,EAAY;EACVQ,QAAAA,SAAS,GAAGA,SAAS,CAAC7K,MAAV,CAAiBqK,MAAjB,CAAZ;EACD,OAFD,MAEO;EACLW,QAAAA,SAAS,GAAG,IAAZ;EACD;EACF,KAPD;EAQA,WAAOA,SAAS,GAAG1Z,SAAH,GAAeuZ,SAA/B;EACD,GArDwB;;EAuDzB;;;;;;;;;EASAI,EAAAA,YAhEyB,wBAgEX9a,KAhEW,EAgEJqa,MAhEI,EAgEI9Y,IAhEJ;EAkExB,GAlEwB;;EAoEzB;;;;;;;;;;;;EApEyB,yBAgFnBvB,KAhFmB,EAgFZqa,MAhFY,EAgFJ9Y,IAhFI;EAiFvB,QAAMwZ,cAAc,GAAGV,MAAM,QAA7B;;EACA,QAAIvZ,KAAK,CAAC+G,SAAN,CAAgBkT,cAAhB,EAAgC,UAAAvR,IAAI;EAAA,aAAI1I,KAAK,CAAC+E,SAAN,CAAgB2D,IAAhB,EAAsBxJ,KAAtB,CAAJ;EAAA,KAApC,MAA0E,CAAC,CAA/E,EAAkF;EAChF,aAAO8Z,SAAS,CAAC9Z,KAAD,oBAAmB+a,cAAc,CAACC,IAAf,CAAoB,IAApB,CAAnB,QAAiDzZ,IAAjD,CAAhB;EACD;EACF,GArFwB;;EAuFzB;;;;;;;;;;;;EAYA0Z,EAAAA,KAnGyB,iBAmGlBjb,KAnGkB,EAmGXqa,MAnGW;UAmGH9Y,2EAAY;EAChC;EACA,QAAI0Z,KAAK,GAAGZ,MAAM,CAACY,KAAnB;EACA,QAAIf,MAAM,GAAG,EAAb;EACA,QAAMgB,aAAa,GAAGpa,KAAK,CAAC0D,OAAN,CAAcyW,KAAd,CAAtB;EACA,QAAMxY,MAAM,GAAGzC,KAAK,CAACyC,MAArB;;EACA,SAAK,IAAIkG,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGlG,MAA1B,EAAkCkG,IAAI,EAAtC,EAA0C;EACxC,UAAIuS,aAAJ,EAAmB;EACjB;EACA;EACAD,QAAAA,KAAK,GAAGZ,MAAM,CAACY,KAAP,CAAatS,IAAb,CAAR;EACD;;EACDpH,MAAAA,IAAI,CAACoH,IAAL,GAAYA,IAAZ;EACAuR,MAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuE,SAAQ,CAACpU,KAAK,CAAC2I,IAAD,CAAN,EAAcsS,KAAd,EAAqB1Z,IAArB,CAAR,IAAsC,EAApD,CAAT;EACD;;EACD,WAAO2Y,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD,GAnHwB;;EAqHzB;;;;;;;;;;;;EAYAga,EAAAA,OAjIyB,mBAiIhBnb,KAjIgB,EAiITqa,MAjIS,EAiID9Y,IAjIC;EAkIvB;EACA,QAAM4Z,OAAO,GAAGd,MAAM,CAACc,OAAvB;EAEA;EACA;;EACA,QAAMC,gBAAgB,GAAGf,MAAM,CAACe,gBAAhC;;EACA,QAAI,QAAOpb,KAAP,cAAwBmb,OAAxB,KAAmC,EAAEC,gBAAgB,GAAGD,OAAO,GAAGnb,KAAb,GAAqBmb,OAAO,IAAInb,KAAlD,CAAvC,EAAiG;EAC/F,aAAOob,gBAAgB,GACnBtB,SAAS,CAAC9Z,KAAD,sCAAqCmb,OAArC,GAAgD5Z,IAAhD,CADU,GAEnBuY,SAAS,CAAC9Z,KAAD,yBAAwBmb,OAAxB,GAAmC5Z,IAAnC,CAFb;EAGD;EACF,GA7IwB;;EA+IzB;;;;;;;;;;;;EAYA8Z,EAAAA,QA3JyB,oBA2Jfrb,KA3Je,EA2JRqa,MA3JQ,EA2JA9Y,IA3JA;EA4JvB,QAAIT,KAAK,CAAC0D,OAAN,CAAcxE,KAAd,CAAJ,EAA0B;EACxB,aAAOma,eAAe,CAAC,UAAD,EAAana,KAAb,EAAoBqa,MAApB,EAA4B9Y,IAA5B,CAAtB;EACD;EACF,GA/JwB;;EAiKzB;;;;;;;;;;;;EAYA+Z,EAAAA,SA7KyB,qBA6Kdtb,KA7Kc,EA6KPqa,MA7KO,EA6KC9Y,IA7KD;EA8KvB,WAAO4Y,eAAe,CAAC,WAAD,EAAcna,KAAd,EAAqBqa,MAArB,EAA6B9Y,IAA7B,CAAtB;EACD,GA/KwB;;EAiLzB;;;;;;;;;;;;;EAaAga,EAAAA,aA9LyB,yBA8LVvb,KA9LU,EA8LHqa,MA9LG,EA8LK9Y,IA9LL;EA+LvB;EACA,QAAI,CAACT,KAAK,CAAC+B,QAAN,CAAe7C,KAAf,CAAL,EAA4B;EAC5B,QAAMub,aAAa,GAAGlB,MAAM,CAACkB,aAA7B;EACA,QAAM9Y,MAAM,GAAG/C,MAAM,CAACwD,IAAP,CAAYlD,KAAZ,EAAmByC,MAAlC;;EACA,QAAIA,MAAM,GAAG8Y,aAAb,EAA4B;EAC1B,aAAOzB,SAAS,CAACrX,MAAD,yBAAyB8Y,aAAzB,kBAAqDha,IAArD,CAAhB;EACD;EACF,GAtMwB;;EAwMzB;;;;;;;;;;;;EAYAia,EAAAA,OApNyB,mBAoNhBxb,KApNgB,EAoNTqa,MApNS,EAoND9Y,IApNC;EAqNvB;EACA,QAAMia,OAAO,GAAGnB,MAAM,CAACmB,OAAvB;EAEA;EACA;;EACA,QAAMC,gBAAgB,GAAGpB,MAAM,CAACoB,gBAAhC;;EACA,QAAI,QAAOzb,KAAP,cAAwBwb,OAAxB,KAAmC,EAAEC,gBAAgB,GAAGzb,KAAK,GAAGwb,OAAX,GAAqBxb,KAAK,IAAIwb,OAAhD,CAAvC,EAAiG;EAC/F,aAAOC,gBAAgB,GACnB3B,SAAS,CAAC9Z,KAAD,sCAAqCwb,OAArC,GAAgDja,IAAhD,CADU,GAEnBuY,SAAS,CAAC9Z,KAAD,yBAAwBwb,OAAxB,GAAmCja,IAAnC,CAFb;EAGD;EACF,GAhOwB;;EAkOzB;;;;;;;;;;;;EAYAma,EAAAA,QA9OyB,oBA8Of1b,KA9Oe,EA8ORqa,MA9OQ,EA8OA9Y,IA9OA;EA+OvB,QAAIT,KAAK,CAAC0D,OAAN,CAAcxE,KAAd,CAAJ,EAA0B;EACxB,aAAOua,eAAe,CAAC,UAAD,EAAava,KAAb,EAAoBqa,MAApB,EAA4B9Y,IAA5B,CAAtB;EACD;EACF,GAlPwB;;EAoPzB;;;;;;;;;;;;EAYAoa,EAAAA,SAhQyB,qBAgQd3b,KAhQc,EAgQPqa,MAhQO,EAgQC9Y,IAhQD;EAiQvB,WAAOgZ,eAAe,CAAC,WAAD,EAAcva,KAAd,EAAqBqa,MAArB,EAA6B9Y,IAA7B,CAAtB;EACD,GAlQwB;;EAoQzB;;;;;;;;;;;;;EAaAqa,EAAAA,aAjRyB,yBAiRV5b,KAjRU,EAiRHqa,MAjRG,EAiRK9Y,IAjRL;EAkRvB;EACA,QAAI,CAACT,KAAK,CAAC+B,QAAN,CAAe7C,KAAf,CAAL,EAA4B;EAC5B,QAAM4b,aAAa,GAAGvB,MAAM,CAACuB,aAA7B;EACA,QAAMnZ,MAAM,GAAG/C,MAAM,CAACwD,IAAP,CAAYlD,KAAZ,EAAmByC,MAAlC;;EACA,QAAIA,MAAM,GAAGmZ,aAAb,EAA4B;EAC1B,aAAO9B,SAAS,CAACrX,MAAD,yBAAyBmZ,aAAzB,kBAAqDra,IAArD,CAAhB;EACD;EACF,GAzRwB;;EA2RzB;;;;;;;;;;;;EAYAsa,EAAAA,UAvSyB,sBAuSb7b,KAvSa,EAuSNqa,MAvSM,EAuSE9Y,IAvSF;EAwSvB,QAAMsa,UAAU,GAAGxB,MAAM,CAACwB,UAA1B;;EACA,QAAI/a,KAAK,CAACgJ,QAAN,CAAe9J,KAAf,CAAJ,EAA2B;EACzB,UAAKA,KAAK,GAAG6b,UAAT,GAAuB,CAAvB,KAA6B,CAAjC,EAAoC;EAClC,eAAO/B,SAAS,CAAC9Z,KAAD,uBAAsB6b,UAAtB,GAAoCta,IAApC,CAAhB;EACD;EACF;EACF,GA9SwB;;EAgTzB;;;;;;;;;;;;;EAaAua,EAAAA,GA7TyB,eA6TpB9b,KA7ToB,EA6Tbqa,MA7Ta,EA6TL9Y,IA7TK;EA8TvB,QAAI,CAAC6S,SAAQ,CAACpU,KAAD,EAAQqa,MAAM,CAACyB,GAAf,EAAoBva,IAApB,CAAb,EAAwC;EACtC;EACA,aAAOuY,SAAS,CAAC,WAAD,EAAc,oBAAd,EAAoCvY,IAApC,CAAhB;EACD;EACF,GAlUwB;;EAoUzB;;;;;;;;;;;;;EAaAwa,EAAAA,KAjVyB,iBAiVlB/b,KAjVkB,EAiVXqa,MAjVW,EAiVH9Y,IAjVG;EAkVvB,QAAIsZ,SAAS,GAAG,KAAhB;EACA,QAAIH,SAAS,GAAG,EAAhB;EACAL,IAAAA,MAAM,CAAC0B,KAAP,CAAanb,OAAb,CAAqB,UAAA+Z,OAAO;EAC1B,UAAMT,MAAM,GAAG9F,SAAQ,CAACpU,KAAD,EAAQ2a,OAAR,EAAiBpZ,IAAjB,CAAvB;;EACA,UAAI2Y,MAAJ,EAAY;EACVQ,QAAAA,SAAS,GAAGA,SAAS,CAAC7K,MAAV,CAAiBqK,MAAjB,CAAZ;EACD,OAFD,MAEO,IAAIW,SAAJ,EAAe;EACpBH,QAAAA,SAAS,GAAG,CAACZ,SAAS,CAAC,6BAAD,EAAgC,wBAAhC,EAA0DvY,IAA1D,CAAV,CAAZ;EACAsZ,QAAAA,SAAS,GAAG,KAAZ;EACA,eAAO,KAAP;EACD,OAJM,MAIA;EACLA,QAAAA,SAAS,GAAG,IAAZ;EACD;EACF,KAXD;EAYA,WAAOA,SAAS,GAAG1Z,SAAH,GAAeuZ,SAA/B;EACD,GAjWwB;;EAmWzB;;;;;;;;;;;;EAYAzN,EAAAA,OA/WyB,mBA+WhBjN,KA/WgB,EA+WTqa,MA/WS,EA+WD9Y,IA/WC;EAgXvB,QAAM0L,OAAO,GAAGoN,MAAM,CAACpN,OAAvB;;EACA,QAAInM,KAAK,CAACyH,QAAN,CAAevI,KAAf,KAAyB,CAACA,KAAK,CAAC+E,KAAN,CAAYkI,OAAZ,CAA9B,EAAoD;EAClD,aAAO6M,SAAS,CAAC9Z,KAAD,EAAQiN,OAAR,EAAiB1L,IAAjB,CAAhB;EACD;EACF,GApXwB;;EAsXzB;;;;;;;;;;;;;;EAcAya,EAAAA,UApYyB,sBAoYbhc,KApYa,EAoYNqa,MApYM;UAoYE9Y,2EAAY;;EACrC,QAAIT,KAAK,CAAC0D,OAAN,CAAcxE,KAAd,CAAJ,EAA0B;EACxB;EACD;EAGD;EACA;;;EACA,QAAMic,oBAAoB,GAAG5B,MAAM,CAAC4B,oBAAP,KAAgC9a,SAAhC,GAA4C,IAA5C,GAAmDkZ,MAAM,CAAC4B,oBAAvF;EACA,QAAMpB,SAAS,GAAG,EAAlB;EAEA;;EACA,QAAMmB,UAAU,GAAG3B,MAAM,CAAC2B,UAAP,IAAqB,EAAxC;EAEA;;EACA,QAAME,iBAAiB,GAAG7B,MAAM,CAAC6B,iBAAP,IAA4B,EAAtD;EACA,QAAIhC,MAAM,GAAG,EAAb;EAEApZ,IAAAA,KAAK,CAACI,MAAN,CAAa8a,UAAb,EAAyB,UAACrB,OAAD,EAAUhS,IAAV;EACvBpH,MAAAA,IAAI,CAACoH,IAAL,GAAYA,IAAZ;EACAuR,MAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuE,SAAQ,CAACpU,KAAK,CAAC2I,IAAD,CAAN,EAAcgS,OAAd,EAAuBpZ,IAAvB,CAAR,IAAwC,EAAtD,CAAT;EACAsZ,MAAAA,SAAS,CAACzV,IAAV,CAAeuD,IAAf;EACD,KAJD;EAMA,QAAMwT,UAAU,GAAGrb,KAAK,CAAC4J,IAAN,CAAW1K,KAAX,EAAkB6a,SAAlB,CAAnB;EACA/Z,IAAAA,KAAK,CAACI,MAAN,CAAagb,iBAAb,EAAgC,UAACvB,OAAD,EAAU1N,OAAV;EAC9BnM,MAAAA,KAAK,CAACI,MAAN,CAAaib,UAAb,EAAyB,UAACC,KAAD,EAAQzT,IAAR;EACvB,YAAIA,IAAI,CAAC5D,KAAL,CAAWkI,OAAX,CAAJ,EAAyB;EACvB1L,UAAAA,IAAI,CAACoH,IAAL,GAAYA,IAAZ;EACAuR,UAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuE,SAAQ,CAACpU,KAAK,CAAC2I,IAAD,CAAN,EAAcgS,OAAd,EAAuBpZ,IAAvB,CAAR,IAAwC,EAAtD,CAAT;EACAsZ,UAAAA,SAAS,CAACzV,IAAV,CAAeuD,IAAf;EACD;EACF,OAND;EAOD,KARD;EASA,QAAMzF,IAAI,GAAGxD,MAAM,CAACwD,IAAP,CAAYpC,KAAK,CAAC4J,IAAN,CAAW1K,KAAX,EAAkB6a,SAAlB,CAAZ,CAAb;;EAEA,QAAIoB,oBAAoB,KAAK,KAA7B,EAAoC;EAClC,UAAI/Y,IAAI,CAACT,MAAT,EAAiB;EACf,YAAM4Z,QAAQ,GAAG9a,IAAI,CAACoH,IAAtB;EACApH,QAAAA,IAAI,CAACoH,IAAL,GAAY,EAAZ;EACAsR,QAAAA,QAAQ,yBAAkB/W,IAAI,CAAC8X,IAAL,CAAU,IAAV,CAAlB,GAAqC,iBAArC,EAAwDzZ,IAAxD,EAA8D2Y,MAA9D,CAAR;EACA3Y,QAAAA,IAAI,CAACoH,IAAL,GAAY0T,QAAZ;EACD;EACF,KAPD,MAOO,IAAIvb,KAAK,CAAC+B,QAAN,CAAeoZ,oBAAf,CAAJ,EAA0C;EAC/C;EACA/Y,MAAAA,IAAI,CAACtC,OAAL,CAAa,UAAA+H,IAAI;EACfpH,QAAAA,IAAI,CAACoH,IAAL,GAAYA,IAAZ;EACAuR,QAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuE,SAAQ,CAACpU,KAAK,CAAC2I,IAAD,CAAN,EAAcsT,oBAAd,EAAoC1a,IAApC,CAAR,IAAqD,EAAnE,CAAT;EACD,OAHD;EAID;;EACD,WAAO2Y,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD,GAvbwB;;EAybzB;;;;;;;;;;;;EAYAmb,EAAAA,QArcyB,oBAqcftc,KArce,EAqcRqa,MArcQ;UAqcA9Y,2EAAY;EACnC,QAAM+a,QAAQ,GAAGjC,MAAM,CAACiC,QAAxB;EACA,QAAMpC,MAAM,GAAG,EAAf;;EACA,QAAI,CAAC3Y,IAAI,CAACgb,YAAV,EAAwB;EACtBD,MAAAA,QAAQ,CAAC1b,OAAT,CAAiB,UAAA+H,IAAI;EACnB,YAAI7H,KAAK,CAAC4H,GAAN,CAAU1I,KAAV,EAAiB2I,IAAjB,MAA2BxH,SAA/B,EAA0C;EACxC,cAAMqb,QAAQ,GAAGjb,IAAI,CAACoH,IAAtB;EACApH,UAAAA,IAAI,CAACoH,IAAL,GAAYA,IAAZ;EACAsR,UAAAA,QAAQ,CAAC9Y,SAAD,EAAY,SAAZ,EAAuBI,IAAvB,EAA6B2Y,MAA7B,CAAR;EACA3Y,UAAAA,IAAI,CAACoH,IAAL,GAAY6T,QAAZ;EACD;EACF,OAPD;EAQD;;EACD,WAAOtC,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD,GAndwB;;EAqdzB;;;;;;;;;;;;EAYAgG,EAAAA,IAjeyB,gBAienBnH,KAjemB,EAieZqa,MAjeY,EAieJ9Y,IAjeI;EAkevB,QAAI4F,IAAI,GAAGkT,MAAM,CAAClT,IAAlB;EACA,QAAIsV,SAAJ;;EAEA,QAAI3b,KAAK,CAACyH,QAAN,CAAepB,IAAf,CAAJ,EAA0B;EACxBA,MAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;EACD;;;EAEDA,IAAAA,IAAI,CAACvG,OAAL,CAAa,UAAA8b,KAAK;EAChB;EACA,UAAIrD,KAAK,CAACqD,KAAD,CAAL,CAAa1c,KAAb,EAAoBqa,MAApB,EAA4B9Y,IAA5B,CAAJ,EAAuC;EACrC;EACAkb,QAAAA,SAAS,GAAGC,KAAZ;EACA,eAAO,KAAP;EACD;EACF,KAPD;;EASA,QAAI,CAACD,SAAL,EAAgB;EACd,aAAO3C,SAAS,CACd9Z,KAAK,KAAKmB,SAAV,IAAuBnB,KAAK,KAAK,IAAjC,WAA+CA,KAA/C,IAAuD,KAAKA,KAD9C,oBAEHmH,IAAI,CAAC6T,IAAL,CAAU,IAAV,CAFG,QAGdzZ,IAHc,CAAhB;EAKD;EAED;;;EACA,QAAMob,SAAS,GAAGC,mBAAmB,CAACH,SAAD,CAArC;;EACA,QAAIE,SAAJ,EAAe;EACb,aAAOA,SAAS,CAAC3c,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB,CAAhB;EACD;EACF,GA/fwB;;EAigBzB;;;;;;;;;;;;EAYAsb,EAAAA,WA7gByB,uBA6gBZ7c,KA7gBY,EA6gBLqa,MA7gBK,EA6gBG9Y,IA7gBH;;;EA8gBvB,QAAI,OAAAvB,+CAAOyC,MAAP,KAAiB4X,MAAM,CAACwC,WAA5B,EAAyC;EACvC,UAAMpa,MAAM,GAAGzC,KAAK,CAACyC,MAArB;EACA,UAAI+G,IAAJ,EAAUhH,CAAV,EAAa8U,CAAb,CAFuC;;EAIvC,WAAK9U,CAAC,GAAGC,MAAM,GAAG,CAAlB,EAAqBD,CAAC,GAAG,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;EAC/BgH,QAAAA,IAAI,GAAGxJ,KAAK,CAACwC,CAAD,CAAZ,CAD+B;;EAG/B,aAAK8U,CAAC,GAAG9U,CAAC,GAAG,CAAb,EAAgB8U,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;EAC3B;EACA,cAAIxW,KAAK,CAAC+E,SAAN,CAAgB2D,IAAhB,EAAsBxJ,KAAK,CAACsX,CAAD,CAA3B,CAAJ,EAAqC;EACnC,mBAAOwC,SAAS,CAACtQ,IAAD,EAAO,eAAP,EAAwBjI,IAAxB,CAAhB;EACD;EACF;EACF;EACF;EACF;EA7hBwB,CAA3B;EAgiBA;;;;EAGA,SAASub,MAAT,CAAiBxP,GAAjB,EAAsBtN,KAAtB,EAA6Bqa,MAA7B,EAAqC9Y,IAArC;EACE,MAAI2Y,MAAM,GAAG,EAAb;EACA5M,EAAAA,GAAG,CAAC1M,OAAJ,CAAY,UAAA8M,EAAE;EACZ,QAAI2M,MAAM,CAAC3M,EAAD,CAAN,KAAevM,SAAnB,EAA8B;EAC5B+Y,MAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAc2K,kBAAkB,CAAC9M,EAAD,CAAlB,CAAuB1N,KAAvB,EAA8Bqa,MAA9B,EAAsC9Y,IAAtC,KAA+C,EAA7D,CAAT;EACD;EACF,GAJD;EAKA,SAAO2Y,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD;EAED;;;;;;;;;;;;;;;EAaA,IAAM4b,OAAO,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,OAAjB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,KAA5C,CAAhB;EAEA;;;;;;;;;;;;EAWA,IAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,UAAtB,EAAkC,aAAlC,CAAlB;EAEA;;;;;;;;;;;EAUA,IAAMC,WAAW,GAAG,CAAC,YAAD,EAAe,SAAf,EAA0B,SAA1B,CAApB;EAEA;;;;;;;;;;;;;EAYA,IAAMC,UAAU,GAAG,CAAC,eAAD,EAAkB,eAAlB,EAAmC,UAAnC,EAA+C,YAA/C,EAA6D,cAA7D,CAAnB;EAEA;;;;;;;;;;;EAUA,IAAMC,UAAU,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,SAA3B,CAAnB;EAEA;;;;;EAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACpd,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA,SAAyBub,MAAM,CAACC,OAAD,EAAU/c,KAAV,EAAiBqa,MAAjB,EAAyB9Y,IAAzB,CAA/B;EAAA,CAApB;EAEA;;;;;;;;;;;;EAUA,IAAM6S,SAAQ,GAAG,SAAXA,QAAW,CAACpU,KAAD,EAAQqa,MAAR;QAAgB9Y,2EAAY;EAC3C,MAAI2Y,MAAM,GAAG,EAAb;EACA3Y,EAAAA,IAAI,CAAC8b,GAAL,GAAW9b,IAAI,CAAC8b,GAAL,IAAY;EAAErd,IAAAA,KAAK,EAALA,KAAF;EAASqa,IAAAA,MAAM,EAANA;EAAT,GAAvB;EACA,MAAIiD,SAAJ;EACA,MAAMd,QAAQ,GAAGjb,IAAI,CAACoH,IAAtB;;EACA,MAAI0R,MAAM,KAAKlZ,SAAf,EAA0B;EACxB;EACD;;EACD,MAAI,CAACL,KAAK,CAAC+B,QAAN,CAAewX,MAAf,CAAL,EAA6B;EAC3B,UAAMvZ,KAAK,CAACqE,GAAN,WAAapG,QAAb,gBAAgC,GAAhC,sCAAiEwC,IAAI,CAACd,IAAtE,QAAN;EACD;;EACD,MAAIc,IAAI,CAACd,IAAL,KAAcU,SAAlB,EAA6B;EAC3BI,IAAAA,IAAI,CAACd,IAAL,GAAY,EAAZ;EACD;;;EAED,MAAIc,IAAI,CAACoH,IAAL,KAAcxH,SAAlB,EAA6B;EAC3Bmc,IAAAA,SAAS,GAAG,IAAZ;EACA/b,IAAAA,IAAI,CAACd,IAAL,CAAU2E,IAAV,CAAe7D,IAAI,CAACoH,IAApB;EACApH,IAAAA,IAAI,CAACoH,IAAL,GAAYxH,SAAZ;EACD;;;EAED,MAAIkZ,MAAM,WAAV,EAAoB;EAClB;EACA;EACA,QAAIvZ,KAAK,CAACM,UAAN,CAAiBiZ,MAAM,WAAN,CAAejG,QAAhC,CAAJ,EAA+C;EAC7C8F,MAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcwK,MAAM,WAAN,CAAejG,QAAf,CAAwBpU,KAAxB,EAA+BuB,IAA/B,KAAwC,EAAtD,CAAT;EACD,KAFD,MAEO;EACL2Y,MAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuE,SAAQ,CAACpU,KAAD,EAAQqa,MAAM,WAAd,EAAwB9Y,IAAxB,CAAR,IAAyC,EAAvD,CAAT;EACD;EACF;;EACD,MAAIvB,KAAK,KAAKmB,SAAd,EAAyB;EACvB;EACA,QAAIkZ,MAAM,CAACiC,QAAP,KAAoB,IAApB,IAA4B,CAAC/a,IAAI,CAACgb,YAAtC,EAAoD;EAClDtC,MAAAA,QAAQ,CAACja,KAAD,EAAQ,SAAR,EAAmBuB,IAAnB,EAAyB2Y,MAAzB,CAAR;EACD;;EACD,QAAIoD,SAAJ,EAAe;EACb/b,MAAAA,IAAI,CAACd,IAAL,CAAUoI,GAAV;EACAtH,MAAAA,IAAI,CAACoH,IAAL,GAAY6T,QAAZ;EACD;;EACD,WAAOtC,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD;;EAED+Y,EAAAA,MAAM,GAAGA,MAAM,CAACrK,MAAP,CAAcuN,WAAW,CAACpd,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB,CAAX,IAAoC,EAAlD,CAAT;;EACA,MAAI+b,SAAJ,EAAe;EACb/b,IAAAA,IAAI,CAACd,IAAL,CAAUoI,GAAV;EACAtH,IAAAA,IAAI,CAACoH,IAAL,GAAY6T,QAAZ;EACD;;EACD,SAAOtC,MAAM,CAACzX,MAAP,GAAgByX,MAAhB,GAAyB/Y,SAAhC;EACD,CAhDD;EAmDA;;;EACA,IAAMoc,YAAY,GAAG,UAArB;;EAEA,IAAMC,WAAW,GAAG,SAApB;;EAEA,IAAMC,iBAAiB,GAAG,SAA1B;;EAEA,IAAMjK,cAAY,GAAG,UAArB;;EAEA,IAAMkK,WAAW,GAAG,SAApB;;EAEA,IAAMjK,gBAAc,GAAG,YAAvB;;EAEA,IAAMC,uBAAqB,GAAG,mBAA9B;EAEA;;EACA,IAAMiK,UAAU,GAAG,QAAnB;EACA,IAAMC,oBAAoB,GAAG,mBAA7B;EAEA;;;;;;;EAMA,IAAMhB,mBAAmB,GAAG;EAC1B;;;;;;;;;;;;;;;;EAgBA9U,EAAAA,KAAK,EAAE,eAAC9H,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA,WAA0Bub,MAAM,CAACE,SAAD,EAAYhd,KAAZ,EAAmBqa,MAAnB,EAA2B9Y,IAA3B,CAAhC;EAAA,GAjBmB;;EAmB1B;;;;;;;;;;;;;;EAcA+X,EAAAA,OAAO,EAAE,iBAACtZ,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA;EAEPqb,MAAAA,mBAAmB,CAAClN,OAApB,CAA4B1P,KAA5B,EAAmCqa,MAAnC,EAA2C9Y,IAA3C;EAFO;EAAA,GAjCiB;;EAqC1B;;;;;;;;;;;;;;EAcAgY,EAAAA,MAAM,EAAE,gBAACvZ,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA;EAENqb,MAAAA,mBAAmB,CAAClN,OAApB,CAA4B1P,KAA5B,EAAmCqa,MAAnC,EAA2C9Y,IAA3C;EAFM;EAAA,GAnDkB;;EAuD1B;;;;;;;;;;;;;;;;EAgBAmO,EAAAA,OAAO,EAAE,iBAAC1P,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA,WAAyBub,MAAM,CAACG,WAAD,EAAcjd,KAAd,EAAqBqa,MAArB,EAA6B9Y,IAA7B,CAA/B;EAAA,GAvEiB;;EAyE1B;;;;;;;;;;;;;;;;EAgBAf,EAAAA,MAAM,EAAE,gBAACR,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA,WAAyBub,MAAM,CAACI,UAAD,EAAald,KAAb,EAAoBqa,MAApB,EAA4B9Y,IAA5B,CAA/B;EAAA,GAzFkB;;EA2F1B;;;;;;;;;;;;;;;;EAgBAiY,EAAAA,MAAM,EAAE,gBAACxZ,KAAD,EAAQqa,MAAR,EAAgB9Y,IAAhB;EAAA,WAA0Bub,MAAM,CAACK,UAAD,EAAand,KAAb,EAAoBqa,MAApB,EAA4B9Y,IAA5B,CAAhC;EAAA;EA3GkB,CAA5B;EA8IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiCqBsc;;;;;EAQnB;;;UAAaC,iFAA+B;;;;EAC1C;;EAEAhd,IAAAA,KAAK,CAACqB,MAAN,gCAAmB2b,UAAnB;;EAEA,QAAI,MAAK3W,IAAL,KAAc,QAAlB,EAA4B;EAC1B,YAAK6U,UAAL,GAAkB,MAAKA,UAAL,IAAmB,EAArC;EACAlb,MAAAA,KAAK,CAACI,MAAN,CAAa,MAAK8a,UAAlB,EAA8B,UAAC+B,WAAD,EAAcpV,IAAd;EAC5B,YAAI,EAAEoV,WAAW,YAAYF,MAAzB,CAAJ,EAAsC;EACpC,gBAAK7B,UAAL,CAAgBrT,IAAhB,IAAwB,IAAIkV,MAAJ,CAAWE,WAAX,CAAxB;EACD;EACF,OAJD;EAKD,KAPD,MAOO,IAAI,MAAK5W,IAAL,KAAc,OAAd,IAAyB,MAAK8T,KAA9B,IAAuC,EAAE,MAAKA,KAAL,YAAsB4C,MAAxB,CAA3C,EAA4E;EACjF,YAAK5C,KAAL,GAAa,IAAI4C,MAAJ,CAAW,MAAK5C,KAAhB,CAAb;EACD;;EACD,QAAI,oBAAgB,EAAE,4BAAwB4C,MAA1B,CAApB,EAAuD;EACrD,yBAAe,IAAIA,MAAJ,CAAW,gBAAX,CAAf;EACD;;EACD,KAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4Bjd,OAA5B,CAAoC,UAAAod,iBAAiB;EACnD,UAAI,MAAKA,iBAAL,CAAJ,EAA6B;EAC3B,cAAKA,iBAAL,EAAwBpd,OAAxB,CAAgC,UAACmd,WAAD,EAAcvb,CAAd;EAC9B,cAAI,EAAEub,WAAW,YAAYF,MAAzB,CAAJ,EAAsC;EACpC,kBAAKG,iBAAL,EAAwBxb,CAAxB,IAA6B,IAAIqb,MAAJ,CAAWE,WAAX,CAA7B;EACD;EACF,SAJD;EAKD;EACF,KARD;;EASD;EAED;;;;;;;;;;;;;;4BAUOhb;;;YAAQxB,2EAAY;EACzBA,MAAAA,IAAI,CAACuF,MAAL,GAAcvF,IAAI,CAACuF,MAAL,IAAe,MAA7B;EACAvF,MAAAA,IAAI,CAACwF,MAAL,GAAcxF,IAAI,CAACwF,MAAL,IAAe,MAA7B;EACAxF,MAAAA,IAAI,CAAC0c,QAAL,GAAgB1c,IAAI,CAAC0c,QAAL,IAAiB,QAAjC;EACA1c,MAAAA,IAAI,CAAC2c,KAAL,GAAa3c,IAAI,CAAC2c,KAAL,IAAc,KAAKA,KAAhC;EACA,UAAMlC,UAAU,GAAG,KAAKA,UAAL,IAAmB,EAAtC;EACAlb,MAAAA,KAAK,CAACI,MAAN,CAAa8a,UAAb,EAAyB,UAAC3B,MAAD,EAAS1R,IAAT;EACvBjJ,QAAAA,MAAM,CAAC4R,cAAP,CAAsBvO,MAAtB,EAA8B4F,IAA9B,EAAoC,MAAI,CAACwV,cAAL,CAAoBxV,IAApB,EAA0B0R,MAA1B,EAAkC9Y,IAAlC,CAApC;EACD,OAFD;EAGD;EAED;;;;;;;;;;oCAOewB;EACb,UAAI,CAACA,MAAL,EAAa;EACX;EACD;;EACD,UAAMiZ,UAAU,GAAG,KAAKA,UAAL,IAAmB,EAAtC;EACA,UAAMoC,MAAM,GAAGtd,KAAK,CAACM,UAAN,CAAiB2B,MAAM,CAACoI,GAAxB,KAAgCrK,KAAK,CAACM,UAAN,CAAiB2B,MAAM,CAAC8I,IAAxB,CAA/C;EACA/K,MAAAA,KAAK,CAACI,MAAN,CAAa8a,UAAb,EAAyB,UAAC3B,MAAD,EAAS1R,IAAT;EACvB,YAAI0R,MAAM,CAAC/U,cAAP,CAAsB,SAAtB,KAAoCxE,KAAK,CAAC4H,GAAN,CAAU3F,MAAV,EAAkB4F,IAAlB,MAA4BxH,SAApE,EAA+E;EAC7E,cAAIid,MAAJ,EAAY;EACVrb,YAAAA,MAAM,CAACoI,GAAP,CAAWxC,IAAX,EAAiB7H,KAAK,CAACgK,SAAN,CAAgBuP,MAAM,WAAtB,CAAjB,EAAkD;EAAE9E,cAAAA,MAAM,EAAE;EAAV,aAAlD;EACD,WAFD,MAEO;EACLzU,YAAAA,KAAK,CAACqK,GAAN,CAAUpI,MAAV,EAAkB4F,IAAlB,EAAwB7H,KAAK,CAACgK,SAAN,CAAgBuP,MAAM,WAAtB,CAAxB;EACD;EACF;;EACD,YAAIA,MAAM,CAAClT,IAAP,KAAgB,QAAhB,IAA4BkT,MAAM,CAAC2B,UAAvC,EAAmD;EACjD,cAAIoC,MAAJ,EAAY;EACV,gBAAMC,IAAI,GAAGtb,MAAM,CAACiJ,IAAP,CAAY,YAAZ,CAAb;;EACAjJ,YAAAA,MAAM,CAAC8I,IAAP,CAAY,YAAZ,EAA0B,IAA1B;;EACA/K,YAAAA,KAAK,CAACqK,GAAN,CAAUpI,MAAV,EAAkB4F,IAAlB,EAAwB7H,KAAK,CAAC4H,GAAN,CAAU3F,MAAV,EAAkB4F,IAAlB,KAA2B,EAAnD,EAAuD;EAAE4M,cAAAA,MAAM,EAAE;EAAV,aAAvD;;EACAxS,YAAAA,MAAM,CAAC8I,IAAP,CAAY,YAAZ,EAA0BwS,IAA1B;EACD,WALD,MAKO;EACLvd,YAAAA,KAAK,CAACqK,GAAN,CAAUpI,MAAV,EAAkB4F,IAAlB,EAAwB7H,KAAK,CAAC4H,GAAN,CAAU3F,MAAV,EAAkB4F,IAAlB,KAA2B,EAAnD;EACD;;EACD0R,UAAAA,MAAM,CAACiE,aAAP,CAAqBxd,KAAK,CAAC4H,GAAN,CAAU3F,MAAV,EAAkB4F,IAAlB,CAArB;EACD;EACF,OAnBD;EAoBD;EAED;;;;;;;;;;;;;;;;;;qCAegBA,MAAM0R,QAAQ9Y;EAC5B,UAAM6B,UAAU,GAAQ;EACtB;EACAmb,QAAAA,YAAY,EAAE,IAFQ;EAGtB;EACA;EACAjb,QAAAA,UAAU,EAAE+W,MAAM,CAAC/W,UAAP,KAAsBnC,SAAtB,GAAkC,IAAlC,GAAyC,CAAC,CAACkZ,MAAM,CAAC/W,UALxC;EAMtBoF,QAAAA,GANsB;EAOpB,iBAAO,KAAKsD,IAAL,CAAUwS,OAAV,CAAP;EACD,SARqB;EAStBrT,QAAAA,GATsB,eASjBnL,KATiB;;;EAUpB;EACA,cAAMgM,IAAI,GAAG,KAAKlF,MAAL,CAAb;EACA,cAAM+E,IAAI,GAAG,KAAK9E,MAAL,CAAb;EACA,cAAMkF,MAAM,GAAG,KAAKgS,QAAL,CAAf;;EAEA,cAAI,CAACjS,IAAI,CAACyH,gBAAD,CAAT,EAA2B;EACzB,gBAAMyG,MAAM,GAAGG,MAAM,CAACjG,QAAP,CAAgBpU,KAAhB,EAAuB;EAAES,cAAAA,IAAI,EAAE,CAACkI,IAAD;EAAR,aAAvB,CAAf;;EACA,gBAAIuR,MAAJ,EAAY;EACV;EACA;EACA,kBAAMuE,KAAK,GAAG,IAAIrF,WAAJ,CAAgBwE,oBAAhB,CAAd;EACAa,cAAAA,KAAK,CAACvE,MAAN,GAAeA,MAAf;EACA,oBAAMuE,KAAN;EACD;EACF;EAED;;;EACA,cAAIP,KAAK,IAAI,CAAClS,IAAI,CAACwH,cAAD,CAAlB,EAAkC;EAChC;EACA;EACA,gBAAMyB,QAAQ,GAAGjJ,IAAI,CAAC2H,YAAD,CAArB;;EACA,gBAAM+K,OAAO,GAAG1S,IAAI,CAACwS,OAAD,CAApB;;EACA,gBAAIG,QAAQ,GAAG3S,IAAI,CAACuR,YAAD,CAAnB;;EACA,gBAAIvZ,OAAO,GAAGgI,IAAI,CAACwR,WAAD,CAAlB;;EAEA,gBAAI,CAACmB,QAAL,EAAe;EACb;EACA3a,cAAAA,OAAO,GAAG,EAAV;EACD,aAX+B;;;EAchC,gBAAMlC,KAAK,GAAGkC,OAAO,CAAC3C,OAAR,CAAgBsH,IAAhB,CAAd;;EACA,gBAAI+V,OAAO,KAAK1e,KAAZ,IAAqB8B,KAAK,KAAK,CAAC,CAApC,EAAuC;EACrCkC,cAAAA,OAAO,CAACoB,IAAR,CAAauD,IAAb;EACD;;EACD,gBAAIsM,QAAQ,KAAKjV,KAAjB,EAAwB;EACtB,kBAAI8B,KAAK,IAAI,CAAb,EAAgB;EACdkC,gBAAAA,OAAO,CAACzB,MAAR,CAAeT,KAAf,EAAsB,CAAtB;EACD;EACF,aAtB+B;;;EAwBhC,gBAAI,CAACkC,OAAO,CAACvB,MAAb,EAAqB;EACnBkc,cAAAA,QAAQ,GAAG,KAAX;;EACA1S,cAAAA,MAAM,CAACsR,YAAD,CAAN;;EACAtR,cAAAA,MAAM,CAACuR,WAAD,CAAN,CAHmB;;;EAKnB,kBAAIxR,IAAI,CAAC0R,WAAD,CAAR,EAAuB;EACrBkB,gBAAAA,YAAY,CAAC5S,IAAI,CAAC0R,WAAD,CAAL,CAAZ;;EACAzR,gBAAAA,MAAM,CAACyR,WAAD,CAAN;EACD;EACF,aAjC+B;;;EAmChC,gBAAI,CAACiB,QAAD,IAAa3a,OAAO,CAACvB,MAAzB,EAAiC;EAC/BoJ,cAAAA,IAAI,CAAC2R,WAAD,EAAcxZ,OAAd,CAAJ;;EACA6H,cAAAA,IAAI,CAAC0R,YAAD,EAAe,IAAf,CAAJ,CAF+B;EAI/B;EACA;;;EACA1R,cAAAA,IAAI,CACF6R,WADE,EAEFmB,UAAU,CAAC;EACT;EACA;EACA;EACA5S,gBAAAA,MAAM,CAACuR,WAAD,CAAN;;EACAvR,gBAAAA,MAAM,CAACyR,WAAD,CAAN;;EACAzR,gBAAAA,MAAM,CAACsR,YAAD,CAAN;;;EAEA,oBAAI,CAACvR,IAAI,CAAC2R,UAAD,CAAT,EAAuB;EACrB,sBAAInb,CAAJ;;EACA,uBAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGwB,OAAO,CAACvB,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;EACnC,oBAAA,MAAI,CAACyE,IAAL,CAAU,YAAYjD,OAAO,CAACxB,CAAD,CAA7B,EAAkC,MAAlC,EAAwC1B,KAAK,CAAC4H,GAAN,CAAU,MAAV,EAAgB1E,OAAO,CAACxB,CAAD,CAAvB,CAAxC;EACD;;EAED,sBAAM8S,OAAO,GAAGxU,KAAK,CAAC8C,WAAN,qBAAqB+E,IAArB,EAA4B3I,KAA5B,uBAAwC2I,IAAxC,EAA+C+V,OAA/C,EAAhB;;EAEA,sBAAI1S,IAAI,CAAC0H,uBAAD,CAAR,EAAiC;EAC/B,wBAAMoL,YAAY,GAAGhe,KAAK,CAACgK,SAAN,CAAgBwK,OAAhB,CAArB;EACAwJ,oBAAAA,YAAY,CAACC,SAAb,GAAyB,IAAIra,IAAJ,GAAWC,OAAX,EAAzB;;EACA,wBAAIqa,aAAa,GAAGhT,IAAI,CAACyR,iBAAD,CAAxB;;EACA,wBAAI,CAACuB,aAAL,EAAoBnT,IAAI,CAAC4R,iBAAD,EAAqBuB,aAAa,GAAG,EAArC,CAAJ;EACpBA,oBAAAA,aAAa,CAAC5Z,IAAd,CAAmB0Z,YAAnB;EACD;;EACD,kBAAA,MAAI,CAAC7X,IAAL,CAAU,QAAV,EAAoB,MAApB,EAA0BqO,OAA1B;EACD;;EACDrJ,gBAAAA,MAAM,CAAC0R,UAAD,CAAN;EACD,eA1BS,EA0BP,CA1BO,CAFR,CAAJ;EA8BD;EACF;;EACD9R,UAAAA,IAAI,CAAC2S,OAAD,EAAUxe,KAAV,CAAJ;;EACA,iBAAOA,KAAP;EACD;EAtGqB,OAAxB;;EAyGA,UAAMwe,OAAO,mBAAY7V,IAAZ,CAAb;EACA,UAAMgL,YAAY,sBAAehL,IAAf,CAAlB;EACA,UAAM7B,MAAM,GAAGvF,IAAI,CAACuF,MAApB;EACA,UAAMC,MAAM,GAAGxF,IAAI,CAACwF,MAApB;EACA,UAAMkX,QAAQ,GAAG1c,IAAI,CAAC0c,QAAtB;EACA,UAAMC,KAAK,GAAGpd,KAAK,CAAC6I,SAAN,CAAgBpI,IAAI,CAAC2c,KAArB,IAA8B3c,IAAI,CAAC2c,KAAnC,GAA2C7D,MAAM,CAAC6D,KAAhE;;EAEA,UAAIpd,KAAK,CAACM,UAAN,CAAiBiZ,MAAM,CAAC3R,GAAxB,CAAJ,EAAkC;EAChC,YAAMuW,WAAW,GAAG7b,UAAU,CAACsF,GAA/B;;EACAtF,QAAAA,UAAU,CAACsF,GAAX,GAAiB;EACf,iBAAO2R,MAAM,CAAC3R,GAAP,CAAWtI,IAAX,CAAgB,IAAhB,EAAsB6e,WAAtB,CAAP;EACD,SAFD;EAGD;;EAED,UAAIne,KAAK,CAACM,UAAN,CAAiBiZ,MAAM,CAAClP,GAAxB,CAAJ,EAAkC;EAChC,YAAM+T,WAAW,GAAG9b,UAAU,CAAC+H,GAA/B;;EACA/H,QAAAA,UAAU,CAAC+H,GAAX,GAAiB,UAAUnL,KAAV;EACf,iBAAOqa,MAAM,CAAClP,GAAP,CAAW/K,IAAX,CAAgB,IAAhB,EAAsBJ,KAAtB,EAA6Bkf,WAA7B,CAAP;EACD,SAFD;EAGD;;EAED,aAAO9b,UAAP;EACD;EAED;;;;;;;;;;;;2BASMpD,OAAOuB;;;EACX,UAAIvB,KAAK,KAAKmB,SAAd,EAAyB;EACvB;EACD;;EACD,UAAI,KAAKgG,IAAL,KAAc,QAAlB,EAA4B;EAC1B,YAAMlD,IAAI,GAAG,EAAb;EACA,YAAM+X,UAAU,GAAG,KAAKA,UAAxB;;EACA,YAAIA,UAAJ,EAAgB;EACdlb,UAAAA,KAAK,CAACI,MAAN,CAAa8a,UAAb,EAAyB,UAAC+B,WAAD,EAAcpV,IAAd;EACvB1E,YAAAA,IAAI,CAAC0E,IAAD,CAAJ,GAAaoV,WAAW,CAACnT,IAAZ,CAAiB5K,KAAK,CAAC2I,IAAD,CAAtB,CAAb;EACD,WAFD;EAGD;;EACD,YAAI,eAAJ,EAAkB;EAChB7H,UAAAA,KAAK,CAACqB,MAAN,CAAa8B,IAAb,EAAmB,gBAAa2G,IAAb,CAAkB5K,KAAlB,CAAnB;EACD,SAVyB;;;EAY1B,YAAI,KAAKic,oBAAT,EAA+B;EAC7B,eAAK,IAAMpb,GAAX,IAAkBb,KAAlB,EAAyB;EACvB,gBAAI,CAACgc,UAAU,CAACnb,GAAD,CAAf,EAAsB;EACpBoD,cAAAA,IAAI,CAACpD,GAAD,CAAJ,GAAYC,KAAK,CAACgK,SAAN,CAAgB9K,KAAK,CAACa,GAAD,CAArB,CAAZ;EACD;EACF;EACF;;EACD,eAAOoD,IAAP;EACD,OApBD,MAoBO,IAAI,KAAKkD,IAAL,KAAc,OAAlB,EAA2B;EAChC,eAAOnH,KAAK,CAACiD,GAAN,CAAU,UAAAuG,IAAI;EACnB,cAAM2V,KAAK,GAAG,MAAI,CAAClE,KAAL,GAAa,MAAI,CAACA,KAAL,CAAWrQ,IAAX,CAAgBpB,IAAhB,CAAb,GAAqC,EAAnD;;EACA,cAAI,MAAI,WAAR,EAAkB;EAChB1I,YAAAA,KAAK,CAACqB,MAAN,CAAagd,KAAb,EAAoB,MAAI,WAAJ,CAAavU,IAAb,CAAkBpB,IAAlB,CAApB;EACD;;EACD,iBAAO2V,KAAP;EACD,SANM,CAAP;EAOD;;EACD,aAAOre,KAAK,CAACgK,SAAN,CAAgB9K,KAAhB,CAAP;EACD;EAED;;;;;;;;;;;;+BASUA,OAAOuB;EACf,aAAO6S,SAAQ,CAACpU,KAAD,EAAQ,IAAR,EAAcuB,IAAd,CAAf;EACD;;;;IAtSiC2K;EAwS3B2R,cAAA,GAAUd,OAAV;EACAc,gBAAA,GAAYb,SAAZ;EACAa,kBAAA,GAAcZ,WAAd;EACAY,iBAAA,GAAaX,UAAb;EACAW,iBAAA,GAAaV,UAAb;EACAU,0BAAA,GAAsBjB,mBAAtB;EACAiB,YAAA,GAAQxE,KAAR;EACAwE,eAAA,GAAWzJ,SAAX;EACAyJ,yBAAA,GAA0BrD,kBAA1B;;MC3wCI4E,iBAAb;EAAA;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;EAAA,kCACiBrX,MADjB;EAEI,aAAOjH,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKqJ,UAAvB,CAAP;EACD;EAHH;EAAA;EAAA,mCAKkBrJ,MALlB,EAK0B0J,aAL1B;EAMI3Q,MAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkB,KAAKqJ,UAAvB,EAAmCtQ,KAAK,CAAC4H,GAAN,CAAU+I,aAAV,EAAyB,KAAKrP,WAAL,GAAmBoP,WAA5C,CAAnC;EACD;EAPH;EAAA;EAAA,yCASwBzJ,MATxB;EAUI;EACA,UAAI,CAACA,MAAL,EAAa;EACX;EACD;;EACD,UAAM0K,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKqJ,UAAvB,CAAlB;;EACA,UAAIqB,SAAS,KAAKtR,SAAd,IAA2BsR,SAAS,KAAK,IAA7C,EAAmD;EACjD,eAAO,KAAKE,iBAAL,CAAuBjK,GAAvB,CAA2B+J,SAA3B,CAAP;EACD;EACF;EAlBH;EAAA;EAAA;EAqBI,aAAO,IAAP;EACD;EAtBH;EAAA;EAAA,uCAwBsBzP,KAxBtB,EAwB6BzB,IAxB7B;;;EAyBI,UAAMwR,YAAY,GAAG,KAAKb,aAAL,CAAmBlP,KAAnB,CAArB;EAEA,aAAO,KAAKkQ,YAAL,CAAkBH,YAAlB,EAAgCxR,IAAhC,EAAsC4R,IAAtC,CAA2C,UAAApL,MAAM;EACtD,QAAA,KAAI,CAAC8K,aAAL,CAAmB7P,KAAnB,EAA0B+E,MAA1B;EACD,OAFM,CAAP;EAGD;EA9BH;EAAA;EAAA;EAiCI,YAAM,IAAInB,KAAJ,CAAU,kFAAV,CAAN;EACD;EAlCH;;EAAA;EAAA,EAAuCiK,QAAvC;EAoCSuO,2BAAA,GAAY,WAAZ;;MCpCIC,eAAb;EAAA;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;EAAA,oCAGmBnO,OAHnB,EAG4B3P,IAH5B;EAII,2FAAsB2P,OAAtB,EAA+B3P,IAA/B;;YAEQwT,YAAuCxT,KAAvCwT;YAAWC,cAA4BzT,KAA5ByT;YAAa5D,aAAe7P,KAAf6P;;EAEhC,UAAI,CAACA,UAAD,IAAe,CAAC2D,SAAhB,IAA6B,CAACC,WAAlC,EAA+C;EAC7C,cAAMlU,KAAK,CAACqE,GAAN,CAAU,cAAV,EAA0B,yCAA1B,EAAqE,GAArE,EAA0E,QAA1E,EAAoFiM,UAApF,CAAN;EACD;EACF;EAXH;EAAA;EAAA,mCAakBrJ,MAblB;EAcI,UAAMuX,cAAc,GAAG,KAAKlO,UAAL,IAAmB,KAAK4D,WAA/C;EACA,aAAO,CAAC,EAAEsK,cAAc,IAAK,KAAKvK,SAAL,IAAkBjU,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKgN,SAAvB,CAAvC,CAAR;EACD;EAhBH;EAAA;EAAA,+BAkBchN,MAlBd,EAkBsB4J,cAlBtB;;;EAmBI,UAAMgB,iBAAiB,GAAG,KAAKA,iBAA/B;EACA,UAAMC,eAAe,GAAG,KAAKA,eAA7B;EACA,UAAMxB,UAAU,GAAG,KAAKA,UAAxB;EACA,UAAMsB,OAAO,GAAG,KAAKC,iBAAL,CAAuBD,OAAvB,EAAhB;EAEA,aAAOf,cAAc,CAAC1O,GAAf,CAAmB,UAAAwO,aAAa;EACrC,YAAMgB,SAAS,GAAGE,iBAAiB,CAACmF,QAAlB,CAA2BrG,aAA3B,CAAlB;;EAEA,YACGgB,SAAS,KAAKtR,SAAd,IAA2BuR,OAAO,CAACrR,OAAR,CAAgBoQ,aAAhB,MAAmC,CAAC,CAAhE,IACAA,aAAa,KAAKkB,iBAAiB,CAACjK,GAAlB,CAAsB+J,SAAtB,CAFpB,EAGE;EACA,cAAIrB,UAAJ,EAAgB;EACd;EACA,YAAA,KAAI,CAACyB,aAAL,CAAmB9K,MAAnB,EAA2B0J,aAA3B;EACD;;EACD,cAAImB,eAAJ,EAAqB;EACnBnB,YAAAA,aAAa,GAAGkB,iBAAiB,CAACR,GAAlB,CAAsBV,aAAtB,CAAhB;EACD;EACF;;EAED,eAAOA,aAAP;EACD,OAjBM,CAAP;EAkBD;EA1CH;EAAA;EAAA,yCA4CwB1J,MA5CxB;;;EA6CI,UAAM+K,EAAE,GAAGhS,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKE,MAAL,CAAYuJ,WAA9B,CAAX;EACA,UAAM+N,GAAG,GAAG,KAAKxK,SAAL,GAAiBjU,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB,KAAKgN,SAAvB,CAAjB,GAAqD,IAAjE;EACA,UAAI/C,OAAJ;;EAEA,UAAIc,EAAE,KAAK3R,SAAP,IAAoB,KAAKiQ,UAA7B,EAAyC;EACvCY,QAAAA,OAAO,GAAG,KAAKwN,6BAAL,CAAmC1M,EAAnC,CAAV;EACD,OAFD,MAEO,IAAI,KAAKiC,SAAL,IAAkBwK,GAAtB,EAA2B;EAChCvN,QAAAA,OAAO,GAAG,KAAKyN,4BAAL,CAAkCF,GAAlC,CAAV;EACD,OAFM,MAEA,IAAIzM,EAAE,KAAK3R,SAAP,IAAoB,KAAK6T,WAA7B,EAA0C;EAC/ChD,QAAAA,OAAO,GAAG,KAAK0N,8BAAL,CAAoC5M,EAApC,CAAV;EACD;;EAED,gBAAId,iDAASvP,MAAb,EAAqB;EACnB,eAAOuP,OAAP;EACD;EACF,KA5DH;;EAAA;EAAA;EAAA,iDA+DgCuN,GA/DhC;EAgEI,aAAO,KAAK5M,iBAAL,CAAuB5M,MAAvB,CAA8B;EACnC4G,QAAAA,KAAK,sBACF,KAAKgG,iBAAL,CAAuB1K,MAAvB,CAA8BuJ,WAD5B,EAC0C;EAC3C,gBAAI+N;EADuC,SAD1C;EAD8B,OAA9B,CAAP;EAOD,KAvEH;;EAAA;EAAA;EAAA,mDA0EkCzM,EA1ElC;EA2EI,aAAO,KAAKH,iBAAL,CAAuB5M,MAAvB,CAA8B;EACnC4G,QAAAA,KAAK,sBACF,KAAKqI,WADH,EACiB;EAClBxE,UAAAA,QAAQ,EAAEsC;EADQ,SADjB;EAD8B,OAA9B,CAAP;EAOD;EAlFH;EAAA;EAAA;EAqFI,aAAO,CAAC,CAAC,KAAKiC,SAAP,IAAoB,KAAKA,SAAL,CAAetS,MAAf,GAAwB,CAAnD;EACD;EAtFH;EAAA;EAAA;EAyFI,aAAO,CAAC,CAAC,KAAK2O,UAAd;EACD;EA1FH;EAAA;EAAA,uCA4FsBpO,KA5FtB,EA4F6BzB,IA5F7B;;;EA6FI,UAAMwR,YAAY,GAAG,KAAKb,aAAL,CAAmBlP,KAAnB,CAArB;EACA,UAAM2c,cAAc,GAAG,KAAKvd,WAAL,GAAmBoP,WAA1C;EAEA,aAAO,KAAK0B,YAAL,CAAkBH,YAAlB,EAAgCxR,IAAhC,EAAsC4R,IAAtC,CAA2C,UAAAnB,OAAO;EACvDlR,QAAAA,KAAK,CAACqK,GAAN,CACEnI,KADF,EAEE,MAAI,CAAC+R,SAFP,EAGE/C,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAAA,iBAAIjH,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB4X,cAAlB,CAAJ;EAAA,SAAlB,CAHF;EAKD,OANM,CAAP;EAOD;EAvGH;EAAA;EAAA,iCAyGgB3c,KAzGhB,EAyGuBzB,IAzGvB;EA0GI,aAAO,KAAKa,WAAL,GAAmBwd,UAAnB,CAA8B5c,KAA9B,EAAqCzB,IAArC,CAAP;EACD;EA3GH;;EAAA;EAAA,EAAqCsP,QAArC;EA6GSwO,yBAAA,GAAY,SAAZ;;MC7GIQ,cAAb;EAAA;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;EAAA,yCACwB/O,aADxB,EACuC/I,MADvC;;;EAEI,UAAM+P,QAAQ,GAAGhX,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkB+I,aAAa,CAACU,WAAhC,CAAjB;EACA,UAAMQ,OAAO,GAAG,KAAKwN,6BAAL,CAAmC1H,QAAnC,CAAhB;;EAEA,gBAAI9F,iDAASvP,MAAb,EAAqB;EACnB,eAAOuP,OAAO,CAAC,CAAD,CAAd;EACD;EACF;EARH;EAAA;EAAA;EAWI,aAAO,IAAP;EACD;EAZH;;EAAA;EAAA,EAAoCnB,QAApC;EAcSgP,wBAAA,GAAY,QAAZ;;ECZT,CAACT,iBAAD,EAAoBC,eAApB,EAAqCQ,cAArC,EAAqDjf,OAArD,CAA6D,UAAAkf,YAAY;EACvEjP,EAAAA,QAAQ,CAACiP,YAAY,CAAC9O,SAAd,CAAR,GAAmC,UAACE,OAAD,EAAUH,OAAV;EAAA,WAAsB,IAAI+O,YAAJ,CAAiB5O,OAAjB,EAA0BH,OAA1B,CAAtB;EAAA,GAAnC;EACD,CAFD;;ECDA;;;;;;;;;;;;;;AAaA,WAAgBgP,UAAW7O,SAAS3P;EAClC,SAAO,UAAA0G,MAAM;EACX4I,IAAAA,QAAQ,CAACkP,SAAT,CAAmB7O,OAAnB,EAA4B3P,IAA5B,EAAkCye,QAAlC,CAA2C/X,MAA3C;EACD,GAFD;EAGD;EAED;;;;;;;;;;;;;;AAaA,WAAgBgY,QAAS/O,SAAS3P;EAChC,SAAO,UAAA0G,MAAM;EACX4I,IAAAA,QAAQ,CAACoP,OAAT,CAAiB/O,OAAjB,EAA0B3P,IAA1B,EAAgCye,QAAhC,CAAyC/X,MAAzC;EACD,GAFD;EAGD;EAED;;;;;;;;;;;;;;AAaA,WAAgBiY,OAAQhP,SAAS3P;EAC/B,SAAO,UAAA0G,MAAM;EACX4I,IAAAA,QAAQ,CAACqP,MAAT,CAAgBhP,OAAhB,EAAyB3P,IAAzB,EAA+Bye,QAA/B,CAAwC/X,MAAxC;EACD,GAFD;EAGD;;EClDD,IAAMlJ,QAAM,GAAG,QAAf;EACA,IAAMohB,kBAAkB,GAAG,CAAC,cAAD,EAAiB,kBAAjB,CAA3B;EACA,IAAMC,eAAe,GAAG,CAAC,cAAD,EAAiB,kBAAjB,EAAqC,cAArC,EAAqD,iBAArD,EAAwE,kBAAxE,CAAxB;;EAEA,SAASC,UAAT,CAAqBrQ,GAArB;EACE,SAAO;;;wCAAavJ;EAAAA,MAAAA;;;;;EAClB,QAAMlF,IAAI,GAAGkF,IAAI,CAACA,IAAI,CAAChE,MAAL,GAAcuN,GAAf,CAAjB;EACA,QAAMtC,EAAE,GAAGnM,IAAI,CAACmM,EAAhB;EACA,SAAKxD,GAAL,cAASwD,EAAT,SAAgBjH,IAAhB;;EAEA,QAAI0Z,kBAAkB,CAAC9e,OAAnB,CAA2BqM,EAA3B,MAAmC,CAAC,CAApC,IAAyCnM,IAAI,CAAC+c,aAAL,KAAuB,KAApE,EAA2E;EACzE,UAAMjE,MAAM,GAAG,KAAKiG,SAAL,EAAf;;EACA,gBAAIjG,gDAAQiE,aAAZ,EAA2B;EACzB,YAAIiC,SAAS,GAAG9Z,IAAI,CAAC,CAAD,CAApB;;EACA,YAAI,CAAC3F,KAAK,CAAC0D,OAAN,CAAc+b,SAAd,CAAL,EAA+B;EAC7BA,UAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;EACD;;EACDA,QAAAA,SAAS,CAAC3f,OAAV,CAAkB,UAAAmH,MAAM;EACtBsS,UAAAA,MAAM,CAACiE,aAAP,CAAqBvW,MAArB;EACD,SAFD;EAGD;EACF;;;EAGD,QAAIqY,eAAe,CAAC/e,OAAhB,CAAwBqM,EAAxB,MAAgC,CAAC,CAAjC,IAAsC,CAACnM,IAAI,CAACsS,UAAhD,EAA4D;EAC1D;EACA,UAAM2M,oBAAoB,GAAGjf,IAAI,CAACgb,YAAlC,CAF0D;;EAK1D,UAAI7O,EAAE,CAACrM,OAAH,CAAW,cAAX,MAA+B,CAA/B,IAAoCE,IAAI,CAACgb,YAAL,KAAsBpb,SAA9D,EAAyE;EACvEI,QAAAA,IAAI,CAACgb,YAAL,GAAoB,IAApB;EACD;;EACD,UAAMrC,MAAM,GAAG,KAAK9F,QAAL,CAAc3N,IAAI,CAACiH,EAAE,KAAK,cAAP,GAAwB,CAAxB,GAA4B,CAA7B,CAAlB,EAAmD5M,KAAK,CAAC8J,IAAN,CAAWrJ,IAAX,EAAiB,CAAC,cAAD,CAAjB,CAAnD,CAAf,CAR0D;;EAW1DA,MAAAA,IAAI,CAACgb,YAAL,GAAoBiE,oBAApB,CAX0D;;EAc1D,UAAItG,MAAJ,EAAY;EACV,YAAM/U,GAAG,GAAG,IAAIiU,WAAJ,CAAgB,mBAAhB,CAAZ;EACAjU,QAAAA,GAAG,CAAC+U,MAAJ,GAAaA,MAAb;EACA,eAAOpZ,KAAK,CAACiK,MAAN,CAAa5F,GAAb,CAAP;EACD;EACF;;;EAGD,QAAI5D,IAAI,CAACkf,MAAL,IAAgBlf,IAAI,CAACkf,MAAL,KAAgBtf,SAAhB,IAA6B,KAAKsf,MAAtD,EAA+D;EAC7D5B,MAAAA,UAAU,CAAC;EACT,QAAA,KAAI,CAAC5X,IAAL,OAAA,KAAI,GAAMyG,EAAN,SAAajH,IAAb,EAAJ;EACD,OAFS,CAAV;EAGD;EACF,GA9CD;EA+CD;;;EAGD,IAAMga,MAAM,GAAGJ,UAAU,CAAC,CAAD,CAAzB;EACA,IAAMK,OAAO,GAAGL,UAAU,CAAC,CAAD,CAA1B;EAGA;;EACA,IAAMM,iBAAiB,GAAG;EACxBC,EAAAA,KAAK,EAAE;EACLC,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CADL;EAELpU,IAAAA,IAAI,EAAE,IAFD;EAGL4M,IAAAA,KAAK,EAAE;EAHF,GADiB;EAMxByH,EAAAA,OAAO,EAAE;EACPD,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CADH;EAEPpU,IAAAA,IAAI,EAAE,IAFC;EAGP4M,IAAAA,KAAK,EAAE;EAHA,GANe;EAWxB0H,EAAAA,UAAU,EAAE;EACVF,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CADA;EAEVpU,IAAAA,IAAI,EAAE,IAFI;EAGV4M,IAAAA,KAAK,EAAE;EAHG,GAXY;EAgBxB2H,EAAAA,IAAI,EAAE;EACJH,IAAAA,QAAQ,EAAE,CAAC1f,SAAD,EAAY,EAAZ,CADN;EAEJkY,IAAAA,KAAK,EAAE;EAFH,GAhBkB;EAoBxB4H,EAAAA,OAAO,EAAE;EACPJ,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CADH;EAEPxH,IAAAA,KAAK,EAAE;EAFA,GApBe;EAwBxB6H,EAAAA,GAAG,EAAE;EACHL,IAAAA,QAAQ,EAAE,CAAC1f,SAAD,EAAY,EAAZ,EAAgB,EAAhB,CADP;EAEHsL,IAAAA,IAAI,EAAE,IAFH;EAGH4M,IAAAA,KAAK,EAAE;EAHJ,GAxBmB;EA6BxB8H,EAAAA,MAAM,EAAE;EACNC,IAAAA,WADM,uBACOnZ,MADP,EACe6K,EADf,EACmB9P,KADnB,EAC0BzB,IAD1B;EAEJ,aAAO,CAACuR,EAAD,EAAK7K,MAAM,CAAC+L,MAAP,CAAchR,KAAd,EAAqBzB,IAArB,CAAL,EAAiCA,IAAjC,CAAP;EACD,KAHK;EAIN8f,IAAAA,YAAY,EAAE,CAJR;EAKNR,IAAAA,QAAQ,EAAE,CAAC1f,SAAD,EAAY,EAAZ,EAAgB,EAAhB,CALJ;EAMNkY,IAAAA,KAAK,EAAE;EAND,GA7BgB;EAqCxBiI,EAAAA,SAAS,EAAE;EACTF,IAAAA,WADS,uBACInZ,MADJ,EACYjF,KADZ,EACmBqM,KADnB,EAC0B9N,IAD1B;EAEP,aAAO,CAAC0G,MAAM,CAAC+L,MAAP,CAAchR,KAAd,EAAqBzB,IAArB,CAAD,EAA6B8N,KAA7B,EAAoC9N,IAApC,CAAP;EACD,KAHQ;EAIT8f,IAAAA,YAAY,EAAE,CAJL;EAKTR,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CALD;EAMTxH,IAAAA,KAAK,EAAE;EANE,GArCa;EA6CxBkI,EAAAA,UAAU,EAAE;EACVH,IAAAA,WADU,uBACGnZ,MADH,EACW+J,OADX,EACoBzQ,IADpB;EAER,aAAO,CAACyQ,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAAA,eAAIE,MAAM,CAAC+L,MAAP,CAAcjM,MAAd,EAAsBxG,IAAtB,CAAJ;EAAA,OAAlB,CAAD,EAAqDA,IAArD,CAAP;EACD,KAHS;EAIV8f,IAAAA,YAAY,EAAE,CAJJ;EAKVR,IAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,CALA;EAMVxH,IAAAA,KAAK,EAAE;EANG;EA7CY,CAA1B;EAoLA,IAAMmI,eAAe,GAAe;EAClCC,EAAAA,SAAS,EAAE,EADuB;EAElCnD,EAAAA,aAAa,EAAE,IAFmB;EAGlCoD,EAAAA,WAAW,EAAE,IAHqB;EAIlCC,EAAAA,cAAc,EAAE,MAJkB;EAKlCnQ,EAAAA,WAAW,EAAE,IALqB;EAMlCsC,EAAAA,iBAAiB,EAAE,IANe;EAOlC2M,EAAAA,MAAM,EAAE,IAP0B;EAQlC5M,EAAAA,UAAU,EAAE,KARsB;EASlCgB,EAAAA,GAAG,EAAE,KAT6B;EAUlCd,EAAAA,aAAa,EAAE;EAVmB,CAApC;EAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmDqB6N;;;;;EA4HnB;;;UAAargB,2EAAmB;;;;EAC9B;EAtBF;;;;;;;;;EAQA,2BAAA,GAAmBof,iBAAnB;EA2EA;;;;;;;;;;;;EAWA,qBAAA,GAAaD,OAAb;EAEA;;;;;;;;;;;;EAWA,sBAAA,GAAcA,OAAd;EAEA;;;;;;;;;;;;EAWA,0BAAA,GAAkBA,OAAlB;EAEA;;;;;;;;;;;;EAWA,uBAAA,GAAeA,OAAf;EAEA;;;;;;;;;;;;;EAYA,0BAAA,GAAkBA,OAAlB;EAEA;;;;;;;;;;;;EAWA,oBAAA,GAAYA,OAAZ;EAEA;;;;;;;;;;;;EAWA,uBAAA,GAAeA,OAAf;EAEA;;;;;;;;;;;;EAWA,mBAAA,GAAWA,OAAX;EAEA;;;;;;;;;;;;;EAYA,sBAAA,GAAcA,OAAd;EAEA;;;;;;;;;;;;;EAYA,yBAAA,GAAiBA,OAAjB;EAEA;;;;;;;;;;;;EAWA,0BAAA,GAAkBA,OAAlB;EAEA;;;;;;;;;;;EAUA,uBAAA,GAAeD,MAAf;EAEA;;;;;;;;;;;EAUA,2BAAA,GAAmBA,MAAnB;EAEA;;;;;;;;;;;EAUA,sBAAA,GAAcA,MAAd;EAEA;;;;;;;;;;;EAUA,wBAAA,GAAgBA,MAAhB;EAEA;;;;;;;;;;;EAUA,2BAAA,GAAmBA,MAAnB;EAEA;;;;;;;;;;;EAUA,qBAAA,GAAaA,MAAb;EAEA;;;;;;;;;;;EAUA,wBAAA,GAAgBA,MAAhB;EAEA;;;;;;;;;;;;EAWA,oBAAA,GAAYA,MAAZ;EAEA;;;;;;;;;;;;EAWA,uBAAA,GAAeA,MAAf;EAEA;;;;;;;;;;;;EAWA,0BAAA,GAAkBA,MAAlB;EAEA;;;;;;;;;;;EAUA,2BAAA,GAAmBA,MAAnB;;EAjVE3f,IAAAA,KAAK,CAACqB,MAAN,iCAAmBZ,IAAnB;;EAEAT,IAAAA,KAAK,CAACqB,MAAN,iCAAmBrB,KAAK,CAACmD,IAAN,CAAWud,eAAX,CAAnB;EAEA;;;;;;;;;;EASA,QAAI,CAAC,OAAKjX,IAAV,EAAgB;EACd,YAAMzJ,KAAK,CAACqE,GAAN,eAAiBpG,QAAjB,GAA2B,WAA3B,EAAwC,GAAxC,EAA6C,QAA7C,EAAuD,OAAKwL,IAA5D,CAAN;EACD;;;EAGD,QAAI,OAAK8P,MAAT,EAAiB;EACf,aAAKA,MAAL,CAAYlT,IAAZ,GAAmB,OAAKkT,MAAL,CAAYlT,IAAZ,IAAoB,QAAvC;;EACA,UAAI,EAAE,OAAKkT,MAAL,YAAuBwD,MAAzB,CAAJ,EAAsC;EACpC,eAAKxD,MAAL,GAAc,IAAIwD,MAAJ,CAAW,OAAKxD,MAAL,IAAe;EAAElT,UAAAA,IAAI,EAAE;EAAR,SAA1B,CAAd;EACD;EACF;;;EAGD,QAAI,OAAK0a,WAAL,KAAqB1gB,SAAzB,EAAoC;EAClC;EACA,aAAK0gB,WAAL;EAAA;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA;;EAAA;EAAA,QAA4CjO,MAA5C;EACD;;EAED,QAAI,OAAKiO,WAAT,EAAsB;EACpB,aAAKA,WAAL,CAAiB5Z,MAAjB;EAEA;;;;;;;;EAOA,UAAInH,KAAK,CAAC+B,QAAN,CAAe,OAAKif,OAApB,CAAJ,EAAkC;EAChChhB,QAAAA,KAAK,CAACgC,sBAAN,CAA6B,OAAK+e,WAAL,CAAiBliB,SAA9C,EAAyD,OAAKmiB,OAA9D;EACD,OAZmB;EAepB;;;EACA,UACElO,MAAM,CAACjU,SAAP,CAAiBoiB,aAAjB,CAA+BriB,MAAM,CAACuF,MAAP,CAAc,OAAK4c,WAAL,CAAiBliB,SAA/B,CAA/B,KACA,OAAK0a,MADL,IAEA,OAAKA,MAAL,CAAY1T,KAFZ,IAGA,OAAK+a,WAJP,EAKE;EACA,eAAKrH,MAAL,CAAY1T,KAAZ,CAAkB,OAAKkb,WAAL,CAAiBliB,SAAnC;EACD;EACF;;;EACF;EA2RD;;;;;;;;;;;;;;;;;2BAaM0F,QAAQ9D;YAAMkL,2EAAO;;EACzB,UAAIlL,IAAI,CAACsT,GAAT,EAAc;EACZ/T,QAAAA,KAAK,CAACC,CAAN,CAAQsE,MAAR,EAAgB9D,IAAhB;EACD;;EACD,UAAIkL,IAAJ,EAAU;EACR,eAAOpH,MAAP;EACD;;EACD,UAAI2c,KAAK,GAAGzgB,IAAI,CAACsT,GAAL,GAAWxP,MAAM,CAACsJ,IAAlB,GAAyBtJ,MAArC;;EACA,UAAI2c,KAAK,IAAIlhB,KAAK,CAACM,UAAN,CAAiB,KAAK6gB,IAAtB,CAAb,EAA0C;EACxCD,QAAAA,KAAK,GAAG,KAAKC,IAAL,CAAUD,KAAV,EAAiBzgB,IAAjB,CAAR;;EACA,YAAIA,IAAI,CAACsT,GAAT,EAAc;EACZxP,UAAAA,MAAM,CAACsJ,IAAP,GAAcqT,KAAd;EACD,SAFD,MAEO;EACL3c,UAAAA,MAAM,GAAG2c,KAAT;EACD;EACF;;EACD,aAAO3c,MAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCA6BWyL,eAAevP;EACxB,aAAOwe,SAAS,CAACjP,aAAD,EAAgBvP,IAAhB,CAAT,CAA+B,IAA/B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA2BO8N,OAAO9N;EACZ,aAAO,KAAK2gB,IAAL,CAAU,OAAV,EAAmB7S,KAAnB,EAA0B9N,IAA1B,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAmCQyB,4EAAa;YAAIzB,2EAAY;EACnC,UAAM4gB,cAAc,GAAGnf,KAAvB;EACA,UAAIof,iBAAiB,GAAG,EAAxB;EACA,UAAIC,eAAe,GAAQ,EAA3B;;EAGAvhB,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc,IAAd;;EACAA,MAAAA,IAAI,CAACkT,OAAL,GAAe,KAAKC,cAAL,CAAoBnT,IAApB,CAAf;EAEAA,MAAAA,IAAI,CAACmM,EAAL,GAAU,cAAV;EACA,aAAO,KAAK4U,QAAL,CAAc/gB,IAAI,CAACmM,EAAnB,EAAuB1K,KAAvB,EAA8BzB,IAA9B,EACJ4R,IADI,CACC,UAAAnQ,KAAK;EACTzB,QAAAA,IAAI,QAAJ,GAAYA,IAAI,QAAJ,IAAa,EAAzB;EACA,eAAO,MAAI,CAACghB,6BAAL,CAAmCvf,KAAnC,EAA0CzB,IAA1C,CAAP;EACD,OAJI,EAKJ4R,IALI,CAKC,UAAAqP,WAAW;EACfJ,QAAAA,iBAAiB,GAAGI,WAApB;EACD,OAPI,EAQJrP,IARI,CAQC;EACJ5R,QAAAA,IAAI,CAACmM,EAAL,GAAU,QAAV;EACA,eAAO,MAAI,CAAC+U,oBAAL,CAA0BlhB,IAAI,CAACmM,EAA/B,EAAmC1K,KAAnC,EAA0CzB,IAA1C,CAAP;EACD,OAXI,EAYJ4R,IAZI,CAYC,UAAA9N,MAAM;EACVgd,QAAAA,eAAe,GAAGhd,MAAlB;EACD,OAdI,EAeJ8N,IAfI,CAeC;EACJ,YAAMuP,YAAY,GAAGnhB,IAAI,CAACsT,GAAL,GAAWwN,eAAe,CAAC1T,IAA3B,GAAkC0T,eAAvD;EAEA,eAAO,MAAI,CAACM,oCAAL,CAA0CD,YAA1C,EAAwD;EAC7DnhB,UAAAA,IAAI,EAAJA,IAD6D;EAE7D6gB,UAAAA,iBAAiB,EAAjBA,iBAF6D;EAG7DQ,UAAAA,aAAa,EAAE5f;EAH8C,SAAxD,CAAP;EAKD,OAvBI,EAwBJmQ,IAxBI,CAwBC,UAAAuP,YAAY;EAChB,eAAO,MAAI,CAACG,cAAL,CAAoBV,cAApB,EAAoCO,YAApC,CAAP;EACD,OA1BI,EA2BJvP,IA3BI,CA2BC,UAAApL,MAAM;EACV,YAAIxG,IAAI,CAACsT,GAAT,EAAc;EACZwN,UAAAA,eAAe,CAAC1T,IAAhB,GAAuB5G,MAAvB;EACD,SAFD,MAEO;EACLsa,UAAAA,eAAe,GAAGta,MAAlB;EACD;;EACD,YAAM1C,MAAM,GAAG,MAAI,CAACyd,IAAL,CAAUT,eAAV,EAA2B9gB,IAA3B,CAAf;;EACAA,QAAAA,IAAI,CAACmM,EAAL,GAAU,aAAV;EACA,eAAO,MAAI,CAAC4U,QAAL,CAAc/gB,IAAI,CAACmM,EAAnB,EAAuB1K,KAAvB,EAA8BzB,IAA9B,EAAoC8D,MAApC,CAAP;EACD,OApCI,CAAP;EAqCD;;;qCAEe0d,iBAAiBC;;;EAC/B,UAAIliB,KAAK,CAAC0D,OAAN,CAAcue,eAAd,CAAJ,EAAoC;EAClC,eAAOA,eAAe,CAAC9f,GAAhB,CAAoB,UAAC8E,MAAD,EAASvF,CAAT;EAAA,iBAAe,MAAI,CAACqgB,cAAL,CAAoB9a,MAApB,EAA4Bib,SAAS,CAACxgB,CAAD,CAArC,CAAf;EAAA,SAApB,CAAP;EACD;;EAED1B,MAAAA,KAAK,CAACqK,GAAN,CAAU4X,eAAV,EAA2BC,SAA3B,EAAsC;EAAEzN,QAAAA,MAAM,EAAE;EAAV,OAAtC;;EAEA,UAAIzU,KAAK,CAACM,UAAN,CAAiB2hB,eAAe,CAAC5N,MAAjC,CAAJ,EAA8C;EAC5C4N,QAAAA,eAAe,CAAC5N,MAAhB;EACD;;EAED,aAAO4N,eAAP;EACD;EAED;;;;;;;;;;;;;qCAUgB/f,OAAOzB;EACrB,aAAO,KAAK0R,YAAL,CAAkBjQ,KAAlB,EAAyBzB,IAAzB,CAAP;EACD;EAED;;;;;;;;;;;;oDAS+ByB,OAAOzB;EACpC,UAAMoT,KAAK,GAAG,EAAd;EACA,UAAMV,SAAS,GAAG,EAAlB;EAEAnT,MAAAA,KAAK,CAACkH,eAAN,CAAsB,IAAtB,EAA4BzG,IAA5B,EAAkC,UAACC,GAAD,EAAMU,QAAN;EAChC,YAAI,CAACV,GAAG,CAACyhB,kBAAJ,EAAD,IAA6B,CAACzhB,GAAG,CAAC0Q,aAAJ,CAAkBlP,KAAlB,CAAlC,EAA4D;EAC1D;EACD;;EAEDd,QAAAA,QAAQ,CAAC2S,GAAT,GAAe,KAAf;EACAZ,QAAAA,SAAS,CAAC7O,IAAV,CAAe5D,GAAf;EACAmT,QAAAA,KAAK,CAACvP,IAAN,CAAW5D,GAAG,CAAC0hB,kBAAJ,CAAuBlgB,KAAvB,EAA8Bd,QAA9B,CAAX;EACD,OARD;EAUA,aAAO8I,OAAO,CAACxD,GAAR,CAAYmN,KAAZ,EAAmBxB,IAAnB,CAAwB,UAAAnB,OAAO;EACpC,eAAOiC,SAAS,CAACpJ,MAAV,CAAiB,UAAC5H,GAAD,EAAMrB,QAAN,EAAgBE,KAAhB;EACtBF,UAAAA,QAAQ,CAAC4Q,aAAT,CAAuBvP,GAAvB,EAA4B+O,OAAO,CAAClQ,KAAD,CAAnC;EACA,iBAAOmB,GAAP;EACD,SAHM,EAGJ,EAHI,CAAP;EAID,OALM,CAAP;EAMD;EAED;;;;;;;;;;;;;;;2DAYsCD,OAAOmgB;EAC3C,UAAMxO,KAAK,GAAG,EAAd;EAEA7T,MAAAA,KAAK,CAACkH,eAAN,CAAsB,IAAtB,EAA4Bmb,OAAO,CAAC5hB,IAApC,EAA0C,UAACC,GAAD,EAAMU,QAAN;EACxC,YAAM6Q,YAAY,GAAGvR,GAAG,CAAC0Q,aAAJ,CAAkBiR,OAAO,CAACP,aAA1B,CAArB;;EAEA,YAAI,CAAC7P,YAAL,EAAmB;EACjB;EACD;;EAED7Q,QAAAA,QAAQ,CAAC2S,GAAT,GAAe,KAAf;EAEA;;EACA,YAAIrT,GAAG,CAAC4hB,iBAAJ,EAAJ,EAA6B;EAC3BzO,UAAAA,KAAK,CAACvP,IAAN,CAAW5D,GAAG,CAAC6hB,iBAAJ,CAAsBrgB,KAAtB,EAA6B+P,YAA7B,EAA2C7Q,QAA3C,CAAX;EACD,SAFD,MAEO,IAAIV,GAAG,CAACyhB,kBAAJ,EAAJ,EAA8B;EACnC,cAAMK,MAAM,GAAG9hB,GAAG,CAAC0Q,aAAJ,CAAkBiR,OAAO,CAACf,iBAA1B,CAAf;;EAEA,cAAIkB,MAAJ,EAAY;EACV9hB,YAAAA,GAAG,CAACgR,aAAJ,CAAkBxP,KAAlB,EAAyBsgB,MAAzB;EACD;EACF;EACF,OAnBD;EAqBA,aAAOtY,OAAO,CAACxD,GAAR,CAAYmN,KAAZ,EAAmBxB,IAAnB,CAAwB;EAAA,eAAMnQ,KAAN;EAAA,OAAxB,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAwCYgP,8EAAU;YAAIzQ,2EAAY;EACpC;EACA,UAAMgiB,eAAe,GAAGvR,OAAxB;EACA,UAAIqQ,eAAJ;;EAGAvhB,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc,IAAd;;EACAA,MAAAA,IAAI,CAACkT,OAAL,GAAe,KAAKC,cAAL,CAAoBnT,IAApB,CAAf;;EAGAA,MAAAA,IAAI,CAACmM,EAAL,GAAU,kBAAV;EACA,aAAO,KAAK4U,QAAL,CAAc/gB,IAAI,CAACmM,EAAnB,EAAuBsE,OAAvB,EAAgCzQ,IAAhC,EACJ4R,IADI,CACC,UAAAnB,OAAO;EACX;EACA,YAAMwR,qBAAqB,GAAG,EAA9B;EACAjiB,QAAAA,IAAI,QAAJ,GAAYA,IAAI,QAAJ,IAAa,EAAzB;EACA,YAAIoT,KAAK,GAAG,EAAZ;EACA7T,QAAAA,KAAK,CAACkH,eAAN,CAAsB,MAAtB,EAA4BzG,IAA5B,EAAkC,UAACC,GAAD,EAAMU,QAAN;EAChC,cAAM6Q,YAAY,GAAGf,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAAA,mBAAIvG,GAAG,CAAC0Q,aAAJ,CAAkBnK,MAAlB,CAAJ;EAAA,WAAlB,EAAiDhC,MAAjD,CAAwD0d,OAAxD,CAArB;;EACA,cAAIjiB,GAAG,CAAC2F,IAAJ,KAAauJ,aAAb,IAA8BqC,YAAY,CAACtQ,MAAb,KAAwBuP,OAAO,CAACvP,MAAlE,EAA0E;EACxE;EACA;EACAP,YAAAA,QAAQ,CAAC2S,GAAT,GAAe,KAAf;EACAF,YAAAA,KAAK,CAACvP,IAAN,CACE5D,GAAG,CACA0R,YADH,CACgBH,YADhB,EAC8B7Q,QAD9B,EAEGiR,IAFH,CAEQ,UAAAxB,cAAc;EAClBK,cAAAA,OAAO,CAACpR,OAAR,CAAgB,UAACmH,MAAD,EAASvF,CAAT;EAAA,uBAAehB,GAAG,CAACqR,aAAJ,CAAkB9K,MAAlB,EAA0B4J,cAAc,CAACnP,CAAD,CAAxC,CAAf;EAAA,eAAhB;EACD,aAJH,EAKG2Q,IALH,CAKQ,UAAAxB,cAAc;EAClBnQ,cAAAA,GAAG,CAACgR,aAAJ,CAAkBgR,qBAAlB,EAAyC7R,cAAzC;EACD,aAPH,CADF;EAUD;EACF,SAjBD;EAkBA,eAAO3G,OAAO,CAACxD,GAAR,CAAYmN,KAAZ,EACJxB,IADI,CACC;EACJ5R,UAAAA,IAAI,CAACmM,EAAL,GAAU,YAAV;EACA,iBAAO,MAAI,CAAC+U,oBAAL,CAA0BlhB,IAAI,CAACmM,EAA/B,EAAmCsE,OAAnC,EAA4CzQ,IAA5C,CAAP;EACD,SAJI,EAKJ4R,IALI,CAKC,UAAA9N,MAAM;EACVgd,UAAAA,eAAe,GAAGhd,MAAlB;EACD,SAPI,EAQJ8N,IARI,CAQC;EACJ,cAAMuQ,kBAAkB,GAAGniB,IAAI,CAACsT,GAAL,GAAWwN,eAAe,CAAC1T,IAA3B,GAAkC0T,eAA7D;;EAGA1N,UAAAA,KAAK,GAAG,EAAR;EACA7T,UAAAA,KAAK,CAACkH,eAAN,CAAsB,MAAtB,EAA4BzG,IAA5B,EAAkC,UAACC,GAAD,EAAMU,QAAN;EAChC,gBAAM6Q,YAAY,GAAGf,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAAA,qBAAIvG,GAAG,CAAC0Q,aAAJ,CAAkBnK,MAAlB,CAAJ;EAAA,aAAlB,EAAiDhC,MAAjD,CAAwD0d,OAAxD,CAArB;;EACA,gBAAI1Q,YAAY,CAACtQ,MAAb,KAAwBuP,OAAO,CAACvP,MAApC,EAA4C;EAC1C;EACD;;EAEDP,YAAAA,QAAQ,CAAC2S,GAAT,GAAe,KAAf;EACA,gBAAM8O,aAAa,GAAGniB,GAAG,CAAC0Q,aAAJ,CAAkBsR,qBAAlB,CAAtB;EACA,gBAAI5O,IAAJ;EAEA;;EACA,gBAAIpT,GAAG,CAAC2F,IAAJ,KAAawJ,WAAjB,EAA8B;EAC5B;EACA,cAAA,MAAI,CAACxG,GAAL,CAAS,MAAT,EAAiB,gDAAjB;EACD,aAHD,MAGO,IAAI3I,GAAG,CAAC2F,IAAJ,KAAayJ,UAAjB,EAA6B;EAClC8S,cAAAA,kBAAkB,CAAC9iB,OAAnB,CAA2B,UAACgjB,iBAAD,EAAoBphB,CAApB;EACzBhB,gBAAAA,GAAG,CAACqR,aAAJ,CAAkB+Q,iBAAlB,EAAqC7Q,YAAY,CAACvQ,CAAD,CAAjD;EACD,eAFD;EAGAoS,cAAAA,IAAI,GAAGpT,GAAG,CACPY,WADI,GAEJwd,UAFI,CAEO7M,YAFP,EAEqB7Q,QAFrB,EAGJiR,IAHI,CAGC,UAAAvB,WAAW;EACf8R,gBAAAA,kBAAkB,CAAC9iB,OAAnB,CAA2B,UAACgjB,iBAAD,EAAoBphB,CAApB;EACzBhB,kBAAAA,GAAG,CAACgR,aAAJ,CAAkBoR,iBAAlB,EAAqChS,WAAW,CAACpP,CAAD,CAAhD;EACD,iBAFD;EAGD,eAPI,CAAP;EAQD,aAZM,MAYA,IACLhB,GAAG,CAAC2F,IAAJ,KAAauJ,aAAb,IACAiT,aADA,IAEAA,aAAa,CAAClhB,MAAd,KAAyBihB,kBAAkB,CAACjhB,MAHvC,EAIL;EACAihB,cAAAA,kBAAkB,CAAC9iB,OAAnB,CAA2B,UAACgjB,iBAAD,EAAoBphB,CAApB;EACzBhB,gBAAAA,GAAG,CAACgR,aAAJ,CAAkBoR,iBAAlB,EAAqCD,aAAa,CAACnhB,CAAD,CAAlD;EACD,eAFD;EAGD;;EACD,gBAAIoS,IAAJ,EAAU;EACRD,cAAAA,KAAK,CAACvP,IAAN,CAAWwP,IAAX;EACD;EACF,WAtCD;EAuCA,iBAAO5J,OAAO,CAACxD,GAAR,CAAYmN,KAAZ,EAAmBxB,IAAnB,CAAwB;EAC7B,mBAAO,MAAI,CAAC0P,cAAL,CAAoBU,eAApB,EAAqCG,kBAArC,CAAP;EACD,WAFM,CAAP;EAGD,SAvDI,CAAP;EAwDD,OAhFI,EAiFJvQ,IAjFI,CAiFC,UAAAnB,OAAO;EACX,YAAIzQ,IAAI,CAACsT,GAAT,EAAc;EACZwN,UAAAA,eAAe,CAAC1T,IAAhB,GAAuBqD,OAAvB;EACD,SAFD,MAEO;EACLqQ,UAAAA,eAAe,GAAGrQ,OAAlB;EACD;;EACD,YAAM3M,MAAM,GAAG,MAAI,CAACyd,IAAL,CAAUT,eAAV,EAA2B9gB,IAA3B,CAAf;;EACAA,QAAAA,IAAI,CAACmM,EAAL,GAAU,iBAAV;EACA,eAAO,MAAI,CAAC4U,QAAL,CAAc/gB,IAAI,CAACmM,EAAnB,EAAuBsE,OAAvB,EAAgCzQ,IAAhC,EAAsC8D,MAAtC,CAAP;EACD,OA1FI,CAAP;EA2FD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA2EcrC,4EAAa;YAAIzB;;EAC7B,UAAIT,KAAK,CAAC0D,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;EACxB,eAAOA,KAAK,CAACC,GAAN,CAAU,UAAA0H,MAAM;EAAA,iBAAI,MAAI,CAACsI,YAAL,CAAkBtI,MAAlB,EAA0BpJ,IAA1B,CAAJ;EAAA,SAAhB,CAAP;EACD;;EACD,UAAI,CAACT,KAAK,CAAC+B,QAAN,CAAeG,KAAf,CAAL,EAA4B;EAC1B,cAAMlC,KAAK,CAACqE,GAAN,WAAapG,QAAb,oBAAoC,OAApC,EAA6C,GAA7C,EAAkD,iBAAlD,EAAqEiE,KAArE,CAAN;EACD;;EAED,UAAI,KAAKkF,YAAT,EAAuB;EACrB,aAAKA,YAAL,CAAkBtH,OAAlB,CAA0B,UAAAY,GAAG;EAC3BA,UAAAA,GAAG,CAACqiB,6BAAJ,CAAkC7gB,KAAlC,EAAyCzB,IAAzC;EACD,SAFD;EAGD;;EACD,UAAMuiB,UAAU,GAAG,KAAKjC,WAAxB;EAEA,UAAMxc,MAAM,GAAG,CAACye,UAAD,IAAe9gB,KAAK,YAAY8gB,UAAhC,GAA6C9gB,KAA7C,GAAqD,IAAI8gB,UAAJ,CAAe9gB,KAAf,EAAsBzB,IAAtB,CAApE;EACA,aAAO8D,MAAP;EAEA;EACD;EAED;;;;;;;;;;;;2BASM0e;;;2CAAWtd;EAAAA,QAAAA;;;EACf,UAAMud,MAAM,GAAG,KAAKC,gBAAL,CAAsBF,MAAtB,CAAf;;EACA,UAAI,CAACC,MAAL,EAAa;EACX,cAAMljB,KAAK,CAACqE,GAAN,WAAapG,QAAb,YAA4BglB,MAA5B,EAAoC,GAApC,EAAyC,QAAzC,CAAN;EACD;;EAED,UAAMG,KAAK,aAAMH,MAAM,CAAC1V,MAAP,CAAc,CAAd,EAAiB/D,WAAjB,EAAN,SAAuCyZ,MAAM,CAACrhB,MAAP,CAAc,CAAd,CAAvC,CAAX;EACA,UAAMyhB,MAAM,mBAAYD,KAAZ,CAAZ;EACA,UAAME,KAAK,kBAAWF,KAAX,CAAX;EAEA,UAAIxW,EAAJ;;EAGAsW,MAAAA,MAAM,CAACnD,QAAP,CAAgBjgB,OAAhB,CAAwB,UAACZ,KAAD,EAAQwC,CAAR;EACtB,YAAIiE,IAAI,CAACjE,CAAD,CAAJ,KAAYrB,SAAhB,EAA2B;EACzBsF,UAAAA,IAAI,CAACjE,CAAD,CAAJ,GAAU1B,KAAK,CAACmD,IAAN,CAAWjE,KAAX,CAAV;EACD;EACF,OAJD;EAMA,UAAMuB,IAAI,GAAGkF,IAAI,CAACA,IAAI,CAAChE,MAAL,GAAc,CAAf,CAAjB;;EAGA3B,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc,IAAd;;EACA,UAAMkT,OAAO,GAAGlT,IAAI,CAACkT,OAAL,GAAe,KAAKC,cAAL,CAAoBnT,IAApB,CAA/B;;EAGAmM,MAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAUyW,MAAf;EACA,aAAOrjB,KAAK,CACToK,OADI,CACI,KAAKwC,EAAL,iCAAYjH,IAAZ,EADJ,EAEJ0M,IAFI,CAEC,UAAAkR,MAAM;;;EACV,YAAI5d,IAAI,CAACud,MAAM,CAAC3C,YAAR,CAAJ,KAA8BlgB,SAAlC,EAA6C;EAC3C;EACAsF,UAAAA,IAAI,CAACud,MAAM,CAAC3C,YAAR,CAAJ,GAA4BgD,MAAM,KAAKljB,SAAX,GAAuBsF,IAAI,CAACud,MAAM,CAAC3C,YAAR,CAA3B,GAAmDgD,MAA/E;EACD;;;EAED3W,QAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAUqW,MAAf;EACAtd,QAAAA,IAAI,GAAGud,MAAM,CAAC5C,WAAP,GAAqB4C,MAAM,CAAC5C,WAAP,OAAA4C,MAAM,GAAa,MAAb,4BAAsBvd,IAAtB,GAA3B,GAAyDA,IAAhE;;EACA,QAAA,MAAI,CAACyD,GAAL,OAAA,MAAI,GAAKwD,EAAL,4BAAYjH,IAAZ,GAAJ;;EACA,eAAO3F,KAAK,CAACoK,OAAN,CAAc,qBAAA,MAAI,CAACoZ,UAAL,CAAgB7P,OAAhB,GAAyB/G,EAAzB,4BAA6B,MAA7B,4BAAsCjH,IAAtC,GAAd,CAAP;EACD,OAZI,EAaJ0M,IAbI,CAaC,UAAA9N,MAAM;EACV;EACA,YAAMwO,UAAU,GAAG,OAAOnK,IAAP,CAAYgE,EAAZ,KAAmBnM,IAAI,CAACsS,UAA3C;;EACA,YAAM0Q,KAAK,GAAG7kB,MAAM,CAAC8kB,MAAP,CAAc,EAAd,EAAkBjjB,IAAlB,EAAwB;EAAEsS,UAAAA,UAAU,EAAVA;EAAF,SAAxB,CAAd;;EAEAxO,QAAAA,MAAM,GAAG,MAAI,CAACyd,IAAL,CAAUzd,MAAV,EAAkBkf,KAAlB,EAAyB,CAAC,CAACP,MAAM,CAACvX,IAAlC,CAAT;EACAhG,QAAAA,IAAI,CAACrB,IAAL,CAAUC,MAAV;;EAEAqI,QAAAA,EAAE,GAAGnM,IAAI,CAACmM,EAAL,GAAU0W,KAAf;EACA,eAAOtjB,KAAK,CAACoK,OAAN,CAAc,MAAI,CAACwC,EAAD,CAAJ,OAAA,MAAI,qBAAQjH,IAAR,EAAlB,EAAiC0M,IAAjC,CAAsC,UAAAsR,OAAO;EAClD;EACA,iBAAOA,OAAO,KAAKtjB,SAAZ,GAAwBkE,MAAxB,GAAiCof,OAAxC;EACD,SAHM,CAAP;EAID,OA1BI,CAAP;EA2BD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAkCS3R,IAAqBvR;EAC5B,aAAO,KAAK2gB,IAAL,CAAU,SAAV,EAAqBpP,EAArB,EAAyBvR,IAAzB,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAgDY8N,OAAQ9N;EAClB,aAAO,KAAK2gB,IAAL,CAAU,YAAV,EAAwB7S,KAAxB,EAA+B9N,IAA/B,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAoCMuR,IAAqBvR;EACzB,aAAO,KAAK2gB,IAAL,CAAU,MAAV,EAAkBpP,EAAlB,EAAsBvR,IAAtB,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAwCS8N,OAAO9N;EACd,aAAO,KAAK2gB,IAAL,CAAU,SAAV,EAAqB7S,KAArB,EAA4B9N,IAA5B,CAAP;EACD;EAED;;;;;;;;;;;;;iCAUYgJ;EACV,WAAKL,GAAL,CAAS,YAAT,EAAuB,OAAvB,EAAgCK,IAAhC;EACA,UAAMkK,OAAO,GAAG,KAAKC,cAAL,CAAoBnK,IAApB,CAAhB;;EACA,UAAI,CAACkK,OAAL,EAAc;EACZ,cAAM3T,KAAK,CAACqE,GAAN,WAAapG,QAAb,kBAAkC,MAAlC,EAA0C,GAA1C,EAA+C,QAA/C,EAAyDwL,IAAzD,CAAN;EACD;;EACD,aAAO,KAAKma,WAAL,GAAmBjQ,OAAnB,CAAP;EACD;EAED;;;;;;;;;;;;;;YAUgBlT,2EAAY;;EAC1B,UAAIT,KAAK,CAACyH,QAAN,CAAehH,IAAf,CAAJ,EAA0B;EACxBA,QAAAA,IAAI,GAAG;EAAEkT,UAAAA,OAAO,EAAElT;EAAX,SAAP;EACD;;EACD,aAAOA,IAAI,CAACkT,OAAL,IAAgBlT,IAAI,CAACogB,cAA5B;EACD;EAED;;;;;;;;;;;;EASE,aAAO,KAAKF,SAAZ;EACD;EAED;;;;;;;;;;;;EASE,aAAO,KAAKpH,MAAZ;EACD;EAED;;;;;;;;;;;;;;;;;;;gCAgBSvJ,eAAevP;EACtB,aAAO0e,OAAO,CAACnP,aAAD,EAAgBvP,IAAhB,CAAP,CAA6B,IAA7B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;+BAgBQuP,eAAevP;EACrB,aAAO2e,MAAM,CAACpP,aAAD,EAAgBvP,IAAhB,CAAN,CAA4B,IAA5B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;yBAgBIwG;EACF,UAAM8Z,WAAW,GAAG,KAAKA,WAAzB;EACA,aAAOA,WAAW,GAAG9Z,MAAM,YAAY8Z,WAArB,GAAmC,KAArD;EACD;EAED;;;;;;;;;;;;;;;sCAYiBtX,MAAMkK;YAASlT,2EAAY;EAC1C,WAAKmjB,WAAL,GAAmBna,IAAnB,IAA2BkK,OAA3B;;EAEA,UAAIlT,IAAI,KAAK,IAAT,IAAiBA,IAAI,WAAzB,EAAmC;EACjC,aAAKogB,cAAL,GAAsBpX,IAAtB;EACD;EACF;;;+BAESoa;2CAAaC;EAAAA,QAAAA;;;EACrB,UAAMC,iBAAiB,GAAGF,QAAQ,CAACtjB,OAAT,CAAiB,OAAjB,MAA8B,CAA9B,GAAkCujB,QAAQ,CAACniB,MAAT,GAAkB,CAApD,GAAwD,CAAlF;EAEA,aAAO3B,KAAK,CACToK,OADI,CACI,KAAKyZ,QAAL,cAAkBC,QAAlB,CADJ,EAEJzR,IAFI,CAEC,UAAA2R,eAAe;EAAA,eAAKA,eAAe,KAAK3jB,SAApB,GAAgCyjB,QAAQ,CAACC,iBAAD,CAAxC,GAA8DC,eAAnE;EAAA,OAFhB,CAAP;EAGD;;;2CAEqBf,QAAQgB,gBAAgBxjB;;;EAC5C,UAAMyjB,iBAAiB,GAAG;EAAE,gBAAMzjB,IAAI,CAAC0jB,IAAL,IAAa;EAArB,OAA1B;EACA,UAAIzkB,MAAJ;EAEA,WAAK0J,GAAL,CAAS3I,IAAI,CAACmM,EAAd,EAAkBqX,cAAlB,EAAkCxjB,IAAlC;;EAEA,UAAIT,KAAK,CAAC0D,OAAN,CAAcugB,cAAd,CAAJ,EAAmC;EACjCvkB,QAAAA,MAAM,GAAGukB,cAAc,CAAC9hB,GAAf,CAAmB,UAAA8E,MAAM;EAAA,iBAAI,MAAI,CAACiM,MAAL,CAAYjM,MAAZ,EAAoBid,iBAApB,CAAJ;EAAA,SAAzB,CAAT;EACD,OAFD,MAEO;EACLxkB,QAAAA,MAAM,GAAG,KAAKwT,MAAL,CAAY+Q,cAAZ,EAA4BC,iBAA5B,CAAT;EACD;;EAED,aAAO,KAAKV,UAAL,CAAgB/iB,IAAI,CAACkT,OAArB,EAA8BsP,MAA9B,EAAsC,IAAtC,EAA4CvjB,MAA5C,EAAoDe,IAApD,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA4BKqK,OAAOyD,OAAwB9N;EAClC,aAAO,KAAK2gB,IAAL,CAAU,KAAV,EAAiBtW,KAAjB,EAAwByD,KAAxB,EAA+B9N,IAA/B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA4CQyQ;;;YAASzQ,2EAAY;EAC3B,UAAIwG,MAAJ;;EACA,UAAIjH,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAAJ,EAA4B;EAC1B,eAAOA,OAAO,CAAC/O,GAAR,CAAY,UAAA8E,MAAM;EAAA,iBAAI,MAAI,CAACiM,MAAL,CAAYjM,MAAZ,EAAoBxG,IAApB,CAAJ;EAAA,SAAlB,CAAP;EACD,OAFD,MAEO;EACLwG,QAAAA,MAAM,GAAGiK,OAAT;EACD;;EACD,UAAMT,cAAc,GAAG,CAAC,OAAO,KAAKA,cAAZ,GAA6B,EAA9B,KAAqC,EAA5D;EACA,UAAIjJ,IAAI,GAAG,EAAX;;EAGA,UAAI,QAAQ,KAAK+R,MAAjB,EAAyB;EACvB/R,QAAAA,IAAI,GAAG,KAAK+R,MAAL,CAAYzP,IAAZ,CAAiB7C,MAAjB,CAAP;EACD,OAFD,MAEO;EACL,aAAK,IAAMlH,GAAX,IAAkBkH,MAAlB,EAA0B;EACxB,cAAIwJ,cAAc,CAAClQ,OAAf,CAAuBR,GAAvB,MAAgC,CAAC,CAArC,EAAwC;EACtCyH,YAAAA,IAAI,CAACzH,GAAD,CAAJ,GAAYC,KAAK,CAACgK,SAAN,CAAgB/C,MAAM,CAAClH,GAAD,CAAtB,CAAZ;EACD;EACF;EACF;;;EAGD,UAAI,QAAQU,IAAI,CAACU,OAAjB,EAA0B;EACxBV,QAAAA,IAAI,QAAJ,GAAYgQ,cAAc,CAAClP,KAAf,EAAZ;EACD;;EACD,UAAI,QAAQd,IAAI,QAAhB,EAAuB;EACrB,YAAIT,KAAK,CAACyH,QAAN,CAAehH,IAAI,QAAnB,CAAJ,EAA+B;EAC7BA,UAAAA,IAAI,QAAJ,GAAY,CAACA,IAAI,QAAL,CAAZ;EACD;;EACDT,QAAAA,KAAK,CAACkH,eAAN,CAAsB,IAAtB,EAA4BzG,IAA5B,EAAkC,UAACC,GAAD,EAAMU,QAAN;EAChC,cAAM6Q,YAAY,GAAGvR,GAAG,CAAC0Q,aAAJ,CAAkBnK,MAAlB,CAArB;;EACA,cAAIgL,YAAJ,EAAkB;EAChB;EACA,gBAAIjS,KAAK,CAAC0D,OAAN,CAAcuO,YAAd,CAAJ,EAAiC;EAC/BvR,cAAAA,GAAG,CAACgR,aAAJ,CACElK,IADF,EAEEyK,YAAY,CAAC9P,GAAb,CAAiB,UAAAuG,IAAI;EACnB,uBAAOhI,GAAG,CAACY,WAAJ,GAAkB4R,MAAlB,CAAyBxK,IAAzB,EAA+BtH,QAA/B,CAAP;EACD,eAFD,CAFF;EAMD,aAPD,MAOO;EACLV,cAAAA,GAAG,CAACgR,aAAJ,CAAkBlK,IAAlB,EAAwB9G,GAAG,CAACY,WAAJ,GAAkB4R,MAAlB,CAAyBjB,YAAzB,EAAuC7Q,QAAvC,CAAxB;EACD;EACF;EACF,SAfD;EAgBD;;EACD,aAAOoG,IAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAkCQwK,IAAI9P,OAAOzB;EACjB,aAAO,KAAK2gB,IAAL,CAAU,QAAV,EAAoBpP,EAApB,EAAwB9P,KAAxB,EAA+BzB,IAA/B,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAoCWyB,OAAOqM,OAAyB9N;EACzC,aAAO,KAAK2gB,IAAL,CAAU,WAAV,EAAuBlf,KAAvB,EAA8BqM,KAA9B,EAAqC9N,IAArC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;EAgBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAgCYyQ,SAASzQ;EACnB,aAAO,KAAK2gB,IAAL,CAAU,YAAV,EAAwBlQ,OAAxB,EAAiCzQ,IAAjC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA6BUwG;YAAQxG,2EAAY;EAC5B,UAAM8Y,MAAM,GAAG,KAAKiG,SAAL,EAAf;;EACA,UAAI,CAACjG,MAAL,EAAa;EACX;EACD;;EACD,UAAMkK,KAAK,GAAGzjB,KAAK,CAAC8J,IAAN,CAAWrJ,IAAX,EAAiB,CAAC,cAAD,CAAjB,CAAd;;EACA,UAAIT,KAAK,CAAC0D,OAAN,CAAcuD,MAAd,CAAJ,EAA2B;EACzB,YAAMmS,MAAM,GAAGnS,MAAM,CAAC9E,GAAP,CAAW,UAAAiiB,OAAO;EAAA,iBAAI7K,MAAM,CAACjG,QAAP,CAAgB8Q,OAAhB,EAAyBpkB,KAAK,CAAC8J,IAAN,CAAW2Z,KAAX,EAAkB,CAAC,cAAD,CAAlB,CAAzB,CAAJ;EAAA,SAAlB,CAAf;EAEA,eAAOrK,MAAM,CAACiL,IAAP,CAAY1B,OAAZ,IAAuBvJ,MAAvB,GAAgC/Y,SAAvC;EACD;;EACD,aAAOkZ,MAAM,CAACjG,QAAP,CAAgBrM,MAAhB,EAAwBwc,KAAxB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAsCM5V,MAAMpN;EACV,aAAO,KAAK0R,YAAL,CAAkBtE,IAAlB,EAAwBpN,IAAxB,CAAP;EACD;EAED;;;;;;;;;EAIE;EACA;EACAT,MAAAA,KAAK,CAACI,MAAN,CAAa,KAAK+S,SAAlB,EAA6B,UAAChG,KAAD,EAAQ9G,IAAR;EAC3BrG,QAAAA,KAAK,CAACI,MAAN,CAAa+M,KAAb,EAAoB,UAACgG,SAAD,EAAYmR,KAAZ;EAClB,cAAItkB,KAAK,CAAC+B,QAAN,CAAeoR,SAAf,CAAJ,EAA+B;EAC7BA,YAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;EACD;;EACDA,UAAAA,SAAS,CAACrT,OAAV,CAAkB,UAAAY,GAAG;EACnB,gBAAMsP,aAAa,GAAG,OAAI,CAACmB,SAAL,CAAeoT,eAAf,CAA+BD,KAA/B,KAAyCA,KAA/D;;EACA5jB,YAAAA,GAAG,CAACY,WAAJ,GAAkB;EAAA,qBAAM,OAAI,CAAC6P,SAAL,CAAeqT,SAAf,CAAyBF,KAAzB,CAAN;EAAA,aAAlB;;EAEA,gBAAI,OAAOvU,QAAQ,CAAC1J,IAAD,CAAf,KAA0B,UAA9B,EAA0C;EACxC,oBAAMrG,KAAK,CAACqE,GAAN,CAAUpG,QAAV,EAAkB,iBAAlB,EAAqC,GAArC,EAA0C,sCAA1C,EAAkFoI,IAAlF,EAAwF,IAAxF,CAAN;EACD;;EAED,YAAA,OAAI,CAACA,IAAD,CAAJ,CAAW2J,aAAX,EAA0BtP,GAA1B;EACD,WATD;EAUD,SAdD;EAeD,OAhBD;EAiBD;;;;IA7oEiC0K;;ECpTpC,IAAMnN,QAAM,GAAG,WAAf;AAEA,EAAO,IAAMwmB,oBAAoB,GAAG,CAClC,OADkC,EAElC,QAFkC,EAGlC,YAHkC,EAIlC,cAJkC,EAKlC,SALkC,EAMlC,YANkC,EAOlC,MAPkC,EAQlC,SARkC,EASlC,WATkC,EAUlC,IAVkC,EAWlC,KAXkC,EAYlC,QAZkC,EAalC,QAbkC,EAclC,WAdkC,EAelC,YAfkC,EAgBlC,UAhBkC,CAA7B;EAmBP;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,MAAaC,SAAb;EAAA;EAAA;EAAA;;EAME;;;UAAajkB,2EAAO;;;;EAClB;EAEA7B,IAAAA,MAAM,CAAC6D,gBAAP,gCAA8B;EAC5B;;;;;;;;;EASAke,MAAAA,SAAS,EAAE;EACTzhB,QAAAA,KAAK,EAAE;EADE,OAViB;;EAc5B;;;;;;;;EAQAylB,MAAAA,QAAQ,EAAE;EACRzlB,QAAAA,KAAK,EAAE;EADC,OAtBkB;;EA0B5B;;;;;;;;;;;;;;;;;;;;;;;;;EAyBA0lB,MAAAA,WAAW,EAAE;EACX1lB,QAAAA,KAAK,EAAEmB,SADI;EAEXwkB,QAAAA,QAAQ,EAAE;EAFC;EAnDe,KAA9B;;EA0DA7kB,IAAAA,KAAK,CAACqB,MAAN,gCAAmBZ,IAAnB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;EAuBA,UAAKqkB,cAAL,GAAsB,MAAKA,cAAL,IAAuB,EAA7C;;EAGA,UAAKF,WAAL,GAAmB,MAAKA,WAAL,IAAoB9D,MAAvC;;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BA;;;;;;;;;;;EA5HF;EAAA;EAAA,mCAqIkBrX,IArIlB;0CAqI2B9D;EAAAA,QAAAA;;;EACvB,UAAMU,IAAI,GAAGV,IAAI,CAACW,KAAL,EAAb;EACA,WAAKH,IAAL,cAAUE,IAAV,EAAgBoD,IAAhB,SAAyB9D,IAAzB;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;EA1IF;EAAA;EAAA,uBAmKM8D,IAnKN;EAoKI,UAAMvH,KAAK,GAAQ,EAAnB;EACA,UAAM6iB,QAAQ,GAAG,IAAjB;EACAN,MAAAA,oBAAoB,CAAC3kB,OAArB,CAA6B,UAAAmjB,MAAM;EACjC/gB,QAAAA,KAAK,CAAC+gB,MAAD,CAAL,GAAgB;EACd4B,UAAAA,QAAQ,EAAE,IADI;EAEd3lB,UAAAA,KAFc;iDAEJyG;EAAAA,cAAAA;;;EACR,mBAAOof,QAAQ,CAAC9B,MAAD,CAAR,OAAA8B,QAAQ,GAAStb,IAAT,SAAkB9D,IAAlB,EAAf;EACD;EAJa,SAAhB;EAMD,OAPD;EAQAzD,MAAAA,KAAK,CAACsiB,SAAN,GAAkB;EAChBK,QAAAA,QAAQ,EAAE,IADM;EAEhB3lB,QAAAA,KAFgB;EAGd,iBAAO6lB,QAAQ,CAACP,SAAT,CAAmB/a,IAAnB,CAAP;EACD;EAJe,OAAlB;EAMA,aAAO7K,MAAM,CAACuF,MAAP,CAAc,IAAd,EAAoBjC,KAApB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAvLF;EAAA;EAAA,iCAmNgBuH,IAnNhB,EAmNkDhJ,IAnNlD;;;EAoNI;EACA,UAAIT,KAAK,CAAC+B,QAAN,CAAe0H,IAAf,CAAJ,EAA0B;EACxBhJ,QAAAA,IAAI,GAAGgJ,IAAP;EACAA,QAAAA,IAAI,GAAGhJ,IAAI,CAACgJ,IAAZ;EACD;;EACD,UAAI,CAACzJ,KAAK,CAACyH,QAAN,CAAegC,IAAf,CAAL,EAA2B;EACzB,cAAMzJ,KAAK,CAACqE,GAAN,WAAapG,QAAb,oBAAoC,MAApC,EAA4C,GAA5C,EAAiD,QAAjD,EAA2DwL,IAA3D,CAAN;EACD;;;EAGDhJ,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;EAEAA,MAAAA,IAAI,CAACgJ,IAAL,GAAYA,IAAZ;EACAhJ,MAAAA,IAAI,CAAC0S,SAAL,GAAiB1S,IAAI,CAAC0S,SAAL,IAAkB,EAAnC;;EAGA,UAAMyR,WAAW,GAAGnkB,IAAI,CAACmkB,WAAL,IAAoB,KAAKA,WAA7C;EACA,aAAOnkB,IAAI,CAACmkB,WAAZ;;EAGA5kB,MAAAA,KAAK,CAACqB,MAAN,CAAaZ,IAAb,EAAmB,KAAKqkB,cAAxB;;EAGA,UAAM3d,MAAM,GAAI,KAAKwd,QAAL,CAAclb,IAAd,IAAsB,IAAImb,WAAJ,CAAgBnkB,IAAhB,CAAtC;;EACA0G,MAAAA,MAAM,CAACgM,SAAP,GAAmBhM,MAAM,CAACgM,SAAP,IAAoB,EAAvC;;EAEAhM,MAAAA,MAAM,CAACsC,IAAP,GAAcA,IAAd;;EAEAtC,MAAAA,MAAM,CAACwZ,SAAP,GAAmB,KAAKiD,WAAL,EAAnB;EAEAzc,MAAAA,MAAM,CAACgK,SAAP,GAAmB,IAAnB;EAEAhK,MAAAA,MAAM,CAACL,EAAP,CAAU,KAAV,EAAiB;EAAA,2CAAInB,IAAJ;EAAIA,UAAAA,IAAJ;EAAA;;EAAA,eAAa,MAAI,CAACqf,cAAL,OAAA,MAAI,GAAgBvb,IAAhB,SAAyB9D,IAAzB,EAAjB;EAAA,OAAjB;EACAwB,MAAAA,MAAM,CAAC8d,eAAP;EAEA,aAAO9d,MAAP;EACD;EAxPH;EAAA;EAAA,mCA0PkBsC,IA1PlB,EA0PwBhJ,IA1PxB;EA2PIiJ,MAAAA,OAAO,CAACwb,IAAR,CAAa,oEAAb;EACA,aAAO,KAAKC,YAAL,CAAkB1b,IAAlB,EAAwBhJ,IAAxB,CAAP;EACD;EAED;;;;;;;;;;EA/PF;EAAA;EAAA,+BAwQcgJ,IAxQd;EAyQI,UAAMkK,OAAO,GAAG,KAAKC,cAAL,CAAoBnK,IAApB,CAAhB;;EACA,UAAI,CAACkK,OAAL,EAAc;EACZ,cAAM3T,KAAK,CAACqE,GAAN,WAAapG,QAAb,kBAAkC,MAAlC,EAA0C,GAA1C,EAA+C,QAA/C,EAAyDwL,IAAzD,CAAN;EACD;;EACD,aAAO,KAAKma,WAAL,GAAmBjQ,OAAnB,CAAP;EACD;EAED;;;;;;;;;;EAhRF;EAAA;EAAA;YAyRkBlT,2EAAY;;EAC1B,UAAIT,KAAK,CAACyH,QAAN,CAAehH,IAAf,CAAJ,EAA0B;EACxBA,QAAAA,IAAI,GAAG;EAAEkT,UAAAA,OAAO,EAAElT;EAAX,SAAP;EACD;;EACD,aAAOA,IAAI,CAACkT,OAAL,IAAgB,KAAKmR,cAAL,CAAoBjE,cAA3C;EACD;EAED;;;;;;;;EAhSF;EAAA;EAAA;EAwSI,aAAO,KAAKF,SAAZ;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;EA3SF;EAAA;EAAA,8BAiUalX,IAjUb;EAkUI,UAAMtC,MAAM,GAAG,KAAKod,eAAL,CAAqB9a,IAArB,CAAf;;EACA,UAAI,CAACtC,MAAL,EAAa;EACX,cAAMnH,KAAK,CAACqE,GAAN,WAAapG,QAAb,iBAAiCwL,IAAjC,EAAuC,GAAvC,EAA4C,QAA5C,CAAN;EACD;;EACD,aAAOtC,MAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;EAzUF;EAAA;EAAA,oCAgWmBsC,IAhWnB;EAiWI,aAAO,KAAKkb,QAAL,CAAclb,IAAd,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;EApWF;EAAA;EAAA,oCAuXmBA,IAvXnB,EAuXyBkK,OAvXzB;YAuXkClT,2EAAY;EAC1C,WAAKmjB,WAAL,GAAmBna,IAAnB,IAA2BkK,OAA3B;;EAEA,UAAIlT,IAAI,KAAK,IAAT,IAAiBA,IAAI,WAAzB,EAAmC;EACjC,aAAKqkB,cAAL,CAAoBjE,cAApB,GAAqCpX,IAArC;EACAzJ,QAAAA,KAAK,CAACI,MAAN,CAAa,KAAKukB,QAAlB,EAA4B,UAAAxd,MAAM;EAChCA,UAAAA,MAAM,CAAC0Z,cAAP,GAAwBpX,IAAxB;EACD,SAFD;EAGD;EACF;EAED;;;;;;;;;;;;;;;;;;;;;;;;EAlYF;EAAA;EAAA,0BAyZSA,IAzZT,EAyZe8E,KAzZf,EAyZsB9N,IAzZtB;EA0ZI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBqW,KAArB,CAA2BvR,KAA3B,EAAkC9N,IAAlC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAjdF;EAAA;EAAA,2BA6eUgJ,IA7eV,EA6egBvH,KA7ehB,EA6euBzB,IA7evB;EA8eI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBtF,MAArB,CAA4BjC,KAA5B,EAAmCzB,IAAnC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAriBF;EAAA;EAAA,+BAqkBcgJ,IArkBd,EAqkBoByH,OArkBpB,EAqkB6BzQ,IArkB7B;EAskBI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBqV,UAArB,CAAgC5N,OAAhC,EAAyCzQ,IAAzC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;EAzkBF;EAAA;EAAA,iCA8lBgBgJ,IA9lBhB,EA8lBsBvH,KA9lBtB,EA8lB8BzB,IA9lB9B;EA+lBI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB0I,YAArB,CAAkCjQ,KAAlC,EAAyCzB,IAAzC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;EAtpBF;EAAA;EAAA,4BA+qBWgJ,IA/qBX,EA+qBiBuI,EA/qBjB,EA+qBqBvR,IA/qBrB;EAgrBI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBuW,OAArB,CAA6BhO,EAA7B,EAAiCvR,IAAjC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;EAvuBF;EAAA;EAAA,+BAgwBcgJ,IAhwBd,EAgwBoB8E,KAhwBpB,EAgwB2B9N,IAhwB3B;EAiwBI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBwW,UAArB,CAAgC1R,KAAhC,EAAuC9N,IAAvC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;EAxzBF;EAAA;EAAA,yBAg1BQgJ,IAh1BR,EAg1BcuI,EAh1Bd,EAg1BkBvR,IAh1BlB;EAi1BI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqByW,IAArB,CAA0BlO,EAA1B,EAA8BvR,IAA9B,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;EAx4BF;EAAA;EAAA,4BAi6BWgJ,IAj6BX,EAi6BiB8E,KAj6BjB,EAi6BwB9N,IAj6BxB;EAk6BI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB0W,OAArB,CAA6B5R,KAA7B,EAAoC9N,IAApC,CAAP;EACD;EAED;;;;;;;;;;EAr6BF;EAAA;EAAA,8BA86BagJ,IA96Bb;EA+6BI,aAAO,KAAK+a,SAAL,CAAe/a,IAAf,EAAqB+V,SAArB,EAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;EAl7BF;EAAA;EAAA,uBAs8BM/V,IAt8BN,EAs8BYxC,MAt8BZ;EAu8BI,aAAO,KAAKud,SAAL,CAAe/a,IAAf,EAAqByI,EAArB,CAAwBjL,MAAxB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;EA18BF;EAAA;EAAA,wBAi+BOwC,IAj+BP,EAi+BaqB,KAj+Bb,EAi+BoByD,KAj+BpB,EAi+B2B9N,IAj+B3B;EAk+BI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB2W,GAArB,CAAyBtV,KAAzB,EAAgCyD,KAAhC,EAAuC9N,IAAvC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAr+BF;EAAA;EAAA,2BA8gCUgJ,IA9gCV,EA8gCgByH,OA9gChB,EA8gCyBzQ,IA9gCzB;EA+gCI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqByJ,MAArB,CAA4BhC,OAA5B,EAAqCzQ,IAArC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;;EAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAxkCF;EAAA;EAAA,2BAqmCUgJ,IArmCV,EAqmCgBuI,EArmChB,EAqmCoB9P,KArmCpB,EAqmC2BzB,IArmC3B;EAsmCI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB4W,MAArB,CAA4BrO,EAA5B,EAAgC9P,KAAhC,EAAuCzB,IAAvC,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;;EAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA/pCF;EAAA;EAAA,8BA2rCagJ,IA3rCb,EA2rCmBvH,KA3rCnB,EA2rC0BqM,KA3rC1B,EA2rCiC9N,IA3rCjC;EA4rCI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB+W,SAArB,CAA+Bte,KAA/B,EAAsCqM,KAAtC,EAA6C9N,IAA7C,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAnvCF;EAAA;EAAA,+BA8wCcgJ,IA9wCd,EA8wCoBxC,MA9wCpB,EA8wC4BxG,IA9wC5B;EA+wCI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqBgX,UAArB,CAAgCxZ,MAAhC,EAAwCxG,IAAxC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAlxCF;EAAA;EAAA,6BA6yCYgJ,IA7yCZ,EA6yCkBxC,MA7yClB,EA6yC0BxG,IA7yC1B;EA8yCI,aAAO,KAAK+jB,SAAL,CAAe/a,IAAf,EAAqB6J,QAArB,CAA8BrM,MAA9B,EAAsCxG,IAAtC,CAAP;EACD;EA/yCH;;EAAA;EAAA,EAA+B2K,SAA/B;;EC1CA,IAAMnN,QAAM,GAAG,aAAf;EACA,IAAMmnB,wBAAwB,GAAG,CAC/B,KAD+B,EAE/B,SAF+B,EAG/B,aAH+B,EAI/B,QAJ+B,EAK/B,KAL+B,EAM/B,QAN+B,EAO/B,OAP+B,EAQ/B,OAR+B,EAS/B,QAT+B,EAU/B,SAV+B,CAAjC;EAYA,IAAMC,oBAAoB,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,eAA7B,EAA8C,WAA9C,EAA2D,cAA3D,EAA2E,WAA3E,CAA7B;;EAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAU7b,IAAV,EAAgB8b,QAAhB,EAA0B9kB,IAA1B;EACf,MAAM+kB,MAAM,GAAG,KAAKC,iBAAL,CAAuBhc,IAAvB,EAA6B8b,QAA7B,CAAf;;EACA,MAAIvlB,KAAK,CAACM,UAAN,CAAiBklB,MAAjB,CAAJ,EAA8B;EAC5B,WAAOA,MAAM,CAAC/b,IAAD,EAAO8b,QAAP,EAAiB9kB,IAAjB,CAAb;EACD;;EACD,SAAO+kB,MAAP;EACD,CAND;;EAkCA,IAAME,oBAAoB,GAAG;EAC3B;;;;;;;;;;EAUAC,EAAAA,cAAc,EAAE,IAXW;;EAa3B;;;;;;;;;;EAUAC,EAAAA,iBAAiB,EAAE;EAvBQ,CAA7B;EA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsDqBC;;;;;EAQnB;;;UAAaplB,2EAAwB;;;;EACnC,qHAAWilB,uBAAyBjlB,KAApC;EAPF,sBAAA,GAA+C,EAA/C;EACA,2BAAA,GAAoB,EAApB;EACA,yBAAA,GAAkB,EAAlB;EAqLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4CA,oBAAA,GAAa6kB,QAAb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6CA,uBAAA,GAAgBA,QAAhB;EA1QE,UAAKQ,eAAL,GAAuB,MAAKA,eAAL,IAAwBhP,UAA/C;;EACD;EAED;;;;;;;;;;;;;;;2BAWMrN,MAAMlF,QAAQ9D;EAClB,UAAIoN,IAAI,GAAGpN,IAAI,CAACsT,GAAL,GAAWxP,MAAM,CAACsJ,IAAlB,GAAyBtJ,MAApC;;EACA,UAAIsJ,IAAI,IAAI7N,KAAK,CAACM,UAAN,CAAiB,KAAKylB,UAAtB,CAAZ,EAA+C;EAC7ClY,QAAAA,IAAI,GAAG,KAAKkY,UAAL,CAAgBtc,IAAhB,EAAsBoE,IAAtB,EAA4BpN,IAA5B,CAAP;;EACA,YAAIA,IAAI,CAACsT,GAAT,EAAc;EACZxP,UAAAA,MAAM,CAACsJ,IAAP,GAAcA,IAAd;EACD,SAFD,MAEO;EACLtJ,UAAAA,MAAM,GAAGsJ,IAAT;EACD;EACF;;EACD,aAAOtJ,MAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqCA;;;;;;;;;;;yCAQoBkF;0CAAS9D;EAAAA,QAAAA;;;EAC3B,UAAMU,IAAI,GAAGV,IAAI,CAACW,KAAL,EAAb;EACA,WAAKH,IAAL,cAAUE,IAAV,EAAgBoD,IAAhB,SAAyB9D,IAAzB;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCA0CY8D,MAAMoE,MAAMpN;EACtB,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyB4H,GAAzB,CAA6BxD,IAA7B,EAAmCpN,IAAnC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAwBIgJ;EACF,UAAMvH,KAAK,GAAQ,EAAnB;EACA,UAAM6iB,QAAQ,GAAG,IAAjB;EACA,UAAM/D,OAAO,GAAGqE,oBAAoB,CAACtW,MAArB,CAA4B0V,oBAA5B,EAAkD1V,MAAlD,CAAyDqW,wBAAzD,CAAhB;EAEApE,MAAAA,OAAO,CAAClhB,OAAR,CAAgB,UAAAmjB,MAAM;EACpB/gB,QAAAA,KAAK,CAAC+gB,MAAD,CAAL,GAAgB;EACd4B,UAAAA,QAAQ,EAAE,IADI;EAEd3lB,UAAAA,KAFc;iDAEJyG;EAAAA,cAAAA;;;EACR,mBAAOof,QAAQ,CAAC9B,MAAD,CAAR,OAAA8B,QAAQ,GAAStb,IAAT,SAAkB9D,IAAlB,EAAf;EACD;EAJa,SAAhB;EAMD,OAPD;EAQAzD,MAAAA,KAAK,CAACsiB,SAAN,GAAkB;EAChBK,QAAAA,QAAQ,EAAE,IADM;EAEhB3lB,QAAAA,KAFgB;EAGd,iBAAO6lB,QAAQ,CAACP,SAAT,CAAmB/a,IAAnB,CAAP;EACD;EAJe,OAAlB;EAMAvH,MAAAA,KAAK,CAACoQ,aAAN,GAAsB;EACpBuS,QAAAA,QAAQ,EAAE,IADU;EAEpB3lB,QAAAA,KAFoB;EAGlB,iBAAO6lB,QAAQ,CAACzS,aAAT,CAAuB7I,IAAvB,CAAP;EACD;EAJmB,OAAtB;EAMA,aAAO7K,MAAM,CAACuF,MAAP,CAAc,IAAd,EAAoBjC,KAApB,CAAP;EACD;EA+FD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA6CWuH,MAAMoE,MAAMmE,IAAIvR;;;EACzB,WAAKglB,iBAAL,CAAuBhc,IAAvB,EAA6BuI,EAA7B,IAAmC,UAACvI,IAAD,EAAOuI,EAAP,EAAWvR,IAAX;EAAA,eAAoB,MAAI,CAACmH,GAAL,CAAS6B,IAAT,EAAeuI,EAAf,CAApB;EAAA,OAAnC;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCA8CcvI,MAAMoE,MAAMmY,MAAMvlB;;;EAC9B,WAAKglB,iBAAL,CAAuBhc,IAAvB,EAA6Buc,IAA7B,IAAqC,UAACvc,IAAD,EAAOuc,IAAP,EAAavlB,IAAb;EAAA,eAAsB,MAAI,CAACwE,MAAL,CAAYwE,IAAZ,EAAkBzJ,KAAK,CAACuH,QAAN,CAAeye,IAAf,CAAlB,CAAtB;EAAA,OAArC;EACD;EAED;;;;;;;;;;;;;;;;EAWE,UAAM/iB,OAAO,GAAG,EAAhB;EACAjD,MAAAA,KAAK,CAACI,MAAN,CAAa,KAAK6lB,YAAlB,EAAgC,UAAC3Z,UAAD,EAAa7C,IAAb;EAC9BxG,QAAAA,OAAO,CAACwG,IAAD,CAAP,GAAgB6C,UAAU,CAACqL,SAAX,EAAhB;EACA,QAAA,MAAI,CAAC8N,iBAAL,CAAuBhc,IAAvB,IAA+B,EAA/B;EACD,OAHD;EAIA,aAAOxG,OAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAmCQwG,MAAMxC;;;YAAQxG,2EAAY;EAChC,aAAO,wEAAagJ,IAAb,EAAmBxC,MAAnB,EAA2BxG,IAA3B,EAAiC4R,IAAjC,CAAsC,UAAA9N,MAAM;EAAA,eAAI,MAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAJ;EAAA,OAA5C,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAwCYgJ,MAAMyH;;;YAASzQ,2EAAY;EACrC,aAAO,4EAAiBgJ,IAAjB,EAAuByH,OAAvB,EAAgCzQ,IAAhC,EAAsC4R,IAAtC,CAA2C,UAAA9N,MAAM;EAAA,eAAI,MAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAJ;EAAA,OAAjD,CAAP;EACD;;;mCAEagJ;YAAMhJ,2EAAmB;EACrC,UAAMylB,IAAI,GAAG,IAAb;;EACA,UAAM/e,MAAM,iFAAsBsC,IAAtB,EAA4BhJ,IAA5B,CAAZ;;EACAylB,MAAAA,IAAI,CAACC,eAAL,CAAqB1c,IAArB,IAA6B,EAA7B;EACAyc,MAAAA,IAAI,CAACT,iBAAL,CAAuBhc,IAAvB,IAA+B,EAA/B;EACA,UAAI,CAACtC,MAAM,CAACC,YAAZ,EAA0BxI,MAAM,CAAC4R,cAAP,CAAsBrJ,MAAtB,EAA8B,cAA9B,EAA8C;EAAEjI,QAAAA,KAAK,EAAE;EAAT,OAA9C;EAE1B,UAAMknB,cAAc,GAAQ;EAC1B;EACAC,QAAAA,MAAM,EAAE,EAFkB;EAG1B;EACAlV,QAAAA,SAAS,EAAE,IAJe;EAK1B;EACAhK,QAAAA,MAAM,EAANA;EAN0B,OAA5B;;EASA,UAAI1G,IAAI,IAAI,gBAAgBA,IAA5B,EAAkC;EAChC2lB,QAAAA,cAAc,CAACvP,UAAf,GAA4BpW,IAAI,CAACoW,UAAjC;EACD;;;EAGD,UAAMvK,UAAU,GAAI4Z,IAAI,CAACD,YAAL,CAAkBxc,IAAlB,IAA0B,IAAIyc,IAAI,CAACJ,eAAT,CAAyB,IAAzB,EAA+BM,cAA/B,CAA9C;EAEA,UAAM7M,MAAM,GAAGpS,MAAM,CAACoS,MAAP,IAAkB,EAAjC;EACA,UAAM2B,UAAU,GAAG3B,MAAM,CAAC2B,UAAP,IAAqB,EAAxC;;EAEAlb,MAAAA,KAAK,CAACI,MAAN,CAAa8a,UAAb,EAAyB,UAACza,IAAD,EAAOoH,IAAP;EACvB,YAAIpH,IAAI,CAAC6lB,OAAT,EAAkB;EAChBha,UAAAA,UAAU,CAACia,WAAX,CAAuB1e,IAAvB;EACD;EACF,OAJD;EAOA;;EACAyE,MAAAA,UAAU,CAACia,WAAX,CAAuB,iBAAvB,EAA0C,CAAC,GAAD,CAA1C,EAAiD;EAC/ClR,QAAAA,WAD+C,uBAClChO,GADkC;EAE7C,iBAAOiF,UAAU,CAAC+Z,MAAX,CAAkB/Z,UAAU,CAAC0K,QAAX,CAAoB3P,GAApB,CAAlB,CAAP;EACD;EAH8C,OAAjD;EAMAiF,MAAAA,UAAU,CAACxF,EAAX,CAAc,KAAd,EAAqB;6CAAInB;EAAAA,UAAAA;;;EACvBugB,QAAAA,IAAI,CAACM,kBAAL,OAAAN,IAAI,GAAoBzc,IAApB,SAA6B9D,IAA7B,EAAJ;EACD,OAFD;EAIA,aAAOwB,MAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAwCSsC,MAAMuI;;;YAAIvR,2EAAY;EAC7B,aAAO,yEAAcgJ,IAAd,EAAoBuI,EAApB,EAAwBvR,IAAxB,EAA8B4R,IAA9B,CAAmC,UAAA9N,MAAM;EAC9C,YAAM0C,MAAM,GAAG,MAAI,CAACqL,aAAL,CAAmB7I,IAAnB,EAAyBU,MAAzB,CAAgC6H,EAAhC,EAAoCvR,IAApC,CAAf;;EAEA,YAAIA,IAAI,CAACsT,GAAT,EAAc;EACZxP,UAAAA,MAAM,CAACsJ,IAAP,GAAc5G,MAAd;EACD,SAFD,MAEO;EACL1C,UAAAA,MAAM,GAAG0C,MAAT;EACD;;EACD,eAAO,MAAI,CAACkf,eAAL,CAAqB1c,IAArB,EAA2BuI,EAA3B,CAAP;EACA,eAAO,MAAI,CAACyT,iBAAL,CAAuBhc,IAAvB,EAA6BuI,EAA7B,CAAP;EACA,eAAOzN,MAAP;EACD,OAXM,CAAP;EAYD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAsCYkF,MAAM8E;;;YAAO9N,2EAAY;EACnC,aAAO,4EAAiBgJ,IAAjB,EAAuB8E,KAAvB,EAA8B9N,IAA9B,EAAoC4R,IAApC,CAAyC,UAAA9N,MAAM;EACpD,YAAM2M,OAAO,GAAG,MAAI,CAACoB,aAAL,CAAmB7I,IAAnB,EAAyBkO,SAAzB,CAAmCpJ,KAAnC,EAA0C9N,IAA1C,CAAhB;;EAEA,YAAIA,IAAI,CAACsT,GAAT,EAAc;EACZxP,UAAAA,MAAM,CAACsJ,IAAP,GAAcqD,OAAd;EACD,SAFD,MAEO;EACL3M,UAAAA,MAAM,GAAG2M,OAAT;EACD;;EACD,YAAM8U,IAAI,GAAG,MAAI,CAACS,SAAL,CAAehd,IAAf,EAAqB8E,KAArB,EAA4B9N,IAA5B,CAAb;;EACA,eAAO,MAAI,CAAC0lB,eAAL,CAAqB1c,IAArB,EAA2Buc,IAA3B,CAAP;EACA,eAAO,MAAI,CAACP,iBAAL,CAAuBhc,IAAvB,EAA6Buc,IAA7B,CAAP;EACA,eAAOzhB,MAAP;EACD,OAZM,CAAP;EAaD;;;4BAEMkF,MAAMuI,IAAIvR;EACfiJ,MAAAA,OAAO,CAACwb,IAAR,CAAa,yDAAb;EACA,aAAO,KAAK/a,MAAL,CAAYV,IAAZ,EAAkBuI,EAAlB,EAAsBvR,IAAtB,CAAP;EACD;;;+BAESgJ,MAAM8E,OAAO9N;EACrBiJ,MAAAA,OAAO,CAACwb,IAAR,CAAa,+DAAb;EACA,aAAO,KAAKvN,SAAL,CAAelO,IAAf,EAAqB8E,KAArB,EAA4B9N,IAA5B,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BAgCMgJ,MAAMuI;;;YAAIvR,2EAAY;EAC1B,UAAM0G,MAAM,GAAG,KAAKqd,SAAL,CAAe/a,IAAf,CAAf;EACA,UAAMid,YAAY,GAAG,KAAKP,eAAL,CAAqB1c,IAArB,EAA2BuI,EAA3B,CAArB;EACA,UAAM2T,cAAc,GAAGllB,IAAI,CAACklB,cAAL,KAAwBtlB,SAAxB,GAAoC,KAAKslB,cAAzC,GAA0DllB,IAAI,CAACklB,cAAtF;;EACA3lB,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc0G,MAAd;;EAEA,UACEuf,YAAY,KACX1mB,KAAK,CAACM,UAAN,CAAiBqlB,cAAjB,IAAmCA,cAAc,CAACrmB,IAAf,CAAoB,IAApB,EAA0BmK,IAA1B,EAAgCuI,EAAhC,EAAoCvR,IAApC,CAAnC,GAA+EklB,cADpE,CADd,EAGE;EACA,eAAOe,YAAP;EACD;;EACD,UAAMhe,IAAI,GAAG,KAAKie,UAAL,CAAgBld,IAAhB,EAAsBuI,EAAtB,EAA0BvR,IAA1B,CAAb;;EAEA,UAAIA,IAAI,CAACmmB,KAAL,IAAc,CAACle,IAAnB,EAAyB;EACvB,YAAMme,OAAO,GAAI,KAAKV,eAAL,CAAqB1c,IAArB,EAA2BuI,EAA3B,0EAA4CvI,IAA5C,EAAkDuI,EAAlD,EAAsDvR,IAAtD,CAAjB;;EACA,eAAOomB,OAAO,CAACxU,IAAR,CACL,UAAA9N,MAAM;EACJ,iBAAO,MAAI,CAAC4hB,eAAL,CAAqB1c,IAArB,EAA2BuI,EAA3B,CAAP;EACAzN,UAAAA,MAAM,GAAG,MAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAT;;EACA,UAAA,MAAI,CAACqmB,SAAL,CAAerd,IAAf,EAAqBlF,MAArB,EAA6ByN,EAA7B,EAAiCvR,IAAjC;;EACA,iBAAO8D,MAAP;EACD,SANI,EAOL,UAAAF,GAAG;EACD,iBAAO,MAAI,CAAC8hB,eAAL,CAAqB1c,IAArB,EAA2BuI,EAA3B,CAAP;EACA,iBAAOhS,KAAK,CAACiK,MAAN,CAAa5F,GAAb,CAAP;EACD,SAVI,CAAP;EAYD;;EAED,aAAOrE,KAAK,CAACoK,OAAN,CAAc1B,IAAd,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAgCSe,MAAM8E;;;YAAO9N,2EAAY;EAChC,UAAM0G,MAAM,GAAG,KAAKqd,SAAL,CAAe/a,IAAf,CAAf;EACA,UAAMuc,IAAI,GAAG,KAAKS,SAAL,CAAehd,IAAf,EAAqB8E,KAArB,EAA4B9N,IAA5B,CAAb;EACA,UAAMimB,YAAY,GAAG,KAAKP,eAAL,CAAqB1c,IAArB,EAA2Buc,IAA3B,CAArB;EACA,UAAMJ,iBAAiB,GAAGnlB,IAAI,CAACmlB,iBAAL,KAA2BvlB,SAA3B,GAAuC,KAAKulB,iBAA5C,GAAgEnlB,IAAI,CAACmlB,iBAA/F;;EACA5lB,MAAAA,KAAK,CAACC,CAAN,CAAQQ,IAAR,EAAc0G,MAAd;;EAEA,UACEuf,YAAY,KACX1mB,KAAK,CAACM,UAAN,CAAiBslB,iBAAjB,IAAsCA,iBAAiB,CAACtmB,IAAlB,CAAuB,IAAvB,EAA6BmK,IAA7B,EAAmC8E,KAAnC,EAA0C9N,IAA1C,CAAtC,GAAwFmlB,iBAD7E,CADd,EAGE;EACA,eAAOc,YAAP;EACD;;EAED,UAAMvM,KAAK,GAAG,KAAK4M,aAAL,CAAmBtd,IAAnB,EAAyBuc,IAAzB,EAA+BvlB,IAA/B,CAAd;;EAEA,UAAIA,IAAI,CAACmmB,KAAL,IAAc,CAACzM,KAAnB,EAA0B;EACxB,YAAM0M,OAAO,GAAI,KAAKV,eAAL,CAAqB1c,IAArB,EAA2Buc,IAA3B,6EAAiDvc,IAAjD,EAAuD8E,KAAvD,EAA8D9N,IAA9D,CAAjB;;EACA,eAAOomB,OAAO,CAACxU,IAAR,CACL,UAAA9N,MAAM;EACJ,iBAAO,OAAI,CAAC4hB,eAAL,CAAqB1c,IAArB,EAA2Buc,IAA3B,CAAP;EACAzhB,UAAAA,MAAM,GAAG,OAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAT;;EACA,UAAA,OAAI,CAACumB,YAAL,CAAkBvd,IAAlB,EAAwBlF,MAAxB,EAAgCyhB,IAAhC,EAAsCvlB,IAAtC;;EACA,iBAAO8D,MAAP;EACD,SANI,EAOL,UAAAF,GAAG;EACD,iBAAO,OAAI,CAAC8hB,eAAL,CAAqB1c,IAArB,EAA2Buc,IAA3B,CAAP;EACA,iBAAOhmB,KAAK,CAACiK,MAAN,CAAa5F,GAAb,CAAP;EACD,SAVI,CAAP;EAYD;;EAED,aAAOrE,KAAK,CAACoK,OAAN,CAAc+P,KAAd,CAAP;EACD;EAED;;;;;;;;;;;;oCASe1Q;EACb,UAAM6C,UAAU,GAAG,KAAK2Z,YAAL,CAAkBxc,IAAlB,CAAnB;;EACA,UAAI,CAAC6C,UAAL,EAAiB;EACf,cAAMtM,KAAK,CAACqE,GAAN,WAAapG,QAAb,qBAAqCwL,IAArC,EAA2C,GAA3C,EAAgD,YAAhD,CAAN;EACD;;EACD,aAAO6C,UAAP;EACD;EAED;;;;;;;;;;;;;;;;;;gCAeW7C,MAAM8E,OAAO9N;EACtB,aAAOT,KAAK,CAACyK,MAAN,CAAa8D,KAAK,IAAI,EAAtB,CAAP;EACD;;;6BAEO9E,MAAMyH,SAASzQ;EACrBiJ,MAAAA,OAAO,CAACwb,IAAR,CAAa,uDAAb;EACA,aAAO,KAAK7T,GAAL,CAAS5H,IAAT,EAAeyH,OAAf,EAAwBzQ,IAAxB,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA6BQgJ,MAAMuI,IAAIvR;EAChB,UAAMwG,MAAM,GAAG,KAAKqL,aAAL,CAAmB7I,IAAnB,EAAyBU,MAAzB,CAAgC6H,EAAhC,EAAoCvR,IAApC,CAAf;;EACA,UAAIwG,MAAJ,EAAY;EACV,aAAKggB,aAAL,CAAmBxd,IAAnB,EAAyB,CAACxC,MAAD,CAAzB,EAAmCxG,IAAnC;EACD;;EACD,aAAOwG,MAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAiCWwC,MAAM8E,OAAO9N;EACtB,UAAI,CAAC8N,KAAD,IAAU,CAAC3P,MAAM,CAACwD,IAAP,CAAYmM,KAAZ,EAAmB5M,MAAlC,EAA0C;EACxC,aAAK8jB,iBAAL,CAAuBhc,IAAvB,IAA+B,EAA/B;EACD,OAFD,MAEO;EACL,aAAKgc,iBAAL,CAAuBhc,IAAvB,EAA6B,KAAKgd,SAAL,CAAehd,IAAf,EAAqB8E,KAArB,EAA4B9N,IAA5B,CAA7B,IAAkEJ,SAAlE;EACD;;EACD,UAAM6Q,OAAO,GAAG,KAAKoB,aAAL,CAAmB7I,IAAnB,EAAyBkO,SAAzB,CAAmCpJ,KAAnC,EAA0C9N,IAA1C,CAAhB;;EACA,UAAIyQ,OAAO,CAACvP,MAAZ,EAAoB;EAClB,aAAKslB,aAAL,CAAmBxd,IAAnB,EAAyByH,OAAzB,EAAkCzQ,IAAlC;EACD;;EACD,aAAOyQ,OAAP;EACD;EAED;;;;;;;;;;;;;;;;;oCAcezH,MAAMyH,SAASzQ;;;EAC5B,UAAI,CAACT,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAAL,EAA6B;EAC3BA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EACDlR,MAAAA,KAAK,CAACkH,eAAN,CAAsB,KAAKsd,SAAL,CAAe/a,IAAf,CAAtB,EAA4ChJ,IAA5C,EAAkD,UAACC,GAAD,EAAMU,QAAN;EAChD8P,QAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EACpB,cAAI6J,WAAJ;EACA,cAAIvC,KAAJ;;EACA,cAAI7N,GAAG,CAAC4P,UAAJ,KAAmB5P,GAAG,CAAC2F,IAAJ,KAAayJ,UAAb,IAA2BpP,GAAG,CAAC2F,IAAJ,KAAawJ,WAA3D,CAAJ,EAA6E;EAC3EtB,YAAAA,KAAK,uBAAM7N,GAAG,CAAC4P,UAAV,EAAuB5P,GAAG,CAACwmB,aAAJ,CAAkBjgB,MAAlB,CAAvB,CAAL;EACD,WAFD,MAEO,IAAIvG,GAAG,CAAC2F,IAAJ,KAAawJ,WAAb,IAA4BnP,GAAG,CAACuT,SAApC,EAA+C;EACpD1F,YAAAA,KAAK,GAAG;EACN1C,cAAAA,KAAK,sBACFnL,GAAG,CAACY,WAAJ,GAAkBoP,WADhB,EAC8B;EAC/B,sBAAI1Q,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBvG,GAAG,CAACuT,SAAtB;EAD2B,eAD9B;EADC,aAAR;EAOD,WARM,MAQA,IAAIvT,GAAG,CAAC2F,IAAJ,KAAawJ,WAAb,IAA4BnP,GAAG,CAACwT,WAApC,EAAiD;EACtD3F,YAAAA,KAAK,GAAG;EACN1C,cAAAA,KAAK,sBACFnL,GAAG,CAACwT,WADF,EACgB;EACjBxE,gBAAAA,QAAQ,EAAEhP,GAAG,CAACwmB,aAAJ,CAAkBjgB,MAAlB;EADO,eADhB;EADC,aAAR;EAOD,WARM,MAQA,IAAIvG,GAAG,CAAC2F,IAAJ,KAAauJ,aAAjB,EAAgC;EACrCkB,YAAAA,WAAW,GAAG,OAAI,CAAC3G,MAAL,CAAYzJ,GAAG,CAACI,QAAhB,EAA0BJ,GAAG,CAACwmB,aAAJ,CAAkBjgB,MAAlB,CAA1B,EAAqD7F,QAArD,CAAd;EACD;;EACD,cAAImN,KAAJ,EAAW;EACTuC,YAAAA,WAAW,GAAG,OAAI,CAAC6G,SAAL,CAAejX,GAAG,CAACI,QAAnB,EAA6ByN,KAA7B,EAAoCnN,QAApC,CAAd;EACD;;EACD,cAAI0P,WAAJ,EAAiB;EACf,gBAAI9Q,KAAK,CAAC0D,OAAN,CAAcoN,WAAd,KAA8B,CAACA,WAAW,CAACnP,MAA/C,EAAuD;EACrD;EACD;;EACD,gBAAIjB,GAAG,CAAC2F,IAAJ,KAAayJ,UAAjB,EAA6B;EAC3BgB,cAAAA,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAzB;EACD;;EACDpQ,YAAAA,GAAG,CAACgR,aAAJ,CAAkBzK,MAAlB,EAA0B6J,WAA1B;EACD;EACF,SApCD;EAqCD,OAtCD;EAuCD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;;EAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiCQrH,MAAMuI,IAAI/K;;;YAAQxG,2EAAY;EACpC,aAAO,wEAAagJ,IAAb,EAAmBuI,EAAnB,EAAuB/K,MAAvB,EAA+BxG,IAA/B,EAAqC4R,IAArC,CAA0C,UAAA9N,MAAM;EAAA,eAAI,OAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAJ;EAAA,OAAhD,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;;EAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAiCWgJ,MAAMvH,OAAOqM;;;YAAO9N,2EAAY;EACzC,aAAO,2EAAgBgJ,IAAhB,EAAsBvH,KAAtB,EAA6BqM,KAA7B,EAAoC9N,IAApC,EAA0C4R,IAA1C,CAA+C,UAAA9N,MAAM;EAAA,eAAI,OAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAJ;EAAA,OAArD,CAAP;EACD;EAED;;;;;;;;;EAQA;;;;;;;;;;;;;;;;;;EAiBA;;;;;;;;;EASA;;;;;;;;;;;;;;;;;;;EAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iCAmCYgJ,MAAMyH;;;YAASzQ,2EAAY;EACrC,aAAO,4EAAiBgJ,IAAjB,EAAuByH,OAAvB,EAAgCzQ,IAAhC,EAAsC4R,IAAtC,CAA2C,UAAA9N,MAAM;EAAA,eAAI,OAAI,CAACyd,IAAL,CAAUvY,IAAV,EAAgBlF,MAAhB,EAAwB9D,IAAxB,CAAJ;EAAA,OAAjD,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA6BKgJ,MAAMyH,SAASzQ;EAClB,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyB4H,GAAzB,CAA6BH,OAA7B,EAAsCzQ,IAAtC,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;8BAqBSgJ,MAAMkE,UAAUC,WAAWnN;EAClC,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyBsE,OAAzB,CAAiCJ,QAAjC,EAA2CC,SAA3C,EAAsDnN,IAAtD,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;kCAoBagJ,MAAuB0d,WAAmB/R,WAAsB3U;EAC3E,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyB8c,WAAzB,CAAqCY,SAArC,EAAgD/R,SAAhD,EAA2D3U,IAA3D,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAuCQgJ,MAAMgO,WAAY7W;EACxB,aAAO,KAAK0R,aAAL,CAAmB7I,IAAnB,EAAyBxE,MAAzB,CAAgCwS,SAAhC,EAA2C7W,OAA3C,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAyBK6I,MAAMuI;EACT,aAAO,KAAKM,aAAL,CAAmB7I,IAAnB,EAAyB7B,GAAzB,CAA6BoK,EAA7B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;6BAoBQvI;;;2CAAS9D;EAAAA,QAAAA;;;EACf,aAAO,4BAAK2M,aAAL,CAAmB7I,IAAnB,GAAyBuF,MAAzB,4BAAmCrJ,IAAnC,CAAP;EACD;EAED;;;;;;;;;;;;;;4BAWO8D,MAAchJ;EACnB,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyB2d,KAAzB,CAA+B3mB,IAA/B,CAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;4BAkBOgJ;EACL,aAAO,KAAK6I,aAAL,CAAmB7I,IAAnB,EAAyB8E,KAAzB,EAAP;EACD;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BA8BQ9E,MAAMhJ;EACZ,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyByJ,MAAzB,CAAgCzS,IAAhC,CAAP;EACD;EAED;;;;;;;;;;;;8BASSgJ,MAAMhJ;EACb,aAAO,KAAK6R,aAAL,CAAmB7I,IAAnB,EAAyBmI,OAAzB,CAAiCnR,IAAjC,CAAP;EACD;;;;IA7wDsCikB;;ECrIzC,IAAMzmB,QAAM,GAAG,kBAAf;EAEA;;;;;;;;;;;;;;;;;;;;;;;;MAuBqBopB;;;;;EAGnB,4BAAanW,OAAb,EAAsBzQ,IAAtB;;;;;EACE,0FAAMyQ,OAAN,EAAezQ,IAAf;;EAGA,QAAI,CAAC,MAAK0Q,SAAV,EAAqB;EACnB,YAAMnR,KAAK,CAACqE,GAAN,eAAiBpG,QAAjB,GAA2B,gBAA3B,EAA6C,GAA7C,EAAkD,WAAlD,EAA+D,MAAKkT,SAApE,CAAN;EACD;;;EACF;;;;+BAESlK,QAAQgX;EAChB;EACA,WAAKoI,MAAL,CAAY,KAAKrP,QAAL,CAAc/P,MAAd,CAAZ,IAAqCgX,SAArC;;EAEA,UAAIje,KAAK,CAACM,UAAN,CAAiB2G,MAAM,CAAC8D,IAAxB,CAAJ,EAAmC;EACjC9D,QAAAA,MAAM,CAAC8D,IAAP,CAAY,GAAZ,EAAiBkT,SAAjB;EACD;EACF;;;iCAEWhX;EACV,aAAO,KAAKof,MAAL,CAAY,KAAKrP,QAAL,CAAc/P,MAAd,CAAZ,CAAP;;EACA,UAAIjH,KAAK,CAACM,UAAN,CAAiB2G,MAAM,CAAC8D,IAAxB,CAAJ,EAAmC;EACjC9D,QAAAA,MAAM,CAAC8D,IAAP,CAAY,GAAZ,EADiC;;EAElC;EACF;;;;0CAEkBpF;EAAAA,QAAAA;;;EACjBmR,MAAAA,UAAU,CAACjY,SAAX,CAAqByY,cAArB,CAAoCzR,KAApC,CAA0C,IAA1C,EAAgDF,IAAhD;;EACA,UAAM2hB,KAAK,GAAG3hB,IAAI,CAAC,CAAD,CAAlB;EAEA;;EACA,UAAI3F,KAAK,CAACyH,QAAN,CAAe6f,KAAf,KAAyBA,KAAK,CAAC/mB,OAAN,CAAc,QAAd,MAA4B,CAAzD,EAA4D;EAC1D,aAAK6W,aAAL,CAAmBzR,IAAI,CAAC,CAAD,CAAvB;EACD;EACF;;;0BAEIuL,SAASzQ;;;EACZ,UAAM0G,MAAM,GAAG,KAAKA,MAApB;EACA,UAAM8W,SAAS,GAAG,IAAIra,IAAJ,GAAWC,OAAX,EAAlB;EACA,UAAMqT,QAAQ,GAAGlX,KAAK,CAAC+B,QAAN,CAAemP,OAAf,KAA2B,CAAClR,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAA7C;;EAEA,UAAIgG,QAAJ,EAAc;EACZhG,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EACDA,MAAAA,OAAO,6EAAaA,OAAb,EAAsBzQ,IAAtB,CAAP;;EAEA,UAAI0G,MAAM,CAACC,YAAP,CAAoBzF,MAApB,IAA8BuP,OAAO,CAACvP,MAA1C,EAAkD;EAChD;EACA;EACAwF,QAAAA,MAAM,CAACC,YAAP,CAAoBtH,OAApB,CAA4B,UAAAY,GAAG;EAC7BA,UAAAA,GAAG,CAAC6mB,gBAAJ,CAAqBrW,OAArB;EACD,SAFD;EAGD;;EAEDA,MAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EAAA,eAAI,MAAI,CAACugB,QAAL,CAAcvgB,MAAd,EAAsBgX,SAAtB,CAAJ;EAAA,OAAtB;EAEA,aAAO/G,QAAQ,GAAGhG,OAAO,CAAC,CAAD,CAAV,GAAgBA,OAA/B;EACD;;;6BAEO4G,YAAYrX;EAClB,UAAM0G,MAAM,GAAG,KAAKA,MAApB;;EACA,UAAMF,MAAM,gFAAgB6Q,UAAhB,EAA4BrX,IAA5B,CAAZ;;EACA,UAAIwG,MAAJ,EAAY;EACV,aAAKwgB,UAAL,CAAgBxgB,MAAhB;EACD;;EAED,UAAIE,MAAM,CAACC,YAAP,CAAoBzF,MAApB,IAA8BsF,MAAlC,EAA0C;EACxCE,QAAAA,MAAM,CAACC,YAAP,CAAoBtH,OAApB,CAA4B,UAAAY,GAAG;EAC7BA,UAAAA,GAAG,CAACgnB,mBAAJ,CAAwBvgB,MAAxB,EAAgC,CAACF,MAAD,CAAhC;EACD,SAFD;EAGD;;EAED,aAAOA,MAAP;EACD;;;gCAEUsH,OAAO9N;EAChB,UAAM0G,MAAM,GAAG,KAAKA,MAApB;;EACA,UAAM+J,OAAO,mFAAmB3C,KAAnB,EAA0B9N,IAA1B,CAAb;;EACAyQ,MAAAA,OAAO,CAACpR,OAAR,CAAgB,KAAK2nB,UAArB,EAAiC,IAAjC;;EAEA,UAAItgB,MAAM,CAACC,YAAP,CAAoBzF,MAApB,IAA8BuP,OAAO,CAACvP,MAA1C,EAAkD;EAChDwF,QAAAA,MAAM,CAACC,YAAP,CAAoBtH,OAApB,CAA4B,UAAAY,GAAG;EAC7BA,UAAAA,GAAG,CAACgnB,mBAAJ,CAAwBvgB,MAAxB,EAAgC+J,OAAhC;EACD,SAFD;EAGD;;EAED,aAAOA,OAAP;EACD;;;;IAzF2C4F;;ECZ9C,IAAM6Q,kBAAkB,GAAkB;EACxC;;;;;;;;;EASAC,EAAAA,eAAe,EAAE,IAVuB;EAYxC9B,EAAAA,eAAe,EAAEuB;EAZuB,CAA1C;EAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiDqBQ;;;;;EAGnB;UAAapnB,2EAAsB;;;;EACjC;oHACWknB,qBAAuBlnB;EACnC;EAED;;;;;;;;;;mCAMcgJ,MAAMhJ;EAClB;EACA,UAAMylB,IAAI,GAAG,IAAb;;EACA,UAAM/e,MAAM,+EAAsBsC,IAAtB,EAA4BhJ,IAA5B,CAAZ;;EACA,UAAMiQ,WAAW,GAAGvJ,MAAM,CAACuJ,WAA3B;EACA,UAAMpE,UAAU,GAAG,KAAKgG,aAAL,CAAmB7I,IAAnB,CAAnB;EAEAtC,MAAAA,MAAM,CAACC,YAAP,CAAoBtH,OAApB,CAA4B,UAAAY,GAAG;EAC7B,YAAMI,QAAQ,GAAGJ,GAAG,CAACI,QAArB;EACA,YAAMI,UAAU,GAAGR,GAAG,CAACQ,UAAvB;EACA,YAAMvB,IAAI,mBAAYuB,UAAZ,CAAV;EACA,YAAMoP,UAAU,GAAG5P,GAAG,CAAC4P,UAAvB;EACA,YAAMjK,IAAI,GAAG3F,GAAG,CAAC2F,IAAjB;EACA,YAAMyhB,UAAU,GAAG;EAAE9mB,UAAAA,KAAK,EAAEsP;EAAT,SAAnB;EACA,YAAIhO,UAAJ;;EAEA,YAAM0D,MAAM,GAAG,SAATA,MAAS;EACb,iBAAO,KAAKkF,IAAL,CAAUvL,IAAV,CAAP;EACD,SAFD;;EAIA,YAAI0G,IAAI,KAAKuJ,aAAb,EAA4B;EAC1B,cAAI,CAACtD,UAAU,CAAC+K,OAAX,CAAmB/G,UAAnB,CAAL,EAAqC;EACnChE,YAAAA,UAAU,CAACia,WAAX,CAAuBjW,UAAvB;EACD;;EAEDhO,UAAAA,UAAU,GAAG;EACXsF,YAAAA,GAAG,EAAE5B,MADM;EAEX;EACA;EACAqE,YAAAA,GAJW,eAINpD,MAJM;EAKT;EACA,kBAAMsM,aAAa,GAAG,KAAKrI,IAAL,CAAUvL,IAAV,CAAtB;;;EAEA,kBAAIsH,MAAM,KAAKsM,aAAf,EAA8B;EAC5B,uBAAOA,aAAP;EACD;;EACD,kBAAMvB,EAAE,GAAGhS,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB8I,WAAhB,CAAX;EACA,kBAAM8C,UAAU,GAAG9S,GAAG,CAACqnB,UAAJ,CAAe5gB,MAAf,CAAnB;EAGA;;EACA,kBAAIoM,aAAa,IAAIC,UAArB,EAAiC;EAC/B,qBAAKwU,qBAAL,CAA2BzU,aAA3B,EAA0CvB,EAA1C,EAA8CwB,UAA9C,EAA0D9C,WAA1D;EACD;;EACD,kBAAIzJ,MAAJ,EAAY;EACV;EACA,oBAAMghB,kBAAkB,GAAGvnB,GAAG,CAACY,WAAJ,GAAkBoP,WAA7C;EACA,oBAAMiB,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBghB,kBAAlB,CAAlB,CAHU;;EAMV,oBAAItW,SAAS,KAAKtR,SAAd,IAA2B,KAAK6K,IAAL,CAAU,GAAV,CAA/B,EAA+C;EAC7CjE,kBAAAA,MAAM,GAAGif,IAAI,CAACte,GAAL,CAAS9G,QAAT,EAAmB6Q,SAAnB,KAAiC1K,MAA1C;EACD,iBARS;EAWV;EACA;;;EACA+D,gBAAAA,WAAW,CAAC,IAAD,EAAO9J,UAAP,EAAmB+F,MAAnB,CAAX;EACA4D,gBAAAA,WAAW,CAAC,IAAD,EAAOyF,UAAP,EAAmBqB,SAAnB,CAAX;EACArF,gBAAAA,UAAU,CAAC4b,WAAX,CAAuB,IAAvB,EAA6BJ,UAA7B;;EAEA,oBAAItU,UAAJ,EAAgB;EACd,uBAAK2U,oBAAL,CAA0BlhB,MAA1B,EAAkC+K,EAAlC,EAAsCwB,UAAtC,EAAkD9C,WAAlD;EACD;EACF,eApBD,MAoBO;EACL;EACA;EACA;EACA1F,gBAAAA,WAAW,CAAC,IAAD,EAAO9J,UAAP,EAAmBb,SAAnB,CAAX;EACD;;EACD,qBAAO4G,MAAP;EACD;EA9CU,WAAb;EAiDA,cAAImhB,oBAAoB,GAAGxpB,MAAM,CAAC2D,wBAAP,CAAgC4E,MAAM,CAAC4Z,WAAP,CAAmBliB,SAAnD,EAA8DyR,UAA9D,CAA3B;;EACA,cAAI,CAAC8X,oBAAL,EAA2B;EACzBA,YAAAA,oBAAoB,GAAG;EACrB5lB,cAAAA,UAAU,EAAE;EADS,aAAvB;EAGD;;EACD,cAAM2b,WAAW,GAAGiK,oBAAoB,CAACxgB,GAAzC;;EACAwgB,UAAAA,oBAAoB,CAACxgB,GAArB,GAA2B;EACzB,gBAAIuW,WAAJ,EAAiB;EACf,qBAAOA,WAAW,CAAC7e,IAAZ,CAAiB,IAAjB,CAAP;EACD;;EACD,mBAAO,KAAK4L,IAAL,iBAAmBoF,UAAnB,EAAP;EACD,WALD;;EAMA,cAAM8N,WAAW,GAAGgK,oBAAoB,CAAC/d,GAAzC;;EACA+d,UAAAA,oBAAoB,CAAC/d,GAArB,GAA2B,UAAUnL,KAAV;;;EACzB,gBAAIkf,WAAJ,EAAiB;EACfA,cAAAA,WAAW,CAAC9e,IAAZ,CAAiB,IAAjB,EAAuBJ,KAAvB;EACD;;EACD,gBAAMqU,aAAa,GAAGvT,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB1G,UAAhB,CAAtB;EACA,gBAAM8Q,EAAE,GAAGhS,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB8I,WAAhB,CAAX;EACA,gBAAM8C,UAAU,GAAG9S,GAAG,CAACqnB,UAAJ,CAAe5gB,MAAf,CAAnB;EACA,gBAAMkhB,eAAe,GAAG9U,aAAa,GAAGvT,KAAK,CAAC4H,GAAN,CAAU2L,aAAV,EAAyB7S,GAAG,CAACY,WAAJ,GAAkBoP,WAA3C,CAAH,GAA6DrQ,SAAlG;;EAEA,gBAAImT,UAAU,IAAID,aAAd,IAA+B8U,eAAe,KAAKhoB,SAAnD,IAAgEgoB,eAAe,KAAKnpB,KAAxF,EAA+F;EAC7F,kBAAIsU,UAAU,CAACnN,IAAX,KAAoByJ,UAAxB,EAAoC;EAClC9E,gBAAAA,WAAW,CAACuI,aAAD,EAAgBC,UAAU,CAACtS,UAA3B,EAAuCb,SAAvC,CAAX;EACD,eAFD,MAEO,IAAImT,UAAU,CAACnN,IAAX,KAAoBwJ,WAAxB,EAAqC;EAC1C,oBAAM4D,QAAQ,GAAGzT,KAAK,CAAC4H,GAAN,CAAU2L,aAAV,EAAyBC,UAAU,CAACtS,UAApC,CAAjB;;EACA,oBAAI8Q,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,kBAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,2BAAIA,KAAK,KAAK,KAAd;EAAA,mBAA5B;EACD,iBAFD,MAEO;EACL1T,kBAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,2BAAIA,KAAK,KAAK,KAAV,IAAkB1B,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBhD,WAAjB,CAA7B;EAAA,mBAA5B;EACD;EACF;EACF;;EAED7F,YAAAA,WAAW,CAAC,IAAD,EAAOyF,UAAP,EAAmBpR,KAAnB,CAAX;EACAoN,YAAAA,UAAU,CAAC4b,WAAX,CAAuB,IAAvB,EAA6BJ,UAA7B;;EAEA,gBAAI5oB,KAAK,KAAKmB,SAAV,IAAuBnB,KAAK,KAAK,IAArC,EAA2C;EACzC,kBAAImpB,eAAe,KAAKhoB,SAAxB,EAAmC;EACjC;EACAL,gBAAAA,KAAK,CAACqK,GAAN,CAAU,IAAV,EAAgBnJ,UAAhB,EAA4Bb,SAA5B;EACD;EACF,aALD,MAKO,IAAI,KAAK6K,IAAL,CAAU,GAAV,CAAJ,EAAoB;EACzB,kBAAMod,WAAW,GAAGpC,IAAI,CAACte,GAAL,CAAS9G,QAAT,EAAmB5B,KAAnB,CAApB;;EACA,kBAAIopB,WAAJ,EAAiB;EACftoB,gBAAAA,KAAK,CAACqK,GAAN,CAAU,IAAV,EAAgBnJ,UAAhB,EAA4BonB,WAA5B;EACD;EACF;EACF,WApCD;;EAqCA1pB,UAAAA,MAAM,CAAC4R,cAAP,CAAsBrJ,MAAM,CAAC4Z,WAAP,CAAmBliB,SAAzC,EAAoDyR,UAApD,EAAgE8X,oBAAhE;EACD,SA1GD,MA0GO,IAAI/hB,IAAI,KAAKwJ,WAAb,EAA0B;EAC/B,cAAMoE,SAAS,GAAGvT,GAAG,CAACuT,SAAtB;EACA,cAAMC,WAAW,GAAGxT,GAAG,CAACwT,WAAxB,CAF+B;;EAK/B,cAAIgS,IAAI,CAACD,YAAL,CAAkBnlB,QAAlB,KAA+BwP,UAA/B,IAA6C,CAAC4V,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BuW,OAA7B,CAAqC/G,UAArC,CAAlD,EAAoG;EAClG4V,YAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BylB,WAA7B,CAAyCjW,UAAzC;EACD;;EAEDhO,UAAAA,UAAU,GAAG;EACXsF,YAAAA,GADW;EAET,kBAAMgW,OAAO,GAAG5X,MAAM,CAAC1G,IAAP,CAAY,IAAZ,CAAhB;;EACA,kBAAI,CAACse,OAAL,EAAc;EACZ,qBAAK7S,IAAL,CAAUpL,IAAV,EAAgB,EAAhB;EACD;;EACD,qBAAOqG,MAAM,CAAC1G,IAAP,CAAY,IAAZ,CAAP;EACD,aAPU;EAQX;EACA;EACA;EACA+K,YAAAA,GAXW,eAWN6G,OAXM;;;EAYT,kBAAIA,OAAO,IAAI,CAAClR,KAAK,CAAC0D,OAAN,CAAcwN,OAAd,CAAhB,EAAwC;EACtCA,gBAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;EACD;;EACD,kBAAMc,EAAE,GAAGhS,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB8I,WAAhB,CAAX;EACA,kBAAMuX,kBAAkB,GAAGvnB,GAAG,CAACY,WAAJ,GAAkBoP,WAA7C;EACA,kBAAM8C,UAAU,GAAG9S,GAAG,CAACqnB,UAAJ,CAAe5gB,MAAf,CAAnB;EACA,kBAAMohB,iBAAiB,GAAG/U,UAAU,CAACtS,UAArC;EACA,kBAAM0c,OAAO,GAAG,KAAK1S,IAAL,CAAUvL,IAAV,KAAmB,EAAnC;EACA,kBAAM6oB,MAAM,GAAG,EAAf;EACA,kBAAMC,SAAS,GAAG,EAAlB;;EAEA,kBAAIvX,OAAJ,EAAa;EACXA,gBAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EACpB;EACA,sBAAM0K,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBghB,kBAAlB,CAAlB;EACA,sBAAM1U,aAAa,GAAGvT,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBshB,iBAAlB,CAAtB;;EACA,sBAAIhV,aAAa,IAAIA,aAAa,KAAK,MAAvC,EAA6C;EAC3C,wBAAMmV,uBAAuB,GAAG1oB,KAAK,CAAC4H,GAAN,CAAU2L,aAAV,EAAyBrS,UAAzB,CAAhC,CAD2C;;EAG3C,wBAAIyQ,SAAS,KAAKtR,SAAlB,EAA6B;EAC3BL,sBAAAA,KAAK,CAACmK,MAAN,CAAaue,uBAAb,EAAsC,UAAAhV,KAAK;EAAA,+BAAIA,KAAK,KAAKzM,MAAd;EAAA,uBAA3C;EACD,qBAFD,MAEO;EACLjH,sBAAAA,KAAK,CAACmK,MAAN,CACEue,uBADF,EAEE,UAAAhV,KAAK;EAAA,+BAAIA,KAAK,KAAKzM,MAAV,IAAoB0K,SAAS,KAAK3R,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBuU,kBAAjB,CAAtC;EAAA,uBAFP;EAID;EACF;;EACD,sBAAItW,SAAS,KAAKtR,SAAlB,EAA6B;EAC3B,wBAAI,MAAI,CAAC6K,IAAL,CAAU,GAAV,CAAJ,EAAoB;EAClB;EACAjE,sBAAAA,MAAM,GAAGif,IAAI,CAACte,GAAL,CAAS9G,QAAT,EAAmB6Q,SAAnB,KAAiC1K,MAA1C;EACD,qBAJ0B;;;EAM3BwhB,oBAAAA,SAAS,CAAC9W,SAAD,CAAT,GAAuB1K,MAAvB;EACD;;EACDuhB,kBAAAA,MAAM,CAAClkB,IAAP,CAAY2C,MAAZ;EACD,iBAzBD;EA0BD;;;EAGD,kBAAIqJ,UAAJ,EAAgB;EACdsN,gBAAAA,OAAO,CAAC9d,OAAR,CAAgB,UAAAmH,MAAM;EACpB;EACA,sBAAM0K,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBghB,kBAAlB,CAAlB;;EACA,sBACGtW,SAAS,KAAKtR,SAAd,IAA2BmoB,MAAM,CAACjoB,OAAP,CAAe0G,MAAf,MAA2B,CAAC,CAAxD,IACC0K,SAAS,KAAKtR,SAAd,IAA2B,EAAEsR,SAAS,IAAI8W,SAAf,CAF9B,EAGE;EACA;EACA,wBAAIvX,OAAJ,EAAa;EACX;EACArG,sBAAAA,WAAW,CAAC5D,MAAD,EAASqJ,UAAT,EAAqBjQ,SAArB,CAAX,CAFW;;EAIX6lB,sBAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BonB,WAA7B,CAAyCjhB,MAAzC,EAAiD6gB,UAAjD;EACD,qBAPD;;;EASA9c,oBAAAA,WAAW,CAAC/D,MAAD,EAASshB,iBAAT,EAA4BloB,SAA5B,CAAX;EACD;EACF,iBAjBD;EAkBAmoB,gBAAAA,MAAM,CAAC1oB,OAAP,CAAe,UAAAmH,MAAM;EACnB;EACA;EACA4D,kBAAAA,WAAW,CAAC5D,MAAD,EAASqJ,UAAT,EAAqB0B,EAArB,CAAX;;EAEAkU,kBAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BonB,WAA7B,CAAyCjhB,MAAzC,EAAiD6gB,UAAjD;;EAEA9c,kBAAAA,WAAW,CAAC/D,MAAD,EAASshB,iBAAT,EAA4B,MAA5B,CAAX;EACD,iBARD;EASD,eA5BD,MA4BO,IAAItU,SAAJ,EAAe;EACpB;EACA;EACA;EACA,oBAAMwK,GAAG,GAAG+J,MAAM,CAACrmB,GAAP,CAAW,UAAAuR,KAAK;EAAA,yBAAI1T,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBuU,kBAAjB,CAAJ;EAAA,iBAAhB,EAA0DhjB,MAA1D,CAAiE,UAAA+M,EAAE;EAAA,yBAAIA,EAAE,KAAK3R,SAAX;EAAA,iBAAnE,CAAZ,CAJoB;;EAMpBL,gBAAAA,KAAK,CAACqK,GAAN,CAAU,IAAV,EAAgB4J,SAAhB,EAA2BwK,GAA3B,EANoB;;EAQpB,oBAAIjL,UAAU,CAACU,WAAf,EAA4B;EAC1B0J,kBAAAA,OAAO,CAAC9d,OAAR,CAAgB,UAAA4T,KAAK;EACnB,wBAAM/B,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBuU,kBAAjB,CAAlB;;EACA,wBACGtW,SAAS,KAAKtR,SAAd,IAA2BmoB,MAAM,CAACjoB,OAAP,CAAemT,KAAf,MAA0B,CAAC,CAAvD,IACC/B,SAAS,KAAKtR,SAAd,IAA2B,EAAEsR,SAAS,IAAI8W,SAAf,CAF9B,EAGE;EACA;EACA;EACA,0BAAME,OAAO,GAAG3oB,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiB6U,iBAAjB,KAAuC,EAAvD,CAHA;;EAKA,0BAAIvW,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,wBAAAA,KAAK,CAACmK,MAAN,CAAawe,OAAb,EAAsB,UAAAnG,MAAM;EAAA,iCAAIA,MAAM,KAAK,MAAf;EAAA,yBAA5B;EACD,uBAFD,MAEO;EACLxiB,wBAAAA,KAAK,CAACmK,MAAN,CAAawe,OAAb,EAAsB,UAAAnG,MAAM;EAAA,iCAAIA,MAAM,KAAK,MAAX,IAAmBxQ,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkB9R,WAAlB,CAA9B;EAAA,yBAA5B;EACD;EACF;EACF,mBAhBD;EAiBA8X,kBAAAA,MAAM,CAAC1oB,OAAP,CAAe,UAAA4T,KAAK;EAClB;EACA,wBAAMiV,OAAO,GAAG3oB,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiB6U,iBAAjB,CAAhB;;EAEA,wBAAIvW,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,sBAAAA,KAAK,CAAC2J,SAAN,CAAgBgf,OAAhB,EAAyB,MAAzB,EAA+B,UAAAnG,MAAM;EAAA,+BAAIA,MAAM,KAAK,MAAf;EAAA,uBAArC;EACD,qBAFD,MAEO;EACLxiB,sBAAAA,KAAK,CAAC2J,SAAN,CAAgBgf,OAAhB,EAAyB,MAAzB,EAA+B,UAAAnG,MAAM;EAAA,+BAAIA,MAAM,KAAK,MAAX,IAAmBxQ,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkB9R,WAAlB,CAA9B;EAAA,uBAArC;EACD;EACF,mBATD;EAUD;EACF,eArCM,MAqCA,IAAIwD,WAAJ,EAAiB;EACtB;EACA;EACA0J,gBAAAA,OAAO,CAAC9d,OAAR,CAAgB,UAAA0iB,MAAM;EACpB,sBAAM/D,GAAG,GAAGze,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkBtO,WAAlB,KAAkC,EAA9C;;EAEAlU,kBAAAA,KAAK,CAACmK,MAAN,CAAasU,GAAb,EAAkB,UAAAmK,IAAI;EAAA,2BAAI5W,EAAE,KAAK4W,IAAX;EAAA,mBAAtB;EACA,sBAAMnV,QAAQ,GAAGzT,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkB+F,iBAAlB,CAAjB;;EAEA,sBAAIvW,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,oBAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,6BAAIA,KAAK,KAAK,MAAd;EAAA,qBAA5B;EACD,mBAFD,MAEO;EACL1T,oBAAAA,KAAK,CAACmK,MAAN,CAAasJ,QAAb,EAAuB,UAAAC,KAAK;EAAA,6BAAIA,KAAK,KAAK,MAAV,IAAkB1B,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBhD,WAAjB,CAA7B;EAAA,qBAA5B;EACD;EACF,iBAXD,EAHsB;;EAgBtB8X,gBAAAA,MAAM,CAAC1oB,OAAP,CAAe,UAAA0iB,MAAM;EACnB,sBAAM/D,GAAG,GAAGze,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkBtO,WAAlB,KAAkC,EAA9C;EACAlU,kBAAAA,KAAK,CAAC2J,SAAN,CAAgB8U,GAAhB,EAAqBzM,EAArB,EAAyB,UAAA4W,IAAI;EAAA,2BAAI5W,EAAE,KAAK4W,IAAX;EAAA,mBAA7B;EACA,sBAAMnV,QAAQ,GAAGzT,KAAK,CAAC4H,GAAN,CAAU4a,MAAV,EAAkB+F,iBAAlB,CAAjB;;EACA,sBAAIvW,EAAE,KAAK3R,SAAX,EAAsB;EACpBL,oBAAAA,KAAK,CAAC2J,SAAN,CAAgB8J,QAAhB,EAA0B,MAA1B,EAAgC,UAAAC,KAAK;EAAA,6BAAIA,KAAK,KAAK,MAAd;EAAA,qBAArC;EACD,mBAFD,MAEO;EACL1T,oBAAAA,KAAK,CAAC2J,SAAN,CAAgB8J,QAAhB,EAA0B,MAA1B,EAAgC,UAAAC,KAAK;EAAA,6BAAIA,KAAK,KAAK,MAAV,IAAkB1B,EAAE,KAAKhS,KAAK,CAAC4H,GAAN,CAAU8L,KAAV,EAAiBhD,WAAjB,CAA7B;EAAA,qBAArC;EACD;EACF,iBATD;EAUD;;EAED,mBAAK3F,IAAL,CAAUpL,IAAV,EAAgB6oB,MAAhB;;EACA,qBAAOA,MAAP;EACD;EApJU,WAAb;EAsJD,SA/JM,MA+JA,IAAIniB,IAAI,KAAKyJ,UAAb,EAAyB;EAC9B;EACA,cAAIoW,IAAI,CAACD,YAAL,CAAkBnlB,QAAlB,KAA+BwP,UAA/B,IAA6C,CAAC4V,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BuW,OAA7B,CAAqC/G,UAArC,CAAlD,EAAoG;EAClG4V,YAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BylB,WAA7B,CAAyCjW,UAAzC;EACD;;EACDhO,UAAAA,UAAU,GAAG;EACXsF,YAAAA,GAAG,EAAE5B,MADM;EAEX;EACAqE,YAAAA,GAHW,eAGNpD,MAHM;EAIT,kBAAM2W,OAAO,GAAG,KAAK1S,IAAL,CAAUvL,IAAV,CAAhB;;EACA,kBAAIsH,MAAM,KAAK2W,OAAf,EAAwB;EACtB,uBAAOA,OAAP;EACD;;EACD,kBAAM2K,iBAAiB,GAAG7nB,GAAG,CAACqnB,UAAJ,CAAe5gB,MAAf,EAAuBjG,UAAjD;;EAEA,kBAAI0c,OAAJ,EAAa;EACX/S,gBAAAA,WAAW,CAAC+S,OAAD,EAAUtN,UAAV,EAAsBjQ,SAAtB,CAAX;EACA6lB,gBAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BonB,WAA7B,CAAyCtK,OAAzC,EAAkDkK,UAAlD;EACA9c,gBAAAA,WAAW,CAAC4S,OAAD,EAAU2K,iBAAV,EAA6BloB,SAA7B,CAAX;EACD;;EACD,kBAAI4G,MAAJ,EAAY;EACV,oBAAM0K,SAAS,GAAG3R,KAAK,CAAC4H,GAAN,CAAUX,MAAV,EAAkBvG,GAAG,CAACY,WAAJ,GAAkBoP,WAApC,CAAlB,CADU;;EAGV,oBAAIiB,SAAS,KAAKtR,SAAlB,EAA6B;EAC3B4G,kBAAAA,MAAM,GAAGif,IAAI,CAACte,GAAL,CAAS9G,QAAT,EAAmB6Q,SAAnB,KAAiC1K,MAA1C;EACD,iBALS;;;EAQV+D,gBAAAA,WAAW,CAAC,IAAD,EAAO9J,UAAP,EAAmB+F,MAAnB,CAAX,CARU;;EAWV4D,gBAAAA,WAAW,CAAC5D,MAAD,EAASqJ,UAAT,EAAqBtQ,KAAK,CAAC4H,GAAN,CAAU,IAAV,EAAgB8I,WAAhB,CAArB,CAAX;EACAwV,gBAAAA,IAAI,CAAC5T,aAAL,CAAmBxR,QAAnB,EAA6BonB,WAA7B,CAAyCjhB,MAAzC,EAAiD6gB,UAAjD;EACA9c,gBAAAA,WAAW,CAAC/D,MAAD,EAASshB,iBAAT,EAA4B,IAA5B,CAAX;EACD,eAdD,MAcO;EACL;EACAvd,gBAAAA,WAAW,CAAC,IAAD,EAAO9J,UAAP,EAAmBb,SAAnB,CAAX;EACD;;EACD,qBAAO4G,MAAP;EACD;EAlCU,WAAb;EAoCD;;EAED,YAAI3E,UAAJ,EAAgB;EACdA,UAAAA,UAAU,CAACE,UAAX,GAAwB9B,GAAG,CAAC8B,UAAJ,KAAmBnC,SAAnB,GAA+B,KAA/B,GAAuCK,GAAG,CAAC8B,UAAnE;;EACA,cAAI9B,GAAG,CAACkH,GAAR,EAAa;EACX,gBAAMihB,OAAO,GAAGvmB,UAAU,CAACsF,GAA3B;;EACAtF,YAAAA,UAAU,CAACsF,GAAX,GAAiB;;;EACf,qBAAOlH,GAAG,CAACkH,GAAJ,CAAQlH,GAAR,EAAa,IAAb,EAAmB;EAAA,kDAAIiF,IAAJ;EAAIA,kBAAAA,IAAJ;EAAA;;EAAA,uBAAakjB,OAAO,CAAChjB,KAAR,CAAc,MAAd,EAAoBF,IAApB,CAAb;EAAA,eAAnB,CAAP;EACD,aAFD;EAGD;;EACD,cAAIjF,GAAG,CAAC2J,GAAR,EAAa;EACX,gBAAMye,OAAO,GAAGxmB,UAAU,CAAC+H,GAA3B;;EACA/H,YAAAA,UAAU,CAAC+H,GAAX,GAAiB,UAAU+F,OAAV;;;EACf,qBAAO1P,GAAG,CAAC2J,GAAJ,CAAQ3J,GAAR,EAAa,IAAb,EAAmB0P,OAAnB,EAA4B,UAAAlR,KAAK;EAAA,uBAAI4pB,OAAO,CAACxpB,IAAR,CAAa,MAAb,EAAmBJ,KAAK,KAAKmB,SAAV,GAAsB+P,OAAtB,GAAgClR,KAAnD,CAAJ;EAAA,eAAjC,CAAP;EACD,aAFD;EAGD;;EACDN,UAAAA,MAAM,CAAC4R,cAAP,CAAsBrJ,MAAM,CAAC4Z,WAAP,CAAmBliB,SAAzC,EAAoDqC,UAApD,EAAgEoB,UAAhE;EACD;EACF,OAjVD;EAmVA,aAAO6E,MAAP;EACD;;;8BAEQsC,MAAMuI;;;YAAIvR,2EAAY;EAC7B,aAAO,uEAAcgJ,IAAd,EAAoBuI,EAApB,EAAwBvR,IAAxB,EAA8B4R,IAA9B,CAAmC,UAAA9N,MAAM;EAC9C,YAAI0C,MAAJ;;EACA,YAAIxG,IAAI,CAACsT,GAAT,EAAc;EACZ9M,UAAAA,MAAM,GAAG1C,MAAM,CAACsJ,IAAhB;EACD,SAFD,MAEO;EACL5G,UAAAA,MAAM,GAAG1C,MAAT;EACD;;EAED,YAAI0C,MAAM,IAAI,MAAI,CAAC2gB,eAAnB,EAAoC;EAClC,cAAMnE,KAAK,GAAGzjB,KAAK,CAACgK,SAAN,CAAgBvJ,IAAhB,CAAd;;EACAgjB,UAAAA,KAAK,CAACtiB,OAAN,GAAgB,IAAhB;EACAnB,UAAAA,KAAK,CAACkH,eAAN,CAAsB,MAAI,CAACsd,SAAL,CAAe/a,IAAf,CAAtB,EAA4Cga,KAA5C,EAAmD,UAAA/iB,GAAG;EACpDV,YAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkBvG,GAAG,CAACQ,UAAtB,EAAkCb,SAAlC;EACD,WAFD;EAGD;;EACD,eAAOkE,MAAP;EACD,OAhBM,CAAP;EAiBD;;;iCAEWkF,MAAM8E;;;YAAO9N,2EAAY;EACnC,aAAO,0EAAiBgJ,IAAjB,EAAuB8E,KAAvB,EAA8B9N,IAA9B,EAAoC4R,IAApC,CAAyC,UAAA9N,MAAM;;;EACpD,YAAI2M,OAAJ;;EACA,YAAIzQ,IAAI,CAACsT,GAAT,EAAc;EACZ7C,UAAAA,OAAO,GAAG3M,MAAM,CAACsJ,IAAjB;EACD,SAFD,MAEO;EACLqD,UAAAA,OAAO,GAAG3M,MAAV;EACD;;EAED,YAAI,OAAA2M,iDAASvP,MAAT,KAAmB,MAAI,CAACimB,eAA5B,EAA6C;EAC3C,cAAMnE,KAAK,GAAGzjB,KAAK,CAACgK,SAAN,CAAgBvJ,IAAhB,CAAd;;EACAgjB,UAAAA,KAAK,CAACtiB,OAAN,GAAgB,IAAhB;EACAnB,UAAAA,KAAK,CAACkH,eAAN,CAAsB,MAAI,CAACsd,SAAL,CAAe/a,IAAf,CAAtB,EAA4Cga,KAA5C,EAAmD,UAAA/iB,GAAG;EACpDwQ,YAAAA,OAAO,CAACpR,OAAR,CAAgB,UAAAmH,MAAM;EACpBjH,cAAAA,KAAK,CAACqK,GAAN,CAAUpD,MAAV,EAAkBvG,GAAG,CAACQ,UAAtB,EAAkCb,SAAlC;EACD,aAFD;EAGD,WAJD;EAKD;;EACD,eAAOkE,MAAP;EACD,OAlBM,CAAP;EAmBD;;;;IAnZoCshB;;ECjFvC;;;;;;;;;;;;EAgOA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAakD,OAAO,GAAG,gBAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}